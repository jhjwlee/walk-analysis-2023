/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@tensorflow/tfjs-core")):"function"==typeof define&&define.amd?define(["exports","@tensorflow/tfjs-core"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).tf=e.tf||{},e.tf)}(this,(function(e,t){"use strict";function n(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,t}var r=n(t);const s=t.env();s.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",(()=>15)),s.registerFlag("WEBGPU_CPU_FORWARD",(()=>!0)),s.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",(()=>-1)),s.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",(()=>!1)),s.registerFlag("WEBGPU_USE_LOW_POWER_GPU",(()=>!1)),s.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e3)),s.registerFlag("WEBGPU_USE_PROFILE_TOOL",(()=>!1)),s.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",(()=>!0)),s.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",(()=>!1)),s.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",(()=>0)),s.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",(()=>!1));class i{constructor(e){e&&(this.vendor=e.vendor,this.architecture=e.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return"intel"===this.vendor}}class a{constructor(e){this.device=e,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireUploadBuffer(e,t){return this.acquireBuffer(e,t,!0)}acquireBuffer(e,t,n=!1){const r=o(e,t);if(this.freeBuffers.has(r)||this.freeBuffers.set(r,[]),this.usedBuffers.has(r)||this.usedBuffers.set(r,[]),this.numBytesUsed+=e,this.numUsedBuffers++,this.freeBuffers.get(r).length>0){this.numFreeBuffers--;const e=this.freeBuffers.get(r).shift();return this.usedBuffers.get(r).push(e),e}this.numBytesAllocated+=e;const s=this.device.createBuffer({size:e,usage:t,mappedAtCreation:n});return this.usedBuffers.get(r).push(s),s}releaseBuffer(e,t,n){if(0===this.freeBuffers.size)return;const r=o(t,n);this.freeBuffers.has(r)||this.freeBuffers.set(r,[]),this.freeBuffers.get(r).push(e),this.numFreeBuffers++,this.numUsedBuffers--;const s=this.usedBuffers.get(r),i=s.indexOf(e);if(i<0)throw new Error("Cannot release a buffer that was never provided by this buffer manager");s.splice(i,1),this.numBytesUsed-=t}releaseUploadBuffer(e,t,n){e.mapAsync(GPUMapMode.WRITE).then((()=>{this.releaseBuffer(e,t,n)}),(e=>{}))}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.usedBuffers.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function o(e,t){return`${e}_${t}`}class u{constructor(e){this.device=e,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(e,t,n,r){const s=e*t*d(n),i=l(e,t,n,r);if(this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.usedTextures.has(i)||this.usedTextures.set(i,[]),this.numBytesUsed+=s,this.numUsedTextures++,this.freeTextures.get(i).length>0){this.numFreeTextures--;const e=this.freeTextures.get(i).shift();return this.usedTextures.get(i).push(e),e}this.numBytesAllocated+=s;const a=this.device.createTexture({size:[e,t],format:n,usage:r});return this.usedTextures.get(i).push(a),a}releaseTexture(e,t,n,r,s){if(0===this.freeTextures.size)return;const i=l(t,n,r,s);this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.freeTextures.get(i).push(e),this.numFreeTextures++,this.numUsedTextures--;const a=this.usedTextures.get(i),o=a.indexOf(e);if(o<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(o,1);const u=t*n*d(r);this.numBytesUsed-=u}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.usedTextures.forEach(((e,t)=>{e.forEach((e=>{e.destroy()}))})),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}}function l(e,t,n,r){return`${e}_${t}_${n}_${r}`}function d(e){if("rgba8unorm"===e)return 16;throw new Error(`${e} is not supported!`)}function h(e,t){if(Math.max(...e)>3)throw new Error("Cannot symbolically compute strides for rank > 4 tensor.");const n=e.length,r=e.map((e=>`${t}[${e}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let e=n-3;e>=0;--e)s[e]=`(${s[e+1]} * ${r[e+1]})`;return s}const c=(e,t,n)=>"int32"===n?`atomicAdd(${e}, bitcast<i32>(${t}));`:`\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${t});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${e}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`,p=(e,n,r,s)=>{const i=function(e,n,r){const s=[],i=r.workgroupSize[0]*r.workgroupSize[1]*r.workgroupSize[2];if(s.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${I(r)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${i}u +\n                localIndex);\n        `}\n      }\n    `),r.isFromPixels){s.push(`\n        struct Uniform {\n          size            : i32,\n          numChannels     : i32,\n          outShapeStrides : vec2<i32>,\n        };\n\n        @group(0) @binding(0) var<storage, read_write> result: array<${S(n.dtype,r.isVec4)}>;\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);const e=v(r);return[x,s.join("\n"),y(n.shape),r.getUserCode(),b(e,r)].join("\n")}let a="struct Uniforms { NAN : f32, INFINITY : f32, ";r.variableNames.forEach(((t,n)=>{const r=f(e[n].shape.length);a+=`${t.charAt(0).toLowerCase()+t.slice(1)}Shape : ${r}, `}));const o=f(n.shape.length);a+=`outShape : ${o}, `;const u=f(n.shape.length-1);a+=`\n         outShapeStrides: ${u}, `,r.size&&(a+="size : i32, ");r.uniforms&&(a+=r.uniforms);a+="};",a=function(e){const t=/(\w+)\s*:\s*vec(5|6)/g;e=e.replace(t,(e=>"@align(16) "+e));const n=/vec(5|6)\s*,\s*(\w+)/g;return e=e.replace(n,((e,t,n)=>`vec${t}, @align(16) ${n}`))}(a),s.push(a),r.atomic?s.push("\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    "):s.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${S(n.dtype,r.isVec4)}>;\n    `);r.variableNames.forEach(((t,n)=>{s.push(`\n      @group(0) @binding(${1+n}) var<storage, read> ${t}: array<${r.variableTypes?r.variableTypes[n]:S(e[n].dtype,r.isVec4)}>;\n        `)})),""!==a&&s.push(`\n      @group(0) @binding(${1+r.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);const l=function(e,t){const{x:n,y:r=[],z:s=[]}=t,i=e.length,a=n.length+r.length+s.length;if(a!==i)return"";if(n.length===i){return`fn getOutputCoords() -> ${f(i)}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `}let o="";const u=[n,r,s];for(let e=0;e<u.length;e++){const t=u[e];if(0!==t.length)if(1===t.length)o+=`let d${t[0]} = i32(globalId[${e}]);`;else{const n=h(t,"uniforms.outShape");o+=`var index${e} = i32(globalId[${e}]);`;for(let r=0;r<n.length;r++)o+=`let d${t[r]} = index${e} / ${n[r]};`,r===n.length-1?o+=`let d${t[r+1]} = index${e} - d${t[r]} * ${n[r]};`:o+=`index${e} = index${e} - d${t[r]} * ${n[r]};`}}const l=[];for(let e=0;e<a;e++)l.push(`d${e}`);const d=f(a);let c=`fn getOutputCoords() -> ${d} {\n  ${o}\n`;0===l.length?c+=`return ${d}(0); }`:c+=`return ${d}(${l.join(",")}); }`;return c}(n.shape,r.dispatchLayout),d=[x,s.join("\n")+w,y(n.shape),l,k(n.shape.length)];r.atomic||d.push(function(e,t,n){const r=e.length,s=S(t,n);let i;i=n?`fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {\n      result[flatIndex] = ${s}(value);\n    }\n    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {\n      result[flatIndex] = ${s}(value);\n    }`:`fn setOutputAtIndex(flatIndex : i32, value : f32) {\n      result[flatIndex] = ${s}(value);\n    }\n    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {\n      result[flatIndex] = ${s}(value);\n    }`;if(r>=2){const e=["d0","d1","d2","d3","d4","d5"].slice(0,r),t=f(r);i+=n?`\n      fn setOutputAtCoords(${e.map((e=>`${e} : i32`)).join(", ")}, value : vec4<f32>) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndex(flatIndex / 4, value);\n      }\n      fn setOutputAtCoordsI32(${e.map((e=>`${e} : i32`)).join(", ")}, value : vec4<i32>) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndexI32(flatIndex / 4, value);\n      }\n    `:`\n      fn setOutputAtCoords(${e.map((e=>`${e} : i32`)).join(", ")}, value : f32) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndex(flatIndex, value);\n      }\n      fn setOutputAtCoordsI32(${e.map((e=>`${e} : i32`)).join(", ")}, value : i32) {\n        let flatIndex = getOutputIndexFromCoords(${t}(${e.join(", ")}));\n        setOutputAtIndexI32(flatIndex, value);\n      }\n    `}return i}(n.shape,n.dtype,r.isVec4));const c=e.map(((e,s)=>function(e,n,r,s){let i=function(e,t){const n=e.name,r=e.shape.length,s=f(r),i="get"+n.charAt(0).toUpperCase()+n.slice(1),a=["d0","d1","d2","d3","d4","d5"].slice(0,r),o=a.map((e=>`${e} : i32`)).join(", ");if(r<1)return t?`\n        fn ${i}() -> vec4<f32> {\n          return vec4<f32>(${n}[0]);\n        }\n      `:`\n      fn ${i}() ->f32 {\n        return f32(${n}[0]);\n      }\n    `;const u=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`;let l=`${r}D`;0===r&&(l="1D");if(t)return`\n      fn ${i}(${o}) -> vec4<f32> {\n        return vec4<f32>(${n}[getIndexFromCoords${l}(${s}(${a.join(",")}),\n          ${u}) / 4]);\n      }\n      `;return`\n    fn ${i}(${o}) -> f32 {\n      return f32(${n}[getIndexFromCoords${l}(${s}(${a.join(",")}),\n        ${u})]);\n    }\n   `}(e,r);e.shape.length<=n.length&&(i+=function(e,n,r,s){const i=e.name,a=i.charAt(0).toUpperCase()+i.slice(1),o="get"+a+"ByOutput",u=e.shape.length,l=n.length,d=f(l);if(t.util.arraysEqual(e.shape,n)&&s)return r?`\n      fn ${o}Index(globalIndex : i32) -> vec4<f32> {\n        return vec4<f32>(${i}[globalIndex]);\n      }\n\n      fn ${o}Coords(coords : ${d}) -> vec4<f32> {\n        return vec4<f32>(${i}[${l>1?"getOutputIndexFromCoords(coords)":"coords"} / 4]);\n      }\n      `:`\n    fn ${o}Index(globalIndex : i32) -> f32 {\n      return f32(${i}[globalIndex]);\n    }\n\n    fn ${o}Coords(coords : ${d}) -> f32 {\n      return f32(${i}[${l>1?"getOutputIndexFromCoords(coords)":"coords"}]);\n    }\n    `;const h=t.backend_util.getBroadcastDims(e.shape,n),c=l-u;let p="";if(0===u)return r?`\n    fn ${o}Index(globalIndex : i32) -> vec4<f32> {\n      return get${a}();\n    }\n\n    fn ${o}Coords(coords : ${d}) -> vec4<f32> {\n      return get${a}();\n    }\n  `:`\n    fn ${o}Index(globalIndex : i32) -> f32{\n      return get${a}();\n    }\n\n    fn ${o}Coords(coords : ${d}) -> f32{\n      return get${a}();\n    }\n  `;p=l<2&&h.length>=1?"coords = 0;":h.map((e=>`coords.${m(e+c)} = 0;`)).join("\n");let g="";if(l<2&&u>0)g="coords";else if(l>1){const t=f(u),n=e.shape.map(((e,t)=>`coords.${m(t+c)}`)).join(", ");g=`${t}(${n})`}else g="coords";const b=`uniforms.${i.charAt(0).toLowerCase()+i.slice(1)}Shape`,x=`${u}D`;if(r)return`\n    fn ${o}Index(globalIndex : i32) -> vec4<f32> {\n      var coords = getCoordsFromIndex(globalIndex);\n      ${p}\n      return ${i}[getIndexFromCoords${x}(${g}, ${b}) / 4];\n    }\n\n    fn ${o}Coords(coordsIn : ${d}) -> vec4<f32> {\n      var coords = coordsIn;\n      ${p}\n      return ${i}[getIndexFromCoords${x}(${g}, ${b}) / 4];\n    }\n  `;return`\n  fn ${o}Index(globalIndex : i32) -> f32 {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${p}\n    return f32(${i}[getIndexFromCoords${x}(${g}, ${b})]);\n  }\n\n  fn ${o}Coords(coordsIn : ${d}) -> f32 {\n    var coords = coordsIn;\n    ${p}\n    return f32(${i}[getIndexFromCoords${x}(${g}, ${b})]);\n  }\n`}(e,n,r,s));return i}(e,n.shape,r.variableTypes?"vec4<f32>"===r.variableTypes[s]:r.isVec4,r.dispatchLayout.x.length===n.shape.length))).join("\n");d.push(c),d.push(r.getUserCode());const p=v(r);d.push(b(p,r));return d.join("\n")}(r,{dtype:s.dtype,shape:s.shape},n),a=e.createShaderModule({code:i,label:n.constructor.name});return e.createComputePipeline({compute:{module:a,entryPoint:"_start"},label:n.constructor.name,layout:"auto"})};function f(e){if(e<=1)return"i32";if(2===e)return"vec2<i32>";if(3===e)return"vec3<i32>";if(4===e)return"vec4<i32>";if(5===e)return"vec5";if(6===e)return"vec6";throw Error(`GPU for rank ${e} is not yet supported`)}function m(e){if(0===e)return"x";if(1===e)return"y";if(2===e)return"z";if(3===e)return"w";if(4===e)return"u";if(5===e)return"v";throw Error(`Index ${e} is not yet supported`)}function g(...e){let t;switch(e.length){case 0:t="\n        fn main()\n      ";break;case 1:t=`\n        fn main(${e[0]} : i32)\n      `;break;default:throw Error("Unreachable")}return t}function b(e,t){let n;return n=`\n     ${function(e){return`\n  @compute @workgroup_size(${e.workgroupSize[0]}, ${e.workgroupSize[1]}, ${e.workgroupSize[2]})\n`}(t)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${e?"main(getGlobalIndex());":"main();"};\n      }\n    `,n}const x="\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  fn idiv(a: i32, b: i32, sign: f32) -> i32 {\n    var res: i32 = a / b;\n    let modulo: i32 = a % b;\n    if (sign < 0. && modulo != 0) {\n      res = res - 1;\n    }\n    return res;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n",w="\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n";function y(e){const n=e.length;if(n<=1)return"fn getCoordsFromIndex(index : i32) -> i32 { return index; }";const r=t.util.computeStrides(e),s=f(n),i=[];for(let e=0;e<n;e++)i.push(`d${e}`);if(1===r.length)return"    fn getCoordsFromIndex(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;\n      return vec2<i32>(d0, d1);\n    }";let a;return a="var index2 = index;"+r.map(((e,t)=>`${`let ${i[t]} = index2 / uniforms.outShapeStrides.${m(t)}`}; ${t===r.length-1?`let ${i[t+1]} = index2 - ${i[t]} * uniforms.outShapeStrides.${m(t)}`:`index2 = index2 - ${i[t]} * uniforms.outShapeStrides.${m(t)}`};`)).join(""),`\n    fn getCoordsFromIndex(index : i32) -> ${s} {\n      ${a}\n      return ${s}(${i.join(",")});\n    }\n  `}function k(e){let n="";switch(e){case 0:case 1:n+="\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        ";break;case 2:n+="\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        ";break;case 3:n+="\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        ";break;case 4:n+="\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        ";break;case 5:n+="\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        ";break;case 6:n+="\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        ";break;default:t.util.assert(!1,(()=>`Unsupported ${e}D shape`))}return n}function I(e){return 1===e.dispatch[1]&&1===e.dispatch[2]}function S(e,t){return"float32"===e?t?"vec4<f32>":"f32":"int32"===e||"bool"===e?t?"vec4<i32>":"i32":e}function v(e){return(!e.dispatchLayout.hasOwnProperty("y")||0===e.dispatchLayout.y.length)&&(!e.dispatchLayout.hasOwnProperty("z")||0===e.dispatchLayout.z.length)}const C=e=>{let t=1;for(let n=0;n<e.length;n++)t*=e[n];return t};function $(e,t,n=[1,1,1],r=[1,1,1]){const[s,i,a]=[Math.ceil(C(e.x.map((e=>t[e])))/(n[0]*r[0])),e.y?Math.ceil(C(e.y.map((e=>t[e])))/(n[1]*r[1])):1,e.z?Math.ceil(C(e.z.map((e=>t[e])))/(n[2]*r[2])):1];return[s,i,a]}function R(e,t,n,r=!1){const s=[8,8,1],i=[4,4,1];return r||(e<=8&&(i[1]=1),t<=16&&n<=16&&(s[0]=4)),{workgroupSize:s,elementsPerThread:i}}function A(e,t,n=!1){if(n)return[8,8,1];const r=C(e.x.map((e=>t[e]))),s=C(e.y.map((e=>t[e])));return r<=4?[4,16,1]:s<=4?[16,4,1]:[16,16,1]}function T(e,t,n=!1){if(n)return[4,4,1];const r=C(e.x.map((e=>t[e]))),s=C(e.y.map((e=>t[e])));return r<=4?[1,2,1]:s<=4?[2,1,1]:[2,2,1]}function P(e){return{x:e.map(((e,t)=>t))}}function N(e){if("float32"===e||"int32"===e||"bool"===e||"string"===e)return 4;if("complex64"===e)return 8;throw new Error(`Unknown dtype ${e}`)}function z(){return("undefined"!=typeof window||"undefined"!=typeof WorkerGlobalScope)&&!!navigator.gpu}function _(e,n){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&t.util.assert("complex64"!==e.dtype,(()=>`${n} does not support complex64 tensors in the WebGPU backend.`))}))}var E;!function(e){e[e.MatMulReduceProgram=0]="MatMulReduceProgram",e[e.MatMulSplitKProgram=1]="MatMulSplitKProgram",e[e.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",e[e.MatMulPackedProgram=3]="MatMulPackedProgram",e[e.MatMulMax=4]="MatMulMax"}(E||(E={}));var F={__proto__:null,tilesFitEvenlyIntoShape:function(e,t){if(e.length!==t.length)throw new Error(`Cannot compute whether rank ${e.length} tiles fit evenly into rank ${t.length} shape - ranks must match.`);return t.every(((t,n)=>t%e[n]==0))},computeDispatch:$,computeWorkgroupInfoForMatMul:R,computeWorkgroupSizeForConv2d:A,computeWorkPerThreadForConv2d:T,flatDispatchLayout:P,GPUBytesPerElement:N,isWebGPUSupported:z,assertNotComplex:_,get MatMulProgramType(){return E}};const B=t.env().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");class O extends t.KernelBackend{constructor(e,n){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchNumberInEncoder=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,!z())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=e,this.queue=e.queue,this.currentCommandEncoder=null,this.currentComputePass=null,this.supportTimeQuery=e.features.has("timestamp-query-inside-passes"),this.adapterInfo=new i(n),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new a(this.device),this.textureManager=new u(this.device),this.tensorMap=new t.DataStorage(this,t.engine()),this.supportTimeQuery&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2})),t.env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:e,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}nextDataId(){return O.nextDataId++}floatPrecision(){return 32}defaultGpuBufferUsage(){return GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}disposeData(e,t=!1){if(this.tensorDataPendingDisposal.indexOf(e)>=0)return!1;if(!this.tensorMap.has(e))return!0;const n=this.tensorMap.get(e);if(this.decRef(e),!t&&n.refCount>0)return!1;if(this.commandQueueOwnedIds.has(e))return this.tensorDataPendingDisposal.push(e),!1;const{complexTensorInfos:r}=this.tensorMap.get(e);return null!=r&&(this.disposeData(r.real.dataId,t),this.disposeData(r.imag.dataId,t)),this.releaseResource(e),this.tensorMap.delete(e),!0}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(e){const t=this.tensorMap.get(e);if(t&&t.resourceInfo)if(t.external)t.resourceInfo=null;else{if("texture"in t.resourceInfo){const e=t.resourceInfo;e.texture instanceof GPUTexture&&this.textureManager.releaseTexture(e.texture,e.width,e.height,e.format,e.usage),e.texture=null}else{const e=t.resourceInfo;this.bufferManager.releaseBuffer(e.buffer,e.size,e.usage),e.buffer=null}t.resourceInfo=null}}refCount(e){if(this.tensorMap.has(e)){return this.tensorMap.get(e).refCount}return 0}incRef(e){this.tensorMap.get(e).refCount++}decRef(e){if(this.tensorMap.has(e)){this.tensorMap.get(e).refCount--}}write(e,t,n){if("complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.tensorMap.set(r,{dtype:n,shape:t,values:e,refCount:1}),r}move(e,t,n,r,s){if("complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(e,{dtype:r,shape:n,values:t,refCount:s})}submitQueue(){this.ensureComputePassEnded(),this.queue.submit([this.currentCommandEncoder.finish()]),this.currentCommandEncoder=null,this.dispatchNumberInEncoder=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach((e=>{this.releaseResource(e),this.tensorMap.delete(e)})),this.uniformPendingDisposal.forEach((e=>this.bufferManager.releaseBuffer(e.buffer,e.size,e.usage))),this.stagingPendingDisposal.forEach((e=>this.bufferManager.releaseUploadBuffer(e.buffer,e.size,e.usage))),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.currentCommandEncoder||(this.currentCommandEncoder=this.device.createCommandEncoder())}ensureComputePassEnded(){this.currentComputePass&&(this.currentComputePass.end(),this.currentComputePass=null)}getComputePass(){return this.currentComputePass||(this.currentComputePass=this.currentCommandEncoder.beginComputePass()),this.currentComputePass}async getBufferData(e,n){const r=this.bufferManager.acquireBuffer(n,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(e,0,r,0,n),this.submitQueue(),await r.mapAsync(GPUMapMode.READ);const s=r.getMappedRange().slice(0);return r.unmap(),null!=r&&this.bufferManager.releaseBuffer(r,n,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ),t.env().getBool("WEBGPU_USE_PROFILE_TOOL")&&(t.util.assert(void 0!==this.dummyContext,(()=>"Fail to get context for profiling tool")),this.dummyContext.getCurrentTexture()),s}convertAndCacheOnCPU(e,t){const n=this.tensorMap.get(e);return this.releaseResource(e),n.values=t,n.values}readSync(e){const t=this.tensorMap.get(e),{values:n}=t;if(null==n)throw new Error("WebGPU readSync is only available for CPU-resident tensors.");return n}async read(e){if(!this.tensorMap.has(e))throw new Error(`Tensor ${e} was not registered!`);const n=this.tensorMap.get(e),{values:r}=n;if(null!=r)return this.convertAndCacheOnCPU(e,r);let s;if("complex64"===n.dtype){const e=await Promise.all([this.read(n.complexTensorInfos.real.dataId),this.read(n.complexTensorInfos.imag.dataId)]),r=e[0],i=e[1];s=t.backend_util.mergeRealAndImagArrays(r,i)}else{const e=n.resourceInfo,r=await this.getBufferData(e.buffer,e.size);s=t.util.convertBackendValuesAndArrayBuffer(r,n.dtype)}return this.convertAndCacheOnCPU(e,s),s}copyBuffer(e,t,n){const r=this.bufferManager.acquireBuffer(t,n);return this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(e,0,r,0,t),this.submitQueue(),r}createTensorFromGPUData(e,n,r){let s=e.buffer;if("complex64"===r)throw new Error("Cannot write to a complex64 dtype. ");const i={id:this.nextDataId()};this.tensorMap.set(i,{dtype:r,shape:n,values:null,refCount:1,external:e.zeroCopy});const a=this.tensorMap.get(i),o=N(a.dtype)*t.util.sizeFromShape(a.shape);if(e.buffer.size<o)throw new Error(`GPUBuffer size(${e.buffer.size}) is smaller than tensor size(${o})!`);if((e.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!=(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return!0!==e.zeroCopy&&(s=this.copyBuffer(s,o,s.usage)),a.resourceInfo={size:s.size,usage:s.usage,buffer:s},t.engine().makeTensorFromDataId(i,n,r,this)}readToGPU(e){const n=this.tensorMap.get(e),{values:r,dtype:s,shape:i,resourceInfo:a}=n;if("complex64"===s)throw new Error("Does not support reading buffer for complex64 dtype.");if(null==a)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const o=a.size,u=this.bufferManager.acquireBuffer(o,a.usage);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(a.buffer,0,u,0,o),this.submitQueue();const l=this.makeTensorInfo(i,s),d=t.engine().makeTensorFromTensorInfo(l);return this.tensorMap.get(l.dataId).resourceInfo={size:o,usage:this.defaultGpuBufferUsage(),buffer:u},{tensorRef:d,buffer:u,bufSize:o}}bufferSync(e){const n=this.readSync(e.dataId);if("string"===e.dtype)try{const r=n.map((e=>t.util.decodeString(e)));return t.buffer(e.shape,e.dtype,r)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return t.buffer(e.shape,e.dtype,n)}async time(e){this.supportTimeQuery||console.warn("This device doesn't support timestamp-query-inside-passes extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis then try again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled. Using performance.now is not workable for webgpu since it doesn't support synchronous data read from GPU.");const n=this.activeTimers,r=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=r,s=!0):this.activeTimers.push(r),this.activeTimers=r,e();const i=t.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=t.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=n,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},u=await Promise.all(i);return o.kernelMs=t.util.sum(u),o.getExtraProfileInfo=()=>u.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,o}makeTensorInfo(e,n,r){"string"===n&&null!=r&&r.length>0&&t.util.isString(r[0])&&(r=r.map((e=>t.util.encodeString(e))));return{dataId:this.write(r,e,n),shape:e,dtype:n}}tensorToBinding(e){if(!e)return null;const t=this.tensorMap.get(e.dataId);if("texture"in t.resourceInfo){const e=t.resourceInfo;return e.texture instanceof GPUExternalTexture?e.texture:e.texture.createView()}const n=t.resourceInfo;return{offset:0,size:n.size,buffer:n.buffer}}async getQueryTime(e){return this.supportTimeQuery?this.getTimeFromQuerySet(e):0}uploadToGPU(e){const n=this.tensorMap.get(e);if(n.resourceInfo)return;const r=N(n.dtype)*t.util.sizeFromShape(n.shape),s=this.bufferManager.acquireBuffer(r,this.defaultGpuBufferUsage());if(n.resourceInfo={size:r,usage:this.defaultGpuBufferUsage(),buffer:s},n.values){const e=this.bufferManager.acquireUploadBuffer(r,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC),t=e.getMappedRange();"int32"===n.dtype||"bool"===n.dtype?new Int32Array(t).set(n.values):new Float32Array(t).set(n.values),e.unmap(),this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.copyBufferToBuffer(e,0,s,0,r);const i={size:r,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,buffer:e};this.stagingPendingDisposal.push(i)}}makeUniforms(e){let n=0,r=0;const s=[];let i=1;e.forEach((e=>{let a;switch(0===e.data.length&&(e.data=[1]),e.data.length){case 1:a=4;break;case 2:a=8;break;case 3:case 4:case 5:case 6:a=16;break;default:t.util.assert(!1,(()=>`Unsupported ${e.data.length}D shape`))}5!==r&&6!==r||(a=16),a>i&&(i=a),n=Math.ceil(n/a)*a,r=e.data.length,s.push(n),n+=4*e.data.length})),n=Math.ceil(n/i)*i;const a=new ArrayBuffer(n);e.forEach(((e,t)=>{const n=s[t];"int32"===e.type?new Int32Array(a,n,e.data.length).set(e.data):"uint32"===e.type?new Uint32Array(a,n,e.data.length).set(e.data):new Float32Array(a,n,e.data.length).set(e.data)}));const o=this.bufferManager.acquireBuffer(n,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.queue.writeBuffer(o,0,a,0,n);const u={size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,buffer:o};return this.uniformPendingDisposal.push(u),{offset:0,size:n,buffer:o}}runWebGPUProgram(e,n,r,s,i){if(i||(i=this.makeTensorInfo(e.outputShape,r)),0===t.util.sizeFromShape(i.shape))return this.tensorMap.get(i.dataId).values=t.util.getTypedArrayFromDType(i.dtype,0),i;this.uploadToGPU(i.dataId),e.dispatch=((e,n)=>{const r=e.limits.maxComputeWorkgroupsPerDimension,s=n.dispatchLayout,i=n.dispatch;if(i.every((e=>e<=r)))return i;t.util.assert(i[0]>r&&void 0===s.y&&void 0===s.z,(()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension."));let a=Math.ceil(Math.sqrt(i[0]));return a>r?(a=Math.ceil(Math.cbrt(i[0])),t.util.assert(a<=r,(()=>"Total dispatch size exceeds WebGPU maximum.")),[a,a,a]):[a,a,1]})(this.device,e);let a=[],o=[];if(!e.isFromPixels){a.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),o=n.concat(i).map((e=>e.shape));const r="int32";o.map((e=>{a.push({type:r,data:e})}));const s=t.util.computeStrides(i.shape);if(a.push({type:r,data:s}),e.size){const n=t.util.sizeFromShape(e.outputShape);a.push({type:r,data:[e.isVec4?n/4:n]})}}const u=n.map(((t,n)=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(t.dataId),{dtype:this.tensorMap.get(t.dataId).dtype,shape:t.shape,name:e.variableNames[n]}})),l=function(e,n,r,s){let i=e.shaderKey;if(e.isFromPixels)return i;const a=r.map((e=>e.dtype)).concat(s.dtype),o=r.map((e=>t.backend_util.getBroadcastDims(e.shape,s.shape))),u=r.map((e=>t.util.arraysEqual(e.shape,s.shape))).join("_"),l=o.map((e=>e.join("_"))).join(";"),d=I(e)?"flatDispatch":"";return i+="_"+(e.workgroupSize?e.workgroupSize.join(","):"")+n.map((e=>e.length)).join(",")+a.join(",")+e.variableNames.join(",")+l+u+d,i}(e,o,u,i);let d;l in this.pipelineCache?d=this.pipelineCache[l]:(d=p(this.device,e,u,i),this.pipelineCache[l]=d),s&&(a=[...a,...s]);const h=[this.tensorToBinding(i),...n.map((e=>this.tensorToBinding(e))),this.makeUniforms(a)],c=this.device.createBindGroup({layout:d.getBindGroupLayout(0),entries:h.map(((e,t)=>({binding:t,resource:e})))});this.ensureCommandEncoderReady();const f=this.getComputePass(),m=null!=this.activeTimers;return m&&this.supportTimeQuery&&f.writeTimestamp(this.querySet,0),f.setPipeline(d),f.setBindGroup(0,c),f.dispatchWorkgroups(e.dispatch[0],e.dispatch[1],e.dispatch[2]),m&&this.supportTimeQuery&&f.writeTimestamp(this.querySet,1),this.dispatchNumberInEncoder++,n.forEach((e=>{this.commandQueueOwnedIds.add(e.dataId)})),this.commandQueueOwnedIds.add(i.dataId),t.env().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchNumberInEncoder&&this.submitQueue(),m&&this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(this.querySet)}),i}async getTimeFromQuerySet(e){const t=this.bufferManager.acquireBuffer(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),n=this.bufferManager.acquireBuffer(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.ensureCommandEncoderReady(),this.ensureComputePassEnded(),this.currentCommandEncoder.resolveQuerySet(e,0,2,t,0),this.currentCommandEncoder.copyBufferToBuffer(t,0,n,0,16),this.submitQueue(),await n.mapAsync(GPUMapMode.READ);const r=new BigUint64Array(n.getMappedRange()),s=Number(r[1]-r[0]);return n.unmap(),this.bufferManager.releaseBuffer(n,16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST),this.bufferManager.releaseBuffer(t,16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE),s/1e6}shouldExecuteOnCPU(e,n=B){return t.env().getBool("WEBGPU_CPU_FORWARD")&&e.every((e=>null==this.tensorMap.get(e.dataId).resourceInfo&&t.util.sizeFromShape(e.shape)<n))}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}}var L;O.nextDataId=0,z()&&t.registerBackend("webgpu",(async()=>{t.env().set("CHECK_COMPUTATION_FOR_ERRORS",!1);const e={powerPreference:t.env().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},n=await navigator.gpu.requestAdapter(e),r={};n.features.has("timestamp-query-inside-passes")&&(r.requiredFeatures=["timestamp-query-inside-passes"]);const s=n.limits;r.requiredLimits={maxComputeWorkgroupStorageSize:s.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:s.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:s.maxStorageBufferBindingSize};const i=await n.requestDevice(r),a=await n.requestAdapterInfo();return new O(i,a)}),3),function(e){e[e.ADD=0]="ADD",e[e.ATAN2=1]="ATAN2",e[e.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",e[e.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",e[e.DIV=4]="DIV",e[e.EQUAL=5]="EQUAL",e[e.GREATER=6]="GREATER",e[e.GREATER_EQUAL=7]="GREATER_EQUAL",e[e.INT_DIV=8]="INT_DIV",e[e.LESS=9]="LESS",e[e.LESS_EQUAL=10]="LESS_EQUAL",e[e.LOGICAL_AND=11]="LOGICAL_AND",e[e.LOGICAL_OR=12]="LOGICAL_OR",e[e.MAX=13]="MAX",e[e.MIN=14]="MIN",e[e.MOD=15]="MOD",e[e.MUL=16]="MUL",e[e.NOT_EQUAL=17]="NOT_EQUAL",e[e.POW=18]="POW",e[e.PRELU=19]="PRELU",e[e.SQUARED_DIFFERENCE=20]="SQUARED_DIFFERENCE",e[e.SUB=21]="SUB"}(L||(L={}));const D="\n  if (isnan(a)) { return a; }\n  if (isnan(b)) { return b; }\n  ",U="\n  resultTemp = select(\n      resultTemp, vec4<f32>(valueForNaN),\n      vec4<bool>(isNaN) | isnanVec4(a) | isnanVec4(b));\n  ",W=`\n  ${D}\n  if (b == 0.) {\n    return uniforms.NAN;\n  }\n  var resultTemp = a % b;\n  if ((a < 0. && b < 0.) || (a >= 0. && b > 0.)) {\n    return resultTemp;\n  } else {\n    return (resultTemp + b) % b;\n  }\n`,M=`\n  let isNaN = !vec4<bool>(b);\n  let valueForNaN = uniforms.NAN;\n  var resultTemp = vec4<f32>(a % b);\n  ${U}\n\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n\n  return resultTemp;\n`,V=`\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n  ${U}\n\n  return resultTemp;\n`,G=`\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n  let valueForNaN = uniforms.NAN;\n  ${U}\n  return resultTemp;\n`;function H(e,t,n="uniforms.NAN"){const r=t?U:D;return t?`\n    let valueForNaN = ${n};\n    var resultTemp = vec4<f32>(${e}(a, b));\n    `+r+"\n    return resultTemp;\n  ":r+`\n    return ${e}(a, b);\n  `}function K(e,t){switch(e){case L.ADD:return"return a + b;";case L.ATAN2:return H("atan2",t);case L.COMPLEX_MULTIPLY_IMAG:return"return areal * bimag + aimag * breal;";case L.COMPLEX_MULTIPLY_REAL:return"return areal * breal - aimag * bimag;";case L.DIV:return"return a / b;";case L.EQUAL:return t?"return vec4<f32>(a == b);":"return f32(a == b);";case L.GREATER:return t?"return vec4<f32>(a > b);":"return f32(a > b);";case L.GREATER_EQUAL:return t?"return vec4<f32>(a >= b);":"return f32(a >= b);";case L.INT_DIV:return t?"\n  let ia = vec4<i32>(round(a));\n  let ib = vec4<i32>(round(b));\n  let cond = ib != vec4<i32>(0);\n  var resultTemp = vec4<i32>(0);\n  let s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    resultTemp[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    resultTemp[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    resultTemp[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    resultTemp[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4<f32>(resultTemp);\n":"\n  let s = sign(a) * sign(b);\n  let ia = i32(round(a));\n  let ib = i32(round(b));\n  return f32(idiv(ia, ib, s));\n";case L.LESS:return t?"return vec4<f32>(a < b);":"return f32(a < b);";case L.LESS_EQUAL:return t?"return vec4<f32>(a <= b);":"return f32(a <= b);";case L.LOGICAL_AND:return t?"return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));":"return f32(a >= 1.0 && b >= 1.0);";case L.LOGICAL_OR:return t?"return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));":"return f32(a >= 1.0 || b >= 1.0);";case L.MAX:return H("max",t);case L.MIN:return H("min",t);case L.MOD:return t?M:W;case L.MUL:return"return a * b;";case L.NOT_EQUAL:return t?V:"\n  if (isnan(a) || isnan(b)) {\n    return 1.0;\n  }\n  return f32(a != b);\n";case L.POW:return t?G:"\n  if(a < 0.0 && floor(b) < b) {\n    return uniforms.NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  if (round(abs(b) % 2.0) != 1.0) {\n    return pow(abs(a), b);\n  }\n  return sign(a) * pow(abs(a), b);\n";case L.PRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return b * a; }  return a;";case L.SQUARED_DIFFERENCE:return"return (a - b) * (a - b);";case L.SUB:return"return a - b;";default:throw new Error(`BinaryType ${e} is not implemented!`)}}var X;!function(e){e[e.ABS=0]="ABS",e[e.ACOS=1]="ACOS",e[e.ACOSH=2]="ACOSH",e[e.ASIN=3]="ASIN",e[e.ASINH=4]="ASINH",e[e.ATAN=5]="ATAN",e[e.ATANH=6]="ATANH",e[e.CEIL=7]="CEIL",e[e.COS=8]="COS",e[e.COSH=9]="COSH",e[e.ELU=10]="ELU",e[e.ERF=11]="ERF",e[e.EXP=12]="EXP",e[e.EXPM1=13]="EXPM1",e[e.FLOOR=14]="FLOOR",e[e.IS_FINITE=15]="IS_FINITE",e[e.IS_INF=16]="IS_INF",e[e.IS_NAN=17]="IS_NAN",e[e.LINEAR=18]="LINEAR",e[e.LOG=19]="LOG",e[e.LOG1P=20]="LOG1P",e[e.LOGICAL_NOT=21]="LOGICAL_NOT",e[e.NEG=22]="NEG",e[e.RELU=23]="RELU",e[e.RELU6=24]="RELU6",e[e.LEAKYRELU=25]="LEAKYRELU",e[e.RECIPROCAL=26]="RECIPROCAL",e[e.ROUND=27]="ROUND",e[e.RSQRT=28]="RSQRT",e[e.SELU=29]="SELU",e[e.SIGMOID=30]="SIGMOID",e[e.SIGN=31]="SIGN",e[e.SIN=32]="SIN",e[e.SINH=33]="SINH",e[e.SOFTPLUS=34]="SOFTPLUS",e[e.SQRT=35]="SQRT",e[e.SQUARE=36]="SQUARE",e[e.STEP=37]="STEP",e[e.TAN=38]="TAN",e[e.TANH=39]="TANH",e[e.TO_INT=40]="TO_INT"}(X||(X={}));const q=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  let p = ${t.backend_util.ERF_P};\n  let a1 = ${t.backend_util.ERF_A1};\n  let a2 = ${t.backend_util.ERF_A2};\n  let a3 = ${t.backend_util.ERF_A3};\n  let a4 = ${t.backend_util.ERF_A4};\n  let a5 = ${t.backend_util.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`,j=`\n  if (a >= 0.0) {\n    return ${t.backend_util.SELU_SCALE} * a;\n  } else {\n    return ${t.backend_util.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`;function Y(e,t){switch(e){case X.ABS:return"return abs(a);";case X.ACOS:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n";case X.ACOSH:return"\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n";case X.ASIN:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n";case X.ASINH:return"return asinh(a);";case X.ATAN:return"\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n";case X.ATANH:return"\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n";case X.COS:return"return cos(a);";case X.COSH:return"\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n";case X.CEIL:return"return ceil(a);";case X.ELU:return t?"\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n":"if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";case X.ERF:return q;case X.EXP:return"return exp(a);";case X.EXPM1:return"return exp(a) - 1.0;";case X.FLOOR:return"return floor(a);";case X.IS_FINITE:return"return f32(!isnan(a) && !isinf(a));";case X.IS_INF:return"return f32(isinf(a));";case X.IS_NAN:return"return f32(isnan(a));";case X.LINEAR:return"return a;";case X.LOG:return"if (a < 0.0) { return uniforms.NAN; }\n  return log(a);";case X.LOG1P:return"\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n";case X.LOGICAL_NOT:return"return f32(!(a >= 1.0));";case X.NEG:return"return -a;";case X.LEAKYRELU:return t?"\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n":"if (a < 0.0) { return uniforms.alpha * a; } return a;";case X.RECIPROCAL:return"return 1.0 / a;";case X.RELU:return t?"\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n":"return select(a, 0.0, a < 0.0);";case X.RELU6:return t?"return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));":"return clamp(a, 0.0, 6.0);";case X.ROUND:return"return round(a);";case X.RSQRT:return"return inverseSqrt(a);";case X.SELU:return j;case X.SIGMOID:return"return 1.0 / (1.0 + exp(-1.0 * a));";case X.SIGN:return"return sign(a);";case X.SIN:return"return sin(a);";case X.SINH:return"\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n";case X.SOFTPLUS:return"\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n";case X.SQRT:return"return sqrt(a);";case X.SQUARE:return"return a * a;";case X.STEP:return"\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n";case X.TAN:return"return tan(a);";case X.TANH:return"\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n";case X.TO_INT:return"return f32(i32((a)));";default:throw new Error(`BinaryType ${e} is not implemented!`)}}const Q=e=>{switch(e){case 1:return"f32";case 2:return"vec2<f32>";case 3:return"vec3<f32>";case 4:return"vec4<f32>";default:throw new Error(`${e}-component is not supported.`)}};function Z(e,t=!1,n=!1,r=3){if(null===e)return"";let s="";if("linear"===e)s=Y(X.LINEAR);else if("relu"===e)s=Y(X.RELU,n);else if("elu"===e)s=Y(X.ELU,n);else if("relu6"===e)s=Y(X.RELU6,n);else if("prelu"===e)s=K(L.PRELU,n);else if("sigmoid"===e)s=Y(X.SIGMOID,n);else{if("leakyrelu"!==e)throw new Error(`Activation ${e} has not been implemented for the WebGPU backend.`);s=Y(X.LEAKYRELU,n)}const i=Q(n?4:1);let a="";return a=t?`\n      fn activation(a : ${i}, coords : vec${r}<i32>) -> ${i} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${s}\n      }`:`\n      fn activation(a : ${i}, coords : vec${r}<i32>) -> ${i} {\n        ${s}\n      }`,a}function J(e,t){return`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      ${t?"value = activation(value, coords);":""}\n      `}function ee(e,n,r=!1,s=!1,i=!1,a=1){t.util.assert(e&&1===a||!e,(()=>`transposeA ${e} is not compatible with component size ${a}`));const o=`\n      ${e?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}\n\n    `,u=n?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`\n  fn mm_readA(batch: i32, row: i32, colIn: i32) -> ${Q(a)} {\n    var value = ${Q(a)}(0.0);\n    let col = colIn * ${a};\n    ${r&&i?o:`\n    ${e?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}\n    {\n      ${o}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, colIn: i32) -> ${Q(a)} {\n    let col = colIn * ${a};\n    var value = ${Q(a)}(0.0);\n    ${u}\n    return value;\n  }\n  `}function te(e,t,n,r,s=!1,i=!1,a=!1,o=1){return`\n  ${ee(n,r,s,i,a,o)}\n  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Q(o)}) {\n    let col = colIn * ${o};\n    ${s&&i?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${J(e,t)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `}function ne(e,n,r=!1,s=32,i=!1,a=32,o=!1,u=!1){const l=n[1]*e[1],d=n[0]*e[0],h=r?l:s,c=r?s:l,p=h/n[0],f=s/n[1],m=e[1];return t.util.assert((r&&4===p&&4===e[1]||!r&&(3===p||4===p))&&h%n[0]==0&&s%n[1]==0&&4===e[0],(()=>`If transposeA ${r} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.\n          Otherwise, innerElementSize ${p} must be 3 or 4.\n      tileAWidth ${h} must be divisible by workgroupSize[0]${n[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${n[1]}. colPerThread ${e[0]} must be 4.`)),`\n  var<workgroup> mm_Asub : array<array<vec${p}<f32>, ${h/p}>, ${c}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${d/e[0]}>, ${s}>;\n\n  ${g()} {\n    let localRow = i32(localId.y);\n    let tileRow = ${o?"0":`localRow * ${m}`};\n    let tileCol = i32(localId.x);\n\n    let globalRow = ${o?"0":`i32(globalId.y) * ${m}`};\n    let globalCol = i32(globalId.x);\n    let batch = ${i?"0":"i32(globalId.z)"};\n    let batchA = ${i||!u?"batch":"batch % uniforms.aShape[0]"};\n    let batchB = ${i||!u?"batch":"batch % uniforms.bShape[0]"};\n    let globalRowStart = i32(workgroupId.y) * ${l};\n\n    let numTiles = ${i?`${Math.ceil(a/s)}`:`(uniforms.dimInner - 1) / ${s} + 1`};\n    var kStart = ${i?`i32(globalId.z) * ${a}`:"0"};\n\n    var acc: array<vec4<f32>, ${m}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${f};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${((e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart / ${t} + inputCol);\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart / ${t} + inputCol);\n        `)(r,p)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${f}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${s};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${s/p}; k++) {\n            let BCached0 = mm_Bsub[k * ${p}][tileCol];\n            let BCached1 = mm_Bsub[k * ${p} + 1][tileCol];\n            let BCached2 = mm_Bsub[k * ${p} + 2][tileCol];\n            ${3===p?"":`let BCached3 = mm_Bsub[k * ${p} + 3][tileCol];`}\n\n            ${((e,t,n)=>e?`\n        let ACached0 = mm_Asub[k * ${t}][localRow];\n        let ACached1 = mm_Asub[k * ${t} + 1][localRow];\n        let ACached2 = mm_Asub[k * ${t} + 2][localRow];\n        ${3===t?"":`let ACached3 = mm_Asub[k * ${t} + 3][localRow];`}\n        for (var i = 0; i < ${n}; i++) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < ${n}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`)(r,p,m)}\n        }\n\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`}const re=e=>e?"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        ":"\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        ";function se(e,n,r=!1,s=32,i=!1,a=32,o=!1,u=!1){const l=e[1]*n[1],d=e[0]*n[0],h=r?l:s,c=r?s:l;t.util.assert(c%n[1]==0&&h%n[0]==0&&s%n[1]==0,(()=>`tileAHight ${c} must be divisible by workgroupSize[1]${n[1]}, tileAWidth ${h} must be divisible by workgroupSize[0]${n[0]}, tileInner ${s} must be divisible by workgroupSize[1]${n[1]}`));const p=c/n[1],f=h/n[0],m=s/n[1],b=e[1],x=e[0],w=o?`\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${l};\n      let globalColStart = i32(workgroupId.x) * ${d};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${c}; inputRow = inputRow + ${n[1]}) {\n          for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${n[0]}) {\n            ${re(r)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${n[1]}) {\n              for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${n[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${s};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${x}>;\n        for (var k = 0; k < ${s}; k++) {\n          for (var inner = 0; inner < ${x}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${n[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${b}; innerRow++) {\n            let ACached = ${r?`mm_Asub[k][localRow + innerRow * ${n[1]}];`:`mm_Asub[localRow + innerRow * ${n[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n              acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                  ACached * BCached[innerCol];\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${b}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${n[1]};\n        for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${n[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      `:`\n  let tileRow = i32(localId.y) * ${b};\n  let tileCol = i32(localId.x) * ${x};\n\n  let globalRow = i32(globalId.y) * ${b};\n  let globalCol = i32(globalId.x) * ${x};\n  let globalRowStart = i32(workgroupId.y) * ${l};\n\n  let tileRowA = i32(localId.y) * ${p};\n  let tileColA = i32(localId.x) * ${f};\n  let tileRowB = i32(localId.y) * ${m};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${p}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${f}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${re(r)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${m}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${s};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${x}>;\n    for (var k = 0; k < ${s}; k++) {\n      for (var inner = 0; inner < ${x}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${b}; innerRow++) {\n        ${(e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];")(r)}\n        for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n          acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${b}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;return`\n    var<workgroup> mm_Asub : array<array<f32, ${h}>, ${c}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${d}>, ${s}>;\n\n    ${g()} {\n      let batch = ${i?"0":"i32(globalId.z)"};\n      let batchA = ${i||!u?"batch":"batch % uniforms.aShape[0]"};\n      let batchB = ${i||!u?"batch":"batch % uniforms.bShape[0]"};\n      let numTiles = ${i?`${Math.ceil(a/s)}`:`(uniforms.dimInner - 1) / ${s} + 1`};\n      var kStart = ${i?`i32(globalId.z) * ${a}`:"0"};\n\n      var acc : array<array<f32, ${x}>, ${b}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${b}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${x}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${w}\n    }\n  `}class ie{constructor(e,t,n=!1,r=!1,s=null,i=null,a=null,o=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0]};const u=n?e[1]:e[2];if(this.isVec4=(u%4==0&&!n||t[1]%4==0&&n)&&t[2]%4==0&&!r,this.isVectorA=1===t[1]&&!n,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{const e=R(t[1],u,t[2],n);this.workgroupSize=e.workgroupSize,this.elementsPerThread=e.elementsPerThread}this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);const l=null!=s,d=null!=a;l&&this.variableNames.push("bias"),d&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=o,this.transposeA=n,this.transposeB=r,this.addBias=l,this.activation=i,this.hasPreluActivationWeights=d,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(t[1],t[2],u),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${n}_${r}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(e,t,n){const r=this.workgroupSize[1]*this.elementsPerThread[1],s=this.workgroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=4*this.workgroupSize[0]:this.tileInner=s;return[e%r==0,t%s==0,n%this.tileInner==0]}getUserCode(){const e=`\n      ${Z(this.activation,this.hasPreluActivationWeights,this.isVec4)}\n      ${te(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}\n      ${this.isVec4?ne(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.isVectorA,!0):this.isVectorA?function(e,n=!1){t.util.assert(1===e[1]&&1===e[2],(()=>`A linear work group size is required. But got ${e}.`));const r=4*e[0];return`\n    var<workgroup> mm_Asub : array<vec4<f32>, ${e[0]}>;\n\n    ${g()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${r} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${r} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${(e=>e?"\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ":"\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  ")(n)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${r/4}; k++) {\n          let rowB = t * ${r} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `}(this.workgroupSize,this.transposeA):se(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}\n    `;return e}}class ae{constructor(e,t=!1,n=!1,r=null,s=null,i=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize);const a=null!=r,o=null!=i;a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.transposeA=t,this.transposeB=n,this.addBias=a,this.activation=s,this.hasPreluActivationWeights=o,this.shaderKey=`matMulReduce_${this.activation}_${t}_${n}`}getUserCode(){var e;return`\n      ${Z(this.activation,this.hasPreluActivationWeights)}\n      ${te(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${e=this.workgroupSize[0],`\n    var<workgroup> sumValues : array<f32, ${e}>;\n    ${g()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${e}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${e/2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `}\n    `}}class oe{constructor(e,t,n,r=!1,s=!1,i=null,a=null,o=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=n,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(n[2]/this.workgroupSize[0]),Math.ceil(n[1]/this.workgroupSize[1]),n[0]];const u=null!=i;u&&this.variableNames.push("bias");const l=null!=o;l&&this.variableNames.push("preluActivationWeights"),this.transposeA=r,this.transposeB=s,this.addBias=u,this.activation=a,this.hasPreluActivationWeights=l,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${r}_${s}`}getUserCode(){return`\n      ${Z(this.activation,this.hasPreluActivationWeights)}\n      ${te(this.addBias,this.activation,this.transposeA,this.transposeB)}\n      ${function(e){const t=e[1],n=e[0],r=t>n?t:n;return`\n  var<workgroup> mm_Asub : array<array<f32, ${r}>, ${t}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${n}>, ${r}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${g()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${r} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${r};\n    globalRowB = globalRowB + ${r};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${r};\n      globalRowB = globalRowB + ${r};\n\n      for (var k = 0; k < ${r}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `}(this.workgroupSize)}\n    `}}class ue{constructor(e,n,r=!1,s=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.isVec4=!1,this.splitedDimInner=128,t.util.assert(1===e[0],(()=>"MatMulSplitKProgram only supports batch = 1.")),this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0,3]},this.isVec4=(r&&this.outputShape[1]%4==0||!r&&n%4==0)&&this.outputShape[2]%4==0,this.elementsPerThread=[4,4,this.splitedDimInner],this.isVec4||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=$(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],n],this.workgroupSize,this.elementsPerThread),this.transposeA=r,this.transposeB=s,this.shaderKey=`matMulSplitK_${r}_${s}_${this.elementsPerThread}_${this.isVec4}`}getUserCode(){const e=this.isVec4?4:1;return`\n      ${ee(!1,this.transposeB,!1,!1,!1,e)}\n      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${Q(e)}) {\n        let col = colIn * ${e};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${e}; i = i + 1) {\n            ${c("&result[flatIndex + i]",""+(e>1?"value[i]":"value"),"float32")}\n          }\n        }\n      }\n      ${this.isVec4?ne(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):se(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}\n    `}}class le{constructor(e,t=null,n=null,r=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=null!=t,this.hasPreluActivationWeights=null!=r,this.activation=n,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${n}`}getUserCode(){return`\n    ${Z(this.activation,this.hasPreluActivationWeights)}\n    ${g("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${J(this.addBias,this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `}}class de{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`\n    ${g("index")} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `}}function he(e){const{backend:n,attrs:r}=e,{shape:s,value:i}=r;let{dtype:a}=r;if(a=a||t.util.inferDtype(i),"string"===a){const e=t.util.getArrayFromDType(a,t.util.sizeFromShape(s));return e.fill(i),n.makeTensorInfo(s,a,e)}{const e=new de(s),t=[{type:"float32",data:[i]}];return n.runWebGPUProgram(e,[],a,t)}}const ce={kernelName:t.Fill,backendName:"webgpu",kernelFunc:he};function pe(e){const{inputs:n,attrs:r}=e,{x:s}=n,{shape:i}=r,a=t.util.sizeFromShape(s.shape),o=t.util.inferFromImplicitShape(i,a),u=t.util.sizeFromShape(o);return t.util.assert(a===u,(()=>`The new shape (${o}) has ${u} elements and the old shape (${s.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`)),e.backend.incRef(s.dataId),{dataId:s.dataId,shape:o,dtype:s.dtype}}const fe={kernelName:t.Reshape,backendName:"webgpu",kernelFunc:pe};function me({a:e,b:n,transposeA:r,transposeB:s,backend:i,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:u=0,activation:l=null}){const d=e.shape.length,h=n.shape.length,c=r?e.shape[d-2]:e.shape[d-1],p=s?n.shape[h-1]:n.shape[h-2],f=r?e.shape[d-1]:e.shape[d-2],m=s?n.shape[h-2]:n.shape[h-1],g=e.shape.slice(0,-2),b=n.shape.slice(0,-2),x=t.util.sizeFromShape(g),w=t.util.sizeFromShape(b),y=t.broadcast_util.assertAndGetBroadcastShape(e.shape.slice(0,-2),n.shape.slice(0,-2)).concat([f,m]);t.util.assert(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${e.shape} and ${n.shape} and transposeA=${r} and transposeB=${s} must match.`));const k=r?[x,c,f]:[x,f,c],I=s?[w,m,p]:[w,p,m],S=pe({inputs:{x:e},backend:i,attrs:{shape:k}}),v=pe({inputs:{x:n},backend:i,attrs:{shape:I}}),C=[S,v],$=Math.max(x,w),R=[S,v],A=[{type:"int32",data:[f]},{type:"int32",data:[m]},{type:"int32",data:[c]}];let T,P;const N=[$,f,m];let z=t.env().get("WEBGPU_MATMUL_PROGRAM_TYPE");if(z<0){const e=t.env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),n=e>0?e:i.thresholdToIncreaseWorkgroups,r=$*Math.ceil(f/32)*Math.ceil(m/32);z=r<=n||f<=8&&r<=2*n?$*f*m<=128?E.MatMulReduceProgram:1===$&&p>=2e3?E.MatMulSplitKProgram:E.MatMulSmallOutputSizeProgram:E.MatMulPackedProgram}switch(z){case E.MatMulReduceProgram:T=new ae(N,r,s,a,l,o);break;case E.MatMulSplitKProgram:if(P=he({backend:i,attrs:{shape:N,value:0,dtype:e.dtype}}),T=new ue(N,p,r,s),a||l){P=i.runWebGPUProgram(T,R,e.dtype,A,P);const t=new le(P.shape,a,l,o);let n=null;const r=[P];a&&r.push(a),o&&r.push(o),"leakyrelu"===l&&(n=[{type:"float32",data:[u]}],t.uniforms+=" alpha : f32,");const s=i.runWebGPUProgram(t,r,P.dtype,n);C.push(P);const d=pe({inputs:{x:s},backend:i,attrs:{shape:y}});C.push(s);for(const e of C)i.disposeData(e.dataId);return d}break;case E.MatMulSmallOutputSizeProgram:T=new oe(k,I,N,r,s,a,l,o);break;case E.MatMulPackedProgram:const t=i.adapterInfo.isIntel();T=new ie(k,N,r,s,a,l,o,t);break;default:throw new Error(`Unsupported MatMulProgramType ${z}.`)}a&&R.push(a),o&&R.push(o),"leakyrelu"===l&&(A.push({type:"float32",data:[u]}),T.uniforms+=" alpha : f32,"),P=i.runWebGPUProgram(T,R,e.dtype,A,P);const _=pe({inputs:{x:P},backend:i,attrs:{shape:y}});C.push(P);for(const e of C)i.disposeData(e.dataId);return _}const ge={kernelName:t._FusedMatMul,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:i,bias:a,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:d,leakyreluAlpha:h}=r;return me({a:s,b:i,transposeA:u,transposeB:l,backend:n,bias:a,preluActivationWeights:o,leakyreluAlpha:h,activation:d})}};class be{constructor(e,n,r){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=t.backend_util.assertAndGetBroadcastShape(n,r),this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${e}`,this.op=e}getUserCode(){return`\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${K(this.op,!1)}\n      }\n\n      ${g("index")} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `}}class xe{constructor(e,n,r){this.size=!0,this.variableNames=["A","B"],this.outputShape=t.backend_util.assertAndGetBroadcastShape(n,r),this.dispatchLayout=P(this.outputShape),this.op=e,this.useSharedMemoryWithA=n.length<=1&&r.length>1&&n[0]<128,this.useSharedMemoryWithB=r.length<=1&&n.length>1&&r[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB?(this.isVec4=!1,this.lastDimensionSize=this.useSharedMemoryWithB?r[0]:n[0],this.shaderKey=`binary_${this.type}_${e}_${this.lastDimensionSize}_${this.useSharedMemoryWithB}`,this.type="shared",this.workgroupSize=[256,1,1],this.workPerThread=1):(t.util.arraysEqual(n,r)&&t.util.sizeFromShape(n)%4==0?(this.isVec4=!0,this.type="vec4",this.workPerThread=4):(this.isVec4=!1,this.type="plain",this.workPerThread=1),this.shaderKey=`binary_${this.type}_${e}`,this.workgroupSize=[128,1,1]),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1])}getUserCode(){let e;const t=this.isVec4?"vec4<f32>":"f32",n=`\n    fn binaryOperation(a : ${t}, b : ${t}) -> ${t} {\n      let isNaN = false;\n      {\n        ${K(this.op,this.isVec4)}\n      }\n    };\n    `;if("shared"===this.type){const t=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",r=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);\n          let b = sharedBuf[${t}];`:`let a = sharedBuf[${t}];\n          let b = getBByOutputIndex(index);`;e=`\n        ${n}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${g("index")} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${r}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `}else e=`\n       ${n}\n       ${g("index")} {\n         if (index < uniforms.size) {\n           let a = getAByOutputIndex(index);\n           let b = getBByOutputIndex(index);\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;return e}}function we(e){const{inputs:t}=e,{x:n}=t;return e.backend.incRef(n.dataId),{dataId:n.dataId,shape:n.shape,dtype:n.dtype}}const ye={kernelName:t.Identity,backendName:"webgpu",kernelFunc:we};function ke(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,i=n.makeTensorInfo(r.shape,"complex64"),a=n.tensorMap.get(i.dataId),o=we({inputs:{x:r},backend:n}),u=we({inputs:{x:s},backend:n});return a.complexTensorInfos={real:o,imag:u},i}const Ie={kernelName:t.Complex,backendName:"webgpu",kernelFunc:ke};class Se{constructor(e,t,n=""){this.variableNames=["A"],this.size=!0;this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=t,""!==n&&(this.uniforms=n),this.shaderKey=`unary_${t}`}getUserCode(){return`\n      fn unaryOperation(a : f32) -> f32 {\n        ${Y(this.op,!1)}\n      }\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `}}function ve({opType:e,cpuKernelImpl:t,dtype:n}){return({inputs:r,backend:s})=>{const{x:i}=r,a=s,o=n||i.dtype;if(a.shouldExecuteOnCPU([i])&&null!=t){const e=a.tensorMap.get(i.dataId),n=t(e.values,o);return a.makeTensorInfo(i.shape,o,n)}const u=new Se(i.shape,e);return a.runWebGPUProgram(u,[i],o)}}function Ce({opType:e,cpuKernelImpl:n,supportsComplex:r=!1,dtype:s}){return({inputs:i,backend:a})=>{const{a:o,b:u}=i,l=a;if(r&&"complex64"===o.dtype){const n=l.tensorMap.get(o.dataId),r=l.tensorMap.get(u.dataId);let s,i;if(e!==L.MUL)[s,i]=[[n.complexTensorInfos.real,r.complexTensorInfos.real],[n.complexTensorInfos.imag,r.complexTensorInfos.imag]].map((n=>{const[r,s]=n,i={dataId:r.dataId,dtype:r.dtype,shape:o.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},d=new xe(e,o.shape,u.shape);return l.runWebGPUProgram(d,[i,a],t.upcastType(r.dtype,s.dtype))}));else{const e=new be(L.COMPLEX_MULTIPLY_REAL,o.shape,u.shape),t=new be(L.COMPLEX_MULTIPLY_IMAG,o.shape,u.shape),a=[{dataId:n.complexTensorInfos.real.dataId,dtype:n.complexTensorInfos.real.dtype,shape:o.shape},{dataId:n.complexTensorInfos.imag.dataId,dtype:n.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u.shape},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u.shape}];s=l.runWebGPUProgram(e,a,"float32"),i=l.runWebGPUProgram(t,a,"float32")}const a=ke({inputs:{real:s,imag:i},backend:l});return l.disposeData(s.dataId),l.disposeData(i.dataId),a}const d=s||t.upcastType(o.dtype,u.dtype);if(("string"===o.dtype||"string"===u.dtype||l.shouldExecuteOnCPU([o,u]))&&null!=n){const e=l.tensorMap.get(o.dataId).values,r=l.tensorMap.get(u.dataId).values,s="string"===o.dtype?t.backend_util.fromUint8ToStringArray(e):e,i="string"===o.dtype?t.backend_util.fromUint8ToStringArray(r):r,[a,h]=n(o.shape,u.shape,s,i,d);return l.makeTensorInfo(h,d,a)}const h=new xe(e,o.shape,u.shape);return l.runWebGPUProgram(h,[o,u],d)}}function $e(e){return(n,r,s,i,a)=>{const o=t.backend_util.assertAndGetBroadcastShape(n,r),u=o.length,l=t.util.computeStrides(o),d=t.util.sizeFromShape(o),h=t.util.getTypedArrayFromDType(a,d),c=n.length,p=r.length,f=t.util.computeStrides(n),m=t.util.computeStrides(r),g=t.backend_util.getBroadcastDims(n,o),b=t.backend_util.getBroadcastDims(r,o);if(g.length+b.length===0)for(let t=0;t<h.length;++t)h[t]=e(s[t%s.length],i[t%i.length]);else for(let n=0;n<h.length;++n){const r=t.util.indexToLoc(n,u,l),a=r.slice(-c);g.forEach((e=>a[e]=0));const o=t.util.locToIndex(a,c,f),d=r.slice(-p);b.forEach((e=>d[e]=0));const x=t.util.locToIndex(d,p,m);h[n]=e(s[o],i[x])}return[h,o]}}const Re=$e(((e,t)=>e+t));function Ae(e){return(n,r,s)=>{const i=t.util.getTypedArrayFromDType(r,n.length);for(let t=0;t<n.length;++t)i[t]=e(n[t],s);return i}}const Te=Ae((e=>Math.ceil(e)));const Pe=$e(((e,t)=>e===t?1:0)),Ne=Ae((e=>Math.exp(e))),ze=Ae((e=>Math.expm1(e))),_e=Ae((e=>Math.floor(e)));const Ee=$e(((e,t)=>e>t?1:0)),Fe=$e(((e,t)=>e>=t?1:0)),Be=$e(((e,t)=>e<t?1:0)),Oe=$e(((e,t)=>e<=t?1:0));const Le=Ae((e=>Math.log(e)));const De=$e(((e,t)=>Math.max(e,t))),Ue=$e(((e,t)=>Math.min(e,t))),We=$e(((e,t)=>e*t));const Me=$e(((e,t)=>e!==t?1:0));function Ve(e,t,n,r){const s=[];let i=0;const a=t.length-1+n.length,o=new Array(a).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],s=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>s)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)o[e].push(t*n)}for(let r=0;r<e.length;++r){let a=e[r],u=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],s=e+t.length-1;if(s>=0){const e=o[s],t=e[e.length-1]-r[a];for(let e=a;e<u;++e)o[s].push(r[e+1]+t)}a=r[a],u=r[u]}u!==a&&(s.push([a,u]),i+=u-a)}return{outSplits:o,valueSlices:s,numValues:i}}function Ge(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function He(e,n,r,s,i){const a=n.slice();a[0]=i;const o=t.util.getArrayFromDType(r,t.util.sizeFromShape(a)),u=e.length;return function(e,t,n,r,s,i){const a=Ge(t,2)[1],o=Ge(i,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)s[u*o+t]=e[n*a+t];++u}}(e,n,s,0===u?0:u/n[0],o,a),[o,a]}const Ke=2147483647;var Xe=t.backend_util.RowPartitionType;class qe{constructor(e,n,r,s,i,a,o,u,l,d){this.shape=e,this.shapeShape=n,this.values=r,this.valuesShape=s,this.valuesDType=i,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=u,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=t.backend_util.getRowPartitionTypesHelper(d),this.raggedRank=t.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Xe.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Xe.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Xe.VALUE_ROWIDS:return qe.getMaxWidthValueRowID(t);case Xe.ROW_SPLITS:return qe.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Xe[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],s=0;for(let i=1;i<t;++i){const t=e[i];t!==r&&(r=t,s=Math.max(i-n,s),n=i)}return Math.max(t-n,s)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Ye(e,n)}calculateOutputSize(e){const n=this.valuesShape,r=this.defaultValueShape;t.backend_util.validateDefaultValueShape(r,n);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=t.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,s,n);i[0]<0&&(i[0]=e);for(let e=1;e<=this.raggedRank;++e)i[e]<0&&(i[e]=this.getMaxWidth(e));return i}calculateFirstParentOutputIndex(e,n,r){const s=Math.min(e,r),i=[];let a=0;for(let e=0;e<s;++e,a+=n)i.push(a);for(let t=s;t<e;++t)i.push(-1);return t.util.assert(i.length===e,(()=>"Final length of result must be equal to firstDimension.")),i}calculateOutputIndexRowSplit(e,t,n,r){const s=e.length,i=[];for(let a=0;a<s-1;++a){const s=e[a+1]-e[a];let o=Math.min(r,s),u=t[a];-1===u&&(o=0);for(let e=0;e<o;++e)i.push(u),u+=n;for(let e=0;e<s-o;++e)i.push(-1)}if(s>0&&i.length!==e[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(e,t,n,r){const s=e.length,i=[];if(0===s)return[];let a=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let u=t[o];i.push(u);for(let l=1;l<s;++l){const s=e[l];if(s===o)u>=0&&(++a,a<r?u+=n:u=-1);else{if(a=0,o=s,s>=t.length)throw new Error(`Got nextValueRowId=${s} which is not less than ${t.length}`);u=t[s]}i.push(u)}if(i.length!==e.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(e,t,n,r){const s=this.getRowPartitionTensor(e),i=this.getRowPartitionTypeByDimension(e);switch(i){case Xe.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,t,n,r);case Xe.ROW_SPLITS:if(s.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(s,t,n,r);default:throw new Error(`Unsupported partition type: ${Xe[i]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Xe.FIRST_DIM_SIZE:return e[0];case Xe.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Xe.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Xe[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),n=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let e=r.length-2;e>=0;--e)r[e]=r[e+1]*n[e+1];const s=Ye(n,!1),i=t.util.getArrayFromDType(this.valuesDType,t.util.sizeFromShape(s));if(r[0]*n[0]>0){let t=this.calculateFirstParentOutputIndex(e,r[0],n[0]);for(let e=1;e<=this.raggedRank;++e){t=this.calculateOutputIndex(e-1,t,r[e],n[e])}this.setOutput(this.raggedRank,t,i,s)}return[s,i]}setOutput(e,n,r,s){if(0===r.length)return;const i=this.values,a=r;let o=s.slice();o=o.slice(e+1);const u=t.util.sizeFromShape(o),l=n.length;let d=this.defaultValue;if(d.length!==u&&1!==d.length){const e=this.defaultValueShape;t.tidy((()=>{const n=t.reshape(d,e),r=t.broadcastTo(n,o);d=r.dataSync()}))}let h=0,c=0,p=0;for(let e=0;e<=l;++e){let t=e<l?n[e]:-1;if(t!==p){if(c<p){const e=i.subarray(h*u);je(a.subarray(c*u),e,(p-c)*u)}if(e>=l){const e=r.length;t=Math.floor(e/u)}if(t>p)if(1===this.defaultValue.length)a.subarray(p*u,t*u).fill(this.defaultValue[0]),p=t;else for(;t>p;){je(a.slice(p*u),d,u),++p}t<0?(h=e+1,c=p):(h=e,c=p,p=c+1)}else++p}}}function je(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function Ye(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}const Qe=Ae((e=>1/Math.sqrt(e)));const Ze=Ae((e=>1/(1+Math.exp(-e))));const Je=Ae((e=>Math.sqrt(e))),et=$e(((e,t)=>{const n=e-t;return n*n}));class tt{constructor(e,n,r,s,i,a){this.separator=t.util.encodeString(e),this.nGramWidths=n,this.leftPad=t.util.encodeString(r),this.rightPad=t.util.encodeString(s),this.padWidth=i,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,i){for(let a=0;a<s;++a){const o=this.getPadWidth(i),u=Math.max(0,o-a),l=Math.max(0,o-(s-(a+1))),d=i-(u+l),h=t+(u>0?0:a-o);let c=0;c+=u*this.leftPad.length;for(let t=0;t<d;++t)c+=e[h+t].length;c+=l*this.rightPad.length;c+=(u+l+d-1)*this.separator.length,n[r+a]=new Uint8Array(c);const p=n[r+a];let f=0;const m=e=>e.forEach((e=>p[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<d-1;++t)m(e[h+t]),m(this.separator);if(d>0){m(e[h+d-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,n){const r=e.length,s=n.length;if(s>0){let e=n[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let t=1;t<s;++t){let s=n[t]>=e;if(s=s&&n[t]<=r,!s)throw new Error(`Invalid split value ${n[t]}, must be in [${e}, ${r}]`);e=n[t]}if(e!==r)throw new Error(`Last split value must be data size. Expected ${r}, got ${e}`)}const i=s-1,a=t.util.getArrayFromDType("int32",s);if(0===r||0===s){const e=new Array(r);for(let e=0;e<=i;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=i;++e){const t=n[e]-n[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(t,e)})),this.preserveShort&&t>0&&0===r&&(r=1),a[e]=a[e-1]+r}const o=new Array(a[i]);for(let t=0;t<i;++t){const r=n[t];let s=a[t];if(this.nGramWidths.forEach((i=>{const a=n[t+1]-n[t],u=this.getNumNGrams(a,i);this.createNGrams(e,r,o,s,u,i),s+=u})),this.preserveShort&&s===a[t]){const i=n[t+1]-n[t];if(0===i)continue;const a=i+2*this.padWidth,u=1;this.createNGrams(e,r,o,s,u,a)}}return[o,a]}}function nt(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const s=t[0];let i=e.indexOf(s);for(;-1!==i;){const t=e.subarray(0,i);n&&0===t.length||r.push(t),i=(e=e.subarray(i+1)).indexOf(s)}return void(n&&0===e.length||r.push(e))}let s=0;for(let i=0;i<e.length+1;i++)if(i===e.length||-1!==t.indexOf(e[i])){const t=e.subarray(s,i);n&&0===t.length||r.push(t),s=i+1}}const rt=$e(((e,t)=>e-t));const st=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function it(e,n,r=0,s=e.length-1){for(;s>r;){if(s-r>600){const t=s-r+1,i=n-r+1,a=Math.log(t),o=.5*Math.exp(2*a/3),u=.5*Math.sqrt(a*o*(t-o)/t)*Math.sign(i-t/2);it(e,n,Math.max(r,Math.floor(n-i*o/t+u)),Math.min(s,Math.floor(n+(t-i)*o/t+u)))}const i=e[n];let a=r,o=s;for(t.util.swap(e,r,n),st(e[s],i)>0&&t.util.swap(e,r,s);a<o;){for(t.util.swap(e,a,o),a++,o--;st(e[a],i)<0;)a+=1;for(;st(e[o],i)>0;)o-=1}0===st(e[r],i)?t.util.swap(e,r,o):(o+=1,t.util.swap(e,o,s)),o<=n&&(r=o+1),n<=o&&(s=o-1)}}var at={__proto__:null,simpleAbsImpl:function(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t},addImpl:Re,bincountImpl:function(e,n,r,s,i){const a=t.util.sizeFromShape(s),o=t.util.makeZerosTypedArray(i,r);for(let t=0;t<e.length;t++){const r=e[t];if(r<0)throw new Error("Input x must be non-negative!");r>=i||(o[r]+=a>0?n[t]:1)}return o},bincountReduceImpl:function(e,n,r,s=!1){const i=e.shape[0],a=e.shape[1],o=t.buffer([i,r],n.dtype);for(let t=0;t<i;t++)for(let i=0;i<a;i++){const a=e.get(t,i);if(a<0)throw new Error("Input x must be non-negative!");a>=r||(s?o.set(1,t,a):n.size>0?o.set(o.get(t,a)+n.get(t,i),t,a):o.set(o.get(t,a)+1,t,a))}return o},castImpl:function(e,n,r,s){if("int32"===s){return[n,"int32",Int32Array.from(e)]}if("bool"===s){const s=t.util.toTypedArray([0],r),[i,a]=$e(((e,t)=>e!==t?1:0))(n,[],e,s,"bool");return[a,"bool",i]}throw new Error(`Error in Cast: failed to cast ${r} to ${s}`)},ceilImpl:Te,concatImpl:function(e,n,r,s){const i=t.util.getArrayFromDType(r,t.util.sizeFromShape(n));if(s&&"string"!==r){let n=0;e.forEach((e=>{const r=t.util.sizeFromShape(e.shape);i.set(e.vals,n),n+=r}))}else{let s=0;e.forEach((e=>{const a="string"===r?t.backend_util.fromUint8ToStringArray(e.vals):e.vals;let o=0;for(let t=0;t<e.shape[0];++t){const r=t*n[1]+s;for(let t=0;t<e.shape[1];++t)i[r+t]=a[o++]}s+=e.shape[1]}))}return i},equalImpl:Pe,expImpl:Ne,expm1Impl:ze,floorImpl:_e,gatherNdImpl:function(e,n,r,s,i,a,o,u,l){const d=t.buffer([s,a],r);for(let t=0;t<s;t++){const r=[];let s=0;for(let n=0;n<i;n++){const a=e[t*i+n];s+=a*o[n],r.push(a)}if(s<0||s>=l/a)throw new Error(`Invalid indices: ${r} does not index into ${u}`);for(let e=0;e<a;e++)d.values[t*a+e]=n.get(...n.indexToLoc(s*a+e))}return d},gatherV2Impl:function(e,n,r){const s=t.buffer(r,e.dtype);for(let t=0;t<s.size;++t){const r=s.indexToLoc(t).slice(),i=r[0],a=r[2],o=n.locToIndex([i,a]);r[2]=n.values[o];const u=e.locToIndex(r);0<=u&&u<e.values.length&&(s.values[t]=e.values[u])}return s},greaterImpl:Ee,greaterEqualImpl:Fe,lessImpl:Be,lessEqualImpl:Oe,linSpaceImpl:function(e,n,r){const s=(n-e)/(r-1),i=t.util.makeZerosTypedArray(r,"float32");i[0]=e;for(let e=1;e<i.length;e++)i[e]=i[e-1]+s;return i},logImpl:Le,maxImpl:function(e,n,r,s){const i=t.util.getTypedArrayFromDType(s,t.util.sizeFromShape(r));for(let t=0;t<i.length;++t){const r=t*n;let s=e[r];for(let t=0;t<n;++t){const n=e[r+t];(Number.isNaN(n)||n>s)&&(s=n)}i[t]=s}return i},maximumImpl:De,minimumImpl:Ue,multiplyImpl:We,negImpl:function(e,n,r){const s=t.util.createScalarValue(-1,r);return We([],n,s,e,r)},notEqualImpl:Me,prodImpl:function(e,n,r,s){const[i,a]=t.backend_util.computeOutAndReduceShapes(e,s),o=t.upcastType(n,"int32"),u=t.util.makeZerosTypedArray(t.util.sizeFromShape(i),o),l=t.util.sizeFromShape(a);for(let e=0;e<u.length;++e){const t=e*l;let n=1;for(let e=0;e<l;++e)n*=r[t+e];u[e]=n}return{outVals:u,outShape:i,outDtype:o}},raggedGatherImpl:function(e,n,r,s,i,a,o,u){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===n[0].length)throw new Error("Split tensors must not be scalars");if(function(e,n,r){e.forEach(((e,s)=>{if(e<0||e>=r){const i=t.util.indexToLoc(s,n.length,t.util.computeStrides(n)).join(",");throw new Error(`indices[${i}] = ${e} is not in [0, ${r})`)}}))}(a,o,n[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:d,valueSlices:h,numValues:c}=Ve(a,o,e,l),p=function(e){const n=[];for(let r=0;r<e.length;++r){const s=e[r].length,i=t.util.getArrayFromDType("int32",s);n.push(i),e[r].forEach(((e,t)=>i[t]=e))}return n}(d),f=He(r,s,i,h,c);return[p,f[0],f[1]]},raggedRangeImpl:function(e,n,r,s,i,a,o){if(n.length>1)throw new Error("starts must be a scalar or vector");if(i.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const u=0===n.length,l=0===i.length,d=0===o.length,h=[];u||h.push(n[0]),l||h.push(i[0]),d||h.push(o[0]);for(let e=1;e<h.length;++e)if(h[e]!==h[e-1])throw new Error("starts, limits, and deltas must have the same shape");const c=0===h.length?1:h[0],p=t.util.getArrayFromDType("int32",c+1);p[0]=0;for(let t=0;t<c;++t){const n=u?e[0]:e[t],r=l?s[0]:s[t],i=d?a[0]:a[t];if(0===i)throw new Error("Requires delta != 0");let o;if(i>0&&r<n||i<0&&r>n)o=0;else if(o=Math.ceil(Math.abs((r-n)/i)),o>Ke)throw new Error("Requires ((limit - start) / delta) <= 2147483647");p[t+1]=p[t]+o}const f=p[c],m=t.util.getArrayFromDType(r,f);let g=0;for(let t=0;t<c;++t){const n=p[t+1]-p[t];let r=u?e[0]:e[t];const s=d?a[0]:a[t];for(let e=0;e<n;++e)m[g++]=r,r+=s}return[p,m]},raggedTensorToTensorImpl:function(e,t,n,r,s,i,a,o,u,l){return new qe(e,t,n,r,s,i,a,o,u,l).compute()},rangeImpl:function(e,n,r,s){if(e===n||e<n&&r<0||n<e&&r>1)return t.util.makeZerosTypedArray(0,s);const i=Math.abs(Math.ceil((n-e)/r)),a=t.util.makeZerosTypedArray(i,s);n<e&&1===r&&(r=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+r;return a},rsqrtImpl:Qe,scatterImpl:function(e,n,r,s,i,a,o,u,l,d){const h=[s/i,i],c=e.values,p=n.values;if(0===s)return t.buffer(r,n.dtype);const f=t.buffer(h,n.dtype);"string"==typeof l||"number"==typeof l?f.values.fill(l):"boolean"==typeof l&&f.values.fill(+l);for(let e=0;e<a;e++){const t=[];let a=0;for(let n=0;n<o;n++){const r=c[e*o+n];t.push(r),a+=r*u[n]}if(a<0||a>=s/i)throw new Error(`Invalid indices: ${t} does not index into ${r}`);for(let t=0;t<i;t++)d?f.values[a*i+t]+=p[e*i+t]:f.values[a*i+t]=0===n.rank?p[0]:p[e*i+t]}return f},sigmoidImpl:Ze,sliceImpl:function(e,n,r,s,i){const a=t.slice_util.isSliceContinous(s,n,r),o=t.util.sizeFromShape(r),u=t.util.computeStrides(s);if(a){const r=t.slice_util.computeFlatOffset(n,u);return"string"===i?e.slice(r,r+o):e.subarray(r,r+o)}const l="string"===i?t.backend_util.fromUint8ToStringArray(e):e,d=t.buffer(s,i,l),h=t.buffer(r,i);for(let e=0;e<h.size;++e){const t=h.indexToLoc(e),r=t.map(((e,t)=>e+n[t]));h.set(d.get(...r),...t)}return"string"===i?t.backend_util.fromStringArrayToUint8(h.values):h.values},sparseFillEmptyRowsImpl:function(e,n,r,s,i,a,o){const u=n[0],l=a[0],d=new Array(l),h=new Array(u),c=n[1];if(0===l){if(0!==u)throw new Error(t.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[t.util.getArrayFromDType(r,0),[0,c],t.util.getArrayFromDType(i,0),d,h]}let p=!0,f=0;const m=new Array(l).fill(0);for(let n=0;n<u;++n){const r=e[n*c];if(r<0)throw new Error(t.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(n,r));if(r>=l)throw new Error(t.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(n,r,l));++m[r],p=p&&r>=f,f=r}let g=!0;for(let e=0;e<l;++e){const t=0===m[e];d[e]=t,g=g&&!t,m[e]=Math.max(m[e],1),e>0&&(m[e]+=m[e-1])}if(g&&p){const t=e,n=s;for(let e=0;e<u;++e)h[e]=e;return[t,[u,c],n,d,h]}{const n=m[l-1],a=t.util.getArrayFromDType(r,n*c),p=t.util.getArrayFromDType(i,n),f=new Array(l).fill(0);for(let t=0;t<u;++t){const n=e[t*c],r=f[n],i=(0===n?0:m[n-1])+r;f[n]++;for(let n=0;n<c;++n)a[i*c+n]=e[t*c+n];p[i]=s[t],h[t]=i}for(let e=0;e<l;++e){if(0===f[e]){const t=0===e?0:m[e-1];a[t*c+0]=e;for(let e=1;e<c;++e)a[t*c+e]=0;p[t]=o}}return[a,[n,c],p,d,h]}},sparseReshapeImpl:function(e,n,r,s,i){const a=t.util.sizeFromShape(s),o=n[0],u=i.length,l=[];let d=1,h=-1;for(let e=0;e<u;++e){const n=i[e];if(-1===n){if(-1!==h)throw new Error(t.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(h,e));h=e,l.push(1)}else{if(n<0)throw new Error(t.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,n));d*=n,l.push(n)}}if(-1!==h){if(d<=0)throw new Error(t.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/d);if(d*e!==a)throw new Error(t.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(s,l));l[h]=e}if(t.util.sizeFromShape(l)!==a)throw new Error(t.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(s,l));const c=s.length,p=[];if(c>0){p[c-1]=1;for(let e=c-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const f=[];if(u>0){f[u-1]=1;for(let e=u-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}const m=t.util.getArrayFromDType(r,o*u);for(let t=0;t<o;++t){let n=0;for(let r=0;r<c;++r)n+=e[t*c+r]*p[r];for(let e=0;e<u;++e)m[t*u+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[o,u],l]},sparseSegmentReductionImpl:function(e,n,r,s,i,a=!1,o=0){const u=s.length,l=[n[0],e.length/n[0]],d=l[1],h=u>0?i[u-1]+1:0;if(h<0)throw new Error(t.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const c=n.slice();c[0]=h;const p=c.reduce(((e,t)=>e*t),1),f=t.util.getArrayFromDType(r,p);if(0===u)return h>0&&f.fill(o),[f,c];if(h<=0)throw new Error(t.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=0,g=1,b=0,x=i[m];for(;;){let n=0;if(g<u){if(n=i[g],x===n){++g;continue}if(x>=n)throw new Error(t.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(x<0||x>=h)throw new Error(t.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(x,h));x>b&&f.fill(o,b*d,x*d);for(let n=m;n<g;++n){const r=s[n];if(r<0||r>=l[0])throw new Error(t.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,s[n],l[0]));for(let t=0;t<d;t++)f[x*d+t]+=e[r*d+t]}if(a)for(let e=0;e<d;e++)f[x*d+e]/=g-m;if(m=g,++g,b=x+1,x=n,g>u)break}return b<h&&f.fill(o,b*d,h*d),[f,c]},sqrtImpl:Je,squaredDifferenceImpl:et,stridedSliceImpl:function(e,n,r,s){const i=t.buffer(e,n.dtype);for(let e=0;e<i.size;e++){const t=i.indexToLoc(e),a=new Array(t.length);for(let e=0;e<a.length;e++)a[e]=t[e]*r[e]+s[e];i.set(n.get(...a),...t)}return i},stringNGramsImpl:function(e,t,n,r,s,i,a,o){return new tt(n,r,s,i,a,o).compute(e,t)},stringSplitImpl:function(e,n,r){const s=e.length,i=[];let a=0,o=0;const u=new Array(s);for(let t=0;t<s;++t){const s=i.length;nt(e[t],n,r,i);const l=i.length-s;u[t]=l,a+=l,o=Math.max(o,l)}const l=t.util.getArrayFromDType("int32",2*a),d=new Array(a),h=[s,o];let c=0;for(let e=0;e<s;++e)for(let t=0;t<u[e];++t)l[2*c]=e,l[2*c+1]=t,d[c]=i[c],++c;return[l,d,h]},stringToHashBucketFastImpl:function(e,n){const r=t.util.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)r[s]=t.util.fingerPrint64(e[s]).modulo(n).getLowBitsUnsigned();return r},subImpl:rt,tileImpl:function(e,n){const r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=e.shape[t]*n[t];const s=t.buffer(r,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const i=e.locToIndex(r);s.values[t]=e.values[i]}return s},topKImpl:function(e,n,r,s,i){const a=n[n.length-1],[o,u]=[e.length/a,a],l=t.util.getTypedArrayFromDType(r,o*s),d=t.util.getTypedArrayFromDType("int32",o*s);for(let t=0;t<o;t++){const n=t*u,r=e.subarray(n,n+u);let a=new Array(r.length);r.forEach(((e,t)=>a[t]={value:e,index:t})),s<a.length&&(it(a,s),a=a.slice(0,s)),i&&a.sort(st);const o=t*s,h=l.subarray(o,o+s),c=d.subarray(o,o+s);for(let e=0;e<s;e++)h[e]=a[e].value,c[e]=a[e].index}const h=n.slice();return h[h.length-1]=s,[t.buffer(h,r,l),t.buffer(h,"int32",d)]},transposeImpl:function(e,n,r,s,i){const a=n.length,o=t.util.sizeFromShape(n),u=t.util.computeStrides(n),l=t.util.computeStrides(i),d=t.util.getTypedArrayFromDType(r,t.util.sizeFromShape(i));for(let n=0;n<o;++n){const r=t.util.indexToLoc(n,a,u),i=new Array(r.length);for(let e=0;e<i.length;e++)i[e]=r[s[e]];d[t.util.locToIndex(i,a,l)]=e[n]}return d},uniqueImpl:function(e,n,r,s){const i=t.util.parseAxisParam(n,r)[0],a=[1,r[0],1];for(let e=0;e<i;e++)a[0]*=r[e];a[1]=r[i];for(let e=i+1;e<r.length;e++)a[2]*=r[e];const o={},u=new Int32Array(r[i]),l=new t.TensorBuffer(a,s,e),d=[],h=1===a[0]&&1===a[2];for(let t=0;t<r[i];t++){let n;if(h)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==o[n])u[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,u[t]=e,d.push(t)}}const c=a.slice();c[1]=Object.keys(o).length;const p=new t.TensorBuffer(c,s);d.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)p.set(l.get(n,e,r),n,t,r)}));const f=r.slice();return f[i]=c[1],{outputValues:p.values,outputShape:f,indices:u}}};const{addImpl:ot,castImpl:ut,ceilImpl:lt,concatImpl:dt,equalImpl:ht,expImpl:ct,expm1Impl:pt,floorImpl:ft,gatherNdImpl:mt,gatherV2Impl:gt,greaterEqualImpl:bt,greaterImpl:xt,lessEqualImpl:wt,lessImpl:yt,logImpl:kt,maxImpl:It,maximumImpl:St,minimumImpl:vt,multiplyImpl:Ct,negImpl:$t,notEqualImpl:Rt,prodImpl:At,rangeImpl:Tt,rsqrtImpl:Pt,scatterImpl:Nt,simpleAbsImpl:zt,sliceImpl:_t,stridedSliceImpl:Et,stringNGramsImpl:Ft,subImpl:Bt,tileImpl:Ot,topKImpl:Lt,transposeImpl:Dt,uniqueImpl:Ut}=at,Wt=ve({opType:X.ABS,cpuKernelImpl:zt}),Mt={kernelName:t.Abs,backendName:"webgpu",kernelFunc:Wt},Vt=ve({opType:X.ACOS}),Gt={kernelName:t.Acos,backendName:"webgpu",kernelFunc:Vt},Ht=ve({opType:X.ACOSH}),Kt={kernelName:t.Acosh,backendName:"webgpu",kernelFunc:Ht},Xt=Ce({opType:L.ADD,cpuKernelImpl:ot,supportsComplex:!0}),qt={kernelName:t.Add,backendName:"webgpu",kernelFunc:Xt};class jt{constructor(e){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e[0],this.variableNames=e.map(((e,t)=>`T${t}`)),this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){const e=[];this.variableNames.forEach((t=>{e.push(`let v${t} = get${t}ByOutputCoords(coords);`)}));const t=this.variableNames.map((e=>`v${e}`)).join(" + ");return`\n      ${g("index")} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${e.join("\n        ")}\n            setOutputAtIndex(flatIndex, ${t});\n          }\n        }\n      }\n    `}}const Yt={kernelName:t.AddN,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r}=e,s=n;if(1===s.length)return we({inputs:{x:s[0]},backend:r});const i=s.map((e=>e.dtype)).reduce(((e,n)=>t.upcastType(e,n))),a=s.map((e=>e.shape)),o=new jt(a);return r.runWebGPUProgram(o,s,i)}};class Qt{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[16,16,1];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.dispatchLayout={x:[0],y:[1]},this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){t.util.assert(this.workgroupSize[0]===this.workgroupSize[1],(()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`));const e=this.workgroupSize[0];return`\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;\n      ${g()} {\n        var x = i32(workgroupId.x) * ${e} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${e} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${e} + i32(localId.x);\n        y = i32(workgroupId.x) * ${e} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `}}class Zt{constructor(e,t){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=t,this.shaderKey=`transpose_${t}`}getUserCode(){const e=f(this.outputShape.length),t=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=new Array(t);for(let t=0;t<e.length;t++)n[e[t]]=`resRC.${m(t)}`;return n.join()}(this.newDim);return`\n      ${g("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let resRC = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(\n              ${e}(${t}), uniforms.aShape)]);\n          }\n        }\n      }\n    `}}function Jt(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{perm:a}=s,o=r,u=i.shape.length,l=new Array(u);for(let e=0;e<l.length;e++)l[e]=i.shape[a[e]];if(r.shouldExecuteOnCPU([i])){const e=o.tensorMap.get(i.dataId).values,t=Dt(e,i.shape,i.dtype,a,l);return r.makeTensorInfo(l,i.dtype,t)}if(2===i.shape.length&&t.util.arraysEqual(a,[1,0])){const e=new Qt(i.shape,a);return o.runWebGPUProgram(e,[i],i.dtype)}const d=new Zt(i.shape,a);return o.runWebGPUProgram(d,[i],i.dtype)}const en={kernelName:t.Transpose,backendName:"webgpu",kernelFunc:Jt};class tn{constructor(e,n){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[e.batchSize,e.inSize];const[r]=t.backend_util.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=0===r.length?[1]:r,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=n,this.shaderKey=`reduce_${n}`}getUserCode(){let e="",t="0.0";const n=this.workgroupSize[0];"min"===this.reduceType||"max"===this.reduceType?(e=`\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${"min"===this.reduceType?"<":">"} bestValue)\n           {  bestValue = candidate; }`,t="f32(x[offset])"):"sum"===this.reduceType||"mean"===this.reduceType?e=" bestValue = bestValue + candidate; ":"prod"===this.reduceType?(e=" bestValue = bestValue * candidate; ",t="1.0"):"all"===this.reduceType?(e=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",t="1.0"):"any"===this.reduceType&&(e=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",t="0.0");const r="mean"===this.reduceType?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ${`\n         var<workgroup> xBestValues : array<f32, ${n}>;\n       `}\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${1===this.outputShape.length?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;\n          return offset;\n       }\n       ${g("index")} {\n         let outputIndex = index / ${n};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${t};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${n}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${n}) {\n           let candidate = f32(x[offset + k]);\n           ${e}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${n}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${e}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${r}\n        }\n       }\n     `}}function nn(e,n,r,s,i){const a=e.shape.length,o=[],u=t.util.parseAxisParam(n,e.shape);let l=u;const d=t.backend_util.getAxesPermutation(l,a);let h=e;null!=d&&(h=Jt({inputs:{x:e},attrs:{perm:d},backend:i}),l=t.backend_util.getInnerMostAxes(l.length,a),o.push(h)),t.backend_util.assertAxesAreInnerMostDims(s,l,a);const[c,p]=t.backend_util.computeOutAndReduceShapes(h.shape,l);let f,m=c;if(r&&(m=t.backend_util.expandShapeToKeepDim(c,u)),"max"!==s&&"prod"!==s||!i.shouldExecuteOnCPU([h])){const n=t.util.sizeFromShape(p),r={windowSize:n,inSize:n,batchSize:t.util.sizeFromShape(h.shape)/n,outSize:1},a="mean"===s?"float32":t.sumOutType(e.dtype),u=[{type:"int32",data:[n]}],l=new tn(r,s),d=i.runWebGPUProgram(l,[h],a,u);o.push(d),f=pe({inputs:{x:d},attrs:{shape:m},backend:i})}else{const n=i.tensorMap.get(h.dataId).values;switch(s){case"max":const r=It(n,t.util.sizeFromShape(p),m,e.dtype);f=i.makeTensorInfo(m,e.dtype,r);break;case"prod":const{outVals:a,outShape:o,outDtype:u}=At(h.shape,h.dtype,n,l);f=i.makeTensorInfo(o,u,a);break;default:throw new Error(`${s} CPU implementation is not yet supported.`)}}return o.forEach((e=>i.disposeData(e.dataId))),f}const rn={kernelName:t.All,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{keepDims:i,axis:a}=r;return nn(s,a,i,"all",n)}};const sn={kernelName:t.Any,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{keepDims:i,axis:a}=r;return nn(s,a,i,"any",n)}};class an{constructor(e,n,r){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;const s=[n];this.op="min"===r?"<":">";const[i,a]=t.backend_util.computeOutAndReduceShapes(e,s);this.outputShape=0===i.length?[1]:i,this.dispatchLayout=P(this.outputShape),t.util.sizeFromShape(a)<32||t.util.sizeFromShape(i)>1e3?(this.type="plain",this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=$(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=e,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){const e=this.workgroupSize[0],t=()=>1===this.inputShape.length?"uniforms.xShape":`uniforms.xShape.${m(this.inputShape.length-1)}`,n=()=>{let e="";if(1===this.outputShape.length)1!==this.inputShape.length&&(e+="outputCoords,");else for(let t=0;t<this.outputShape.length;t++)e+=`outputCoords.${m(t)},`;return e};if("shared"===this.type){return`\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ${`\n      var<workgroup> xBestIndices : array<i32, ${e}>;\n      var<workgroup> xBestValues : array<f32, ${e}>;\n    `}\n\n      ${g("index")} {\n        let outputIndex = index / ${e};\n        let reduceLength = ${t()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${e}) {\n          let candidate = getX(${n()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${e}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `}return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${n()} 0);\n          let reduceLength = ${t()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${n()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `}}const on={kernelName:t.ArgMax,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{axis:a}=s;let o=t.util.parseAxisParam(a,i.shape);const u=t.backend_util.getAxesPermutation(o,i.shape.length);let l=i;const d=[];null!=u&&(l=Jt({inputs:{x:i},backend:r,attrs:{perm:u}}),d.push(l),o=t.backend_util.getInnerMostAxes(o.length,l.shape.length)),t.backend_util.assertAxesAreInnerMostDims("argMax",[o[0]],l.shape.length);const h=new an(l.shape,o[0],"max"),c=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],p=r.runWebGPUProgram(h,[l],"int32",c);return d.forEach((e=>r.disposeData(e.dataId))),p}};const un={kernelName:t.ArgMin,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{axis:a}=s;let o=t.util.parseAxisParam(a,i.shape);const u=t.backend_util.getAxesPermutation(o,i.shape.length);let l=i;const d=[];null!=u&&(l=Jt({inputs:{x:i},backend:r,attrs:{perm:u}}),d.push(l),o=t.backend_util.getInnerMostAxes(o.length,l.shape.length)),t.backend_util.assertAxesAreInnerMostDims("argMin",[o[0]],l.shape.length);const h=new an(l.shape,o[0],"min"),c=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],p=r.runWebGPUProgram(h,[l],"int32",c);return d.forEach((e=>r.disposeData(e.dataId))),p}},ln=ve({opType:X.ASIN}),dn={kernelName:t.Asin,backendName:"webgpu",kernelFunc:ln},hn=ve({opType:X.ASINH}),cn={kernelName:t.Asinh,backendName:"webgpu",kernelFunc:hn},pn=ve({opType:X.ATAN}),fn={kernelName:t.Atan,backendName:"webgpu",kernelFunc:pn},mn=Ce({opType:L.ATAN2}),gn={kernelName:t.Atan2,backendName:"webgpu",kernelFunc:mn},bn=ve({opType:X.ATANH}),xn={kernelName:t.Atanh,backendName:"webgpu",kernelFunc:bn};class wn{constructor(e,t){this.variableNames=["x"],this.uniforms="stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`pool2D_${t}`,this.poolType=t}getUserCode(){let e="resultValue = max(value, resultValue);";"avg"===this.poolType&&(e="resultValue = resultValue + value; count = count + 1.0;");let t="resultValue";"avg"===this.poolType&&(t="resultValue / max(count, 1.0)");return`\n      ${g("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          var resultValue = ${"avg"===this.poolType?"0.0":"-1.0 / pow(10.0, -20.0)"};\n          var count = 0.0;\n\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, coords[3]);\n              ${e}\n            }\n          }\n\n          setOutputAtIndex(index, ${t});\n        }\n      }\n    `}}class yn{constructor(e){this.variableNames=["x"],this.uniforms="stride : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.stride;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}function kn(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:i,keepDims:a}=r;return nn(s,i,a,"max",n)}const In={kernelName:t.Max,backendName:"webgpu",kernelFunc:kn};function Sn(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{keepDims:i,axis:a}=r;return nn(s,a,i,"mean",n)}const vn={kernelName:t.Mean,backendName:"webgpu",kernelFunc:Sn};function Cn(e,n,r,s){if(1===n.filterWidth&&1===n.filterHeight&&t.util.arraysEqual(n.inShape,n.outShape))return we({inputs:{x:e},backend:s});if(n.filterWidth===n.inWidth&&n.filterHeight===n.inHeight&&1===n.batchSize&&"VALID"===n.padInfo.type){const i=e.shape.length,a=pe({inputs:{x:e},backend:s,attrs:{shape:[e.shape[i-3]*e.shape[i-2],e.shape[i-1]]}});let o;"avg"===r?o=Sn({inputs:{x:a},backend:s,attrs:{axis:0,keepDims:!1}}):(t.util.assert("max"===r,(()=>`Invalid pool type ${r}`)),o=kn({inputs:{x:a},backend:s,attrs:{reductionIndices:0,keepDims:!1}}));const u=pe({inputs:{x:o},backend:s,attrs:{shape:n.outShape}});return s.disposeData(a.dataId),s.disposeData(o.dataId),u}let i;const a=[{type:"int32",data:[n.strideHeight,n.strideWidth]}];return 1===n.filterHeight&&1===n.filterWidth?i=new yn(n):("avg"===r?i=new wn(n,"avg"):(t.util.assert("max"===r,(()=>`Invalid pool type ${r}`)),i=new wn(n,"max")),a.push({type:"int32",data:[n.padInfo.top,n.padInfo.left]},{type:"int32",data:[n.dilationHeight,n.dilationWidth]},{type:"int32",data:[n.inHeight,n.inWidth]},{type:"int32",data:[n.effectiveFilterHeight,n.effectiveFilterWidth]})),s.runWebGPUProgram(i,[e],e.dtype,a)}const $n={kernelName:t.AvgPool,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{filterSize:a,strides:o,pad:u,dimRoundingMode:l}=s;return Cn(i,t.backend_util.computePool2DInfo(i.shape,a,o,1,u,l),"avg",r)}};class Rn{constructor(e){this.variableNames=["dy"],this.uniforms="stride : vec2<i32>, pads : vec2<i32>, dilation : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avg_pool2d_backprop"}getUserCode(){return`\n      ${g("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilation[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.stride[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilation[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.stride[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `}}const An={kernelName:t.AvgPoolGrad,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{dy:i,input:a}=n,o=a;_([i,a],"avgPoolGrad");const{filterSize:u,strides:l,pad:d}=s,h=t.backend_util.computePool2DInfo(o.shape,u,l,1,d),c=new Rn(h),p=1/(h.filterHeight*h.filterWidth),f=[{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.effectiveFilterHeight-1-h.padInfo.top,h.effectiveFilterWidth-1-h.padInfo.left]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]},{type:"int32",data:[h.effectiveFilterHeight,h.effectiveFilterWidth]},{type:"int32",data:[h.outHeight]},{type:"int32",data:[h.outWidth]},{type:"float32",data:[p]}];return r.runWebGPUProgram(c,[i],o.dtype,f)}};const Tn={kernelName:t.BatchMatMul,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:i}=t,{transposeA:a,transposeB:o}=r;return me({a:s,b:i,transposeA:a,transposeB:o,backend:n})}};class Pn{constructor(e,t){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.rank=t.length,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=e,this.uniforms=`start : ${f(e.length)}, `,this.shaderKey="slice"}getUserCode(){const e=f(this.rank),t=function(e){if(1===e)return"sourceLoc";if(e<=6)return Nn.slice(0,e).map((e=>`sourceLoc.${e}`)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let n;n=1===this.start.length?this.outputShape.map(((e,t)=>"sourceLoc = uniforms.start + coords;")):this.outputShape.map(((e,t)=>`sourceLoc.${Nn[t]} = uniforms.start.${m(t)} + coords.${Nn[t]};`));return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${e};\n          let coords = getCoordsFromIndex(index);\n          ${n.join("\n")}\n          setOutputAtIndex(index, getSource(${t}));\n        }\n      }\n    `}}const Nn=["x","y","z","w","u","v"];function zn(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{begin:a,size:o}=s,[u,l]=t.slice_util.parseSliceParams(i,a,o);if(t.slice_util.assertParamsValid(i,u,l),r.shouldExecuteOnCPU([i])||"string"===i.dtype){const e=r.tensorMap.get(i.dataId),t=_t(e.values,u,l,i.shape,i.dtype);return r.makeTensorInfo(l,i.dtype,t)}if(0===t.util.sizeFromShape(l))return r.makeTensorInfo(l,i.dtype,[]);const d=new Pn(u,l),h=[{type:"int32",data:u}];return r.runWebGPUProgram(d,[i],i.dtype,h)}const _n={kernelName:t.Slice,backendName:"webgpu",kernelFunc:zn},En={kernelName:t.BatchToSpaceND,backendName:"webgpu",kernelFunc:e=>{const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{blockShape:a,crops:o}=s;t.util.assert(i.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet"));const u=a.reduce(((e,t)=>e*t)),l=t.backend_util.getReshaped(i.shape,a,u),d=t.backend_util.getPermuted(l.length,a.length),h=t.backend_util.getReshapedPermuted(i.shape,a,u),c=t.backend_util.getSliceBeginCoords(o,a.length),p=t.backend_util.getSliceSize(h,o,a.length),f=[],m=pe({inputs:{x:i},backend:r,attrs:{shape:l}}),g=Jt({inputs:{x:m},backend:r,attrs:{perm:d}}),b=pe({inputs:{x:g},backend:r,attrs:{shape:h}}),x=zn({inputs:{x:b},backend:r,attrs:{begin:c,size:p}});return f.push(m),f.push(g),f.push(b),f.forEach((e=>r.disposeData(e.dataId))),x}},Fn=`\n  fn bincount_write(index: i32, value: f32) {\n    ${c("&result[index]","value","float32")}\n  }\n`;class Bn{constructor(e,t,n=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=e,this.rank=e.length,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=n,n&&(this.atomic=!1),this.hasWeights=t,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`\n    ${this.binaryOutput?"\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n":Fn}\n  ${g("index")} {\n    ${1===this.rank?`if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};\n        bincount_write(indexVal, value);\n      }\n    }`:`let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `}}const On={kernelName:t.Bincount,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i,weights:a}=n,{size:o}=s,u=t.util.sizeFromShape(i.shape),l=t.util.sizeFromShape(a.shape)>0,d=[o],h=a.dtype,c=he({backend:r,attrs:{shape:d,value:0,dtype:h}}),p=new Bn([u],l),f=[{type:"int32",data:[o]}],m=l?[i,a]:[i];return r.runWebGPUProgram(p,m,h,f,c)}},Ln=Ce({opType:L.NOT_EQUAL,dtype:"bool",cpuKernelImpl:Rt}),Dn={kernelName:t.NotEqual,backendName:"webgpu",kernelFunc:Ln};function Un(e){const{inputs:t,backend:n}=e,{input:r}=t;return we({inputs:{x:n.tensorMap.get(r.dataId).complexTensorInfos.real},backend:n})}const Wn={kernelName:t.Real,backendName:"webgpu",kernelFunc:Un};const Mn={kernelName:t.Cast,backendName:"webgpu",kernelFunc:function e(n){const{inputs:s,backend:i,attrs:a}=n,{x:o}=s,{dtype:u}=a;if("complex64"===u){if("complex64"===o.dtype)return we({inputs:{x:o},backend:i});const t=r.zeros(o.shape),n=e({inputs:{x:o},backend:i,attrs:{dtype:"float32"}}),s=ke({inputs:{real:n,imag:t},backend:i});return t.dispose(),i.disposeData(n.dataId),s}if("complex64"===o.dtype){const t=Un({inputs:{input:o},backend:i}),n=e({inputs:{x:t},backend:i,attrs:{dtype:u}});return i.disposeData(t.dataId),n}if(!t.util.hasEncodingLoss(o.dtype,u)){const e=we({inputs:{x:o},backend:i});return{dataId:e.dataId,shape:e.shape,dtype:u}}if(i.shouldExecuteOnCPU([o])){const e=i.tensorMap.get(o.dataId).values,[t,n,r]=ut(e,o.shape,o.dtype,u);return i.makeTensorInfo(t,n,r)}if("int32"===u)return function(e,t){const n=new Se(e.shape,X.TO_INT),r=t.runWebGPUProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(o,i);if("bool"===u){const e=i.makeTensorInfo([],"bool",t.util.getTypedArrayFromDType("bool",1)),n=Ln({inputs:{a:o,b:e},backend:i});return i.disposeData(e.dataId),n}throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${u}`)}},Vn=ve({opType:X.CEIL,cpuKernelImpl:lt}),Gn={kernelName:t.Ceil,backendName:"webgpu",kernelFunc:Vn};class Hn{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.isVec4=!0,this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`\n      ${g("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `}}class Kn{constructor(e){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`\n      ${g("index")} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `}}const Xn={kernelName:t.ClipByValue,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{clipValueMin:a,clipValueMax:o}=s;let u;const l=[{type:"float32",data:[a]},{type:"float32",data:[o]}];return u=t.util.sizeFromShape(i.shape)%4==0?new Hn(i.shape):new Kn(i.shape),r.runWebGPUProgram(u,[i],i.dtype,l)}};class qn{constructor(e){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`)),this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=e.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){const e=[];if(this.offsetLength>0){e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let t=1;t<this.offsetLength;t++)e.push(`else if (yC < uniforms.offset${[t]}){ setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${t-1})); }`);const t=this.offsetLength,n=this.offsetLength-1;e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${t}(yR, yC - uniforms.offset${n})); }`)}else e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`\n      ${g("index")} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${e.join("\n        ")}\n          }\n        }\n      }\n    `}}function jn(e){const{inputs:t,backend:n}=e,{input:r}=t;return we({inputs:{x:n.tensorMap.get(r.dataId).complexTensorInfos.imag},backend:n})}const Yn={kernelName:t.Imag,backendName:"webgpu",kernelFunc:jn};function Qn(e,n,r){const s=e[0].dtype;if("complex64"===s){const t=e.map((e=>Un({inputs:{input:e},backend:r}))),s=e.map((e=>jn({inputs:{input:e},backend:r}))),i=Qn(t,n,r),a=Qn(s,n,r),o=ke({inputs:{real:i,imag:a},backend:r});return t.forEach((e=>r.disposeData(e.dataId))),s.forEach((e=>r.disposeData(e.dataId))),r.disposeData(i.dataId),r.disposeData(a.dataId),o}let i=r.shouldExecuteOnCPU(e);if("string"===s&&(i=!0),i){const i=e.map((e=>{const s=t.util.sizeFromShape(e.shape.slice(n));return pe({inputs:{x:e},backend:r,attrs:{shape:[-1,s]}})})),a=i.map((e=>({vals:r.readSync(e.dataId),shape:e.shape}))),o=t.backend_util.computeOutShape(i.map((e=>e.shape)),1),u=1===i[0].shape[0],l=dt(a,o,s,u),d=t.backend_util.computeOutShape(e.map((e=>e.shape)),n),h=r.makeTensorInfo(d,s,l);return i.forEach((e=>r.disposeData(e.dataId))),h}const a=r.device.limits.maxStorageBuffersPerShaderStage-1;if(e.length>a){const t=[];for(let s=0;s<e.length;s+=a){const i=e.slice(s,s+a);t.push(Qn(i,n,r))}const s=Qn(t,n,r);for(const e of t)r.disposeData(e.dataId);return s}const{tensors2D:o,outShape:u}=function(e,n,r){const s=t.backend_util.computeOutShape(e.map((e=>e.shape)),n);return{tensors2D:e.map((e=>pe({inputs:{x:e},backend:r,attrs:{shape:[t.util.sizeFromShape(e.shape.slice(0,n)),t.util.sizeFromShape(e.shape.slice(n))]}}))),outShape:s}}(e,n,r),l=o.map((e=>e.shape)),d=new qn(l),h=[],c=new Array(l.length-1);if(c.length>0){c[0]=l[0][1],h.push({type:"int32",data:[c[0]]});for(let e=1;e<c.length;e++)c[e]=c[e-1]+l[e][1],h.push({type:"int32",data:[c[e]]})}const p=r.runWebGPUProgram(d,o,o[0].dtype,h);o.forEach((e=>r.disposeData(e.dataId)));const f=pe({inputs:{x:p},backend:r,attrs:{shape:u}});return r.disposeData(p.dataId),f}function Zn(e){const{inputs:n,backend:r,attrs:s}=e,{axis:i}=s,a=t.util.parseAxisParam(i,n[0].shape)[0],o=n.map((e=>e.shape));t.backend_util.assertParamsConsistent(o,a);const u=t.backend_util.computeOutShape(n.map((e=>e.shape)),a);if(0===t.util.sizeFromShape(u))return r.makeTensorInfo(u,n[0].dtype,[]);const l=n.filter((e=>t.util.sizeFromShape(e.shape)>0));return 1===l.length?we({inputs:{x:l[0]},backend:r}):Qn(l,a,r)}const Jn={kernelName:t.Concat,backendName:"webgpu",kernelFunc:Zn};class er{constructor(e,t,n,r,s=!1,i=null,a=!1,o=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.isVec4=((e.inChannels%4==0||e.inChannels%3==0)&&this.isChannelsLast||e.outWidth%4==0&&!this.isChannelsLast)&&e.outChannels%4==0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=A(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=T(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.isChannelsLast&&e.inChannels%4!=0?(this.innerElementSize=3,this.variableTypes=["f32","vec4<f32>"]):(this.innerElementSize=4,this.variableTypes=["vec4<f32>","vec4<f32>"]),s&&(this.variableNames.push("bias"),this.variableTypes.push("vec4<f32>")),a&&(this.variableNames.push("preluActivationWeights"),this.variableTypes.push("vec4<f32>"))):(this.innerElementSize=this.elementsPerThread[0],s&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=o,this.addBias=s,this.activation=i,this.hasPreluActivationWeights=a,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=t%this.tileAOuter==0,this.fitBOuter=n%this.tileBOuter==0,this.fitInner=r%this.tileInner==0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){const e=this.isVec4?ne(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):se(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),t=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`\n    ${function(e,t,n,r,s=!1,i=null,a=!1,o=4,u=4,l=4){const d=e?"\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      ",h=e?"\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ":"\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      ",c=e?"uniforms.xShape[1]":"uniforms.xShape[2]",p=e?"uniforms.xShape[2]":"uniforms.xShape[3]",f=e?"row":"col",m=e?"col":"row",g=`\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n      let outRow = ${f} / outWidth;\n      let outCol = ${f} % outWidth;\n\n      let WRow = ${m} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${m} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n      let xCh = ${m} % inChannels;\n      var resData = ${Q(o)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${c} && xCol >= 0 && xCol < ${p}) {\n        ${d}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(o)}\n      }\n      return resData;`,b=e?t&&r?`\n      let col = colIn * ${o};\n      ${g}`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${g}\n      }\n      return ${Q(o)}(0.0);`:r&&n?`\n      let col = colIn * ${o};\n      ${g}`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${g}\n      }\n      return ${Q(o)}(0.0);`,x=`${(e=>{switch(e){case 1:return"return W[row * uniforms.wShape[3] + colIn];";case 4:return"return W[row * uniforms.wShape[3] / 4 + colIn];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(u)}`,w=Q(l),y=Q(e?o:u),k=Q(e?u:o);return`\n      ${Z(i,a,4===l,4)}\n      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${y} {\n        ${e?b:x}\n      }\n\n      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${k} {\n        ${e?x:b}\n      }\n\n      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${w}) {\n        let col = colIn * ${l};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${e?"uniforms.outShape[2]":"uniforms.outShape[3]"};\n        ${h}\n        ${J(s,i)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`}(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,t[0],t[1],t[2])}\n    ${e}\n  `}}class tr{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pad: vec2<i32>, stride: vec2<i32>, dilation: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=e.outShape,this.isChannelsLast="channelsLast"===e.dataFormat,this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=t,this.activation=n,this.hasPreluActivationWeights=r,t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`\n       ${Z(this.activation,this.hasPreluActivationWeights,!1,4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${J(this.addBias,this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${g("index")} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}\n         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}\n         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * row - uniforms.pad[0];\n             let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * col - uniforms.pad[1];\n             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {\n               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `}}class nr{constructor(e,t){this.variableNames=["x"],this.uniforms="pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?"coords[1]":"coords[2]",r=this.isChannelsLast?"coords[2]":"coords[1]",s=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`\n    ${g("index")} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${n};\n        let col = ${r};\n        let offsetY = (row / uniforms.outWidth) * uniforms.stride[0] - uniforms.pad[0];\n        let xRow = offsetY + uniforms.dilation[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.stride[1] -\n              uniforms.pad[1];\n          let xCol = offsetX + uniforms.dilation[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${t}] && xCol >= 0) {\n            value = ${s};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `}}function rr(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function sr({x:e,filter:n,convInfo:r,backend:s,bias:i=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:u=null}){const l=null!=i,d=null!=a,h="channelsLast"===r.dataFormat,c=h&&r.filterHeight===r.inHeight&&r.filterWidth===r.inWidth&&"VALID"===r.padInfo.type,p=t.env().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!p&&(c||1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type)))return function({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:o=null}){const u="channelsLast"===n.dataFormat,l=!u,d=[];let h,c;if(u&&n.filterHeight===n.inHeight&&n.filterWidth===n.inWidth&&"VALID"===n.padInfo.type){const s=n.inHeight*n.inWidth*n.inChannels;h=pe({inputs:{x:e},backend:r,attrs:{shape:[1,n.batchSize,s]}}),c=pe({inputs:{x:t},backend:r,attrs:{shape:[1,s,n.outChannels]}})}else h=pe({inputs:{x:e},backend:r,attrs:{shape:u?[n.batchSize,n.inHeight*n.inWidth,n.inChannels]:[n.batchSize,n.inChannels,n.inHeight*n.inWidth]}}),c=pe({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});if(d.push(h),d.push(c),null!=i){const e=rr(i.shape,u);null!=e&&(i=pe({inputs:{x:i},backend:r,attrs:{shape:e}}),d.push(i))}if(null!=s){const e=rr(s.shape,u);null!=e&&(s=pe({inputs:{x:s},backend:r,attrs:{shape:e}}),d.push(s))}const p=me({a:u?h:c,b:u?c:h,transposeA:l,transposeB:!1,backend:r,bias:s,activation:o,preluActivationWeights:i,leakyreluAlpha:a}),f=pe({inputs:{x:p},backend:r,attrs:{shape:n.outShape}});d.push(p);for(const e of d)r.disposeData(e.dataId);return f}({x:e,filter:n,convInfo:r,backend:s,bias:i,activation:u,preluActivationWeights:a,leakyreluAlpha:o});const f=t.env().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),m=f>0?f:s.thresholdToIncreaseWorkgroups,g=r.batchSize*Math.ceil(r.outHeight*r.outWidth/32)*Math.ceil(r.outChannels/32);if(t.env().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||g<=m)return function({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:o=null}){const{filterWidth:u,filterHeight:l,inChannels:d,strideWidth:h,strideHeight:c,padInfo:p,outWidth:f,outHeight:m,dilationWidth:g,dilationHeight:b,dataFormat:x}=n,w="channelsLast"===x,y=u*l*d,k=m*f,I=w?[n.batchSize,k,y]:[n.batchSize,y,k],S=new nr(I,w),v=[{type:"int32",data:[p.top,p.left]},{type:"int32",data:[c,h]},{type:"int32",data:[b,g]},{type:"int32",data:[f]},{type:"int32",data:[d*u]},{type:"int32",data:[d]}],C=r.runWebGPUProgram(S,[e],e.dtype,v),$=[];$.push(C);const R=pe({inputs:{x:t},backend:r,attrs:{shape:[1,y,-1]}});if($.push(R),null!=i){const e=rr(i.shape,w);null!=e&&(i=pe({inputs:{x:i},backend:r,attrs:{shape:e}}),$.push(i))}if(null!=s){const e=rr(s.shape,w);null!=e&&(s=pe({inputs:{x:s},backend:r,attrs:{shape:e}}),$.push(s))}const A=me({a:w?C:R,b:w?R:C,transposeA:!w,transposeB:!1,backend:r,bias:s,activation:o,preluActivationWeights:i,leakyreluAlpha:a}),T=pe({inputs:{x:A},backend:r,attrs:{shape:n.outShape}});$.push(A);for(const e of $)r.disposeData(e.dataId);return T}({x:e,filter:n,convInfo:r,backend:s,bias:i,preluActivationWeights:a,leakyreluAlpha:o,activation:u});let b;const x=[r.padInfo.top,r.padInfo.left],w=[{type:"int32",data:[r.filterHeight,r.filterWidth]},{type:"int32",data:[...x]},{type:"int32",data:[r.strideHeight,r.strideWidth]},{type:"int32",data:[r.dilationHeight,r.dilationWidth]}];if(p)b=new tr(r,l,u,d);else{const e=h?r.outHeight*r.outWidth:r.outChannels,t=h?r.outChannels:r.outHeight*r.outWidth,n=r.filterHeight*r.filterWidth*r.inChannels;w.push({type:"int32",data:[e]},{type:"int32",data:[t]},{type:"int32",data:[n]});const i=s.adapterInfo.isIntel();b=new er(r,e,t,n,l,u,d,i)}const y=[],k=[e,n];l&&(h||1!==i.shape.length||(i=pe({inputs:{x:i},backend:s,attrs:{shape:[i.shape[0],1,1]}}),y.push(i)),k.push(i)),d&&(h||1!==a.shape.length||(a=pe({inputs:{x:a},backend:s,attrs:{shape:[a.shape[0],1,1]}}),y.push(a)),k.push(a)),"leakyrelu"===u&&(w.push({type:"float32",data:[o]}),b.uniforms+=" alpha : f32,");const I=s.runWebGPUProgram(b,k,e.dtype,w);for(const e of y)s.disposeData(e.dataId);return I}const ir={kernelName:t.Conv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,attrs:r,backend:s}=e,{x:i,filter:a}=n,{strides:o,pad:u,dataFormat:l,dilations:d,dimRoundingMode:h}=r,c=t.backend_util.convertConv2DDataFormat(l);return sr({x:i,filter:a,convInfo:t.backend_util.computeConv2DInfo(i.shape,a.shape,o,d,u,h,!1,c),backend:s})}};class ar{constructor(e){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.inShape,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey=`conv2DDerInput_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?1:2,t=this.isChannelsLast?2:3,n=this.isChannelsLast?3:1;return`\n    ${g("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${n}];\n\n        let dyCorner = vec2<i32>(coords[${e}], coords[${t}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              if (${this.isChannelsLast}) {\n                let xValue = getDy(batch, idyR, idyC, d2);\n                let wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd = dotProd + xValue * wValue;\n              } else {\n                let xValue = getDy(batch, d2, idyR, idyC);\n                let wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd = dotProd + xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}class or{constructor(e){this.variableNames=["x","dy"],this.uniforms="pad : vec2<i32>, stride : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.filterShape,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`\n    ${g("index")} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.stride[0] - uniforms.pad[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.stride[1] - uniforms.pad[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `}}const ur={kernelName:t.Conv2DBackpropFilter,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i,dy:a}=n,{strides:o,pad:u,dataFormat:l,dimRoundingMode:d,filterShape:h}=s,c=t.backend_util.convertConv2DDataFormat(l),p=t.backend_util.computeConv2DInfo(i.shape,h,o,1,u,d,!1,c),f=new or(p),m=[{type:"int32",data:[p.padInfo.top,p.padInfo.left]},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.batchSize]},{type:"int32",data:[p.outHeight]},{type:"int32",data:[p.outWidth]},{type:"int32",data:[p.inHeight]},{type:"int32",data:[p.inWidth]}];return r.runWebGPUProgram(f,[i,a],i.dtype,m)}};class lr{constructor(e){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e.inShape,t.util.assert("channelsLast"===e.dataFormat,(()=>"TODO: NCHW is unimplemented")),this.isVec4=e.inChannels%4==0&&e.outChannels%4==0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=A(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=T(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.variableTypes=["vec4<f32>","f32"]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){const e=this.isVec4?ne(this.elementsPerThread,this.workgroupSize):se(this.elementsPerThread,this.workgroupSize);return`\n    ${function(e=4){const t=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        \n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${Q(e)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${Q(e)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${e}];\n      }\n      return ${Q(e)}(0.0);`;return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${Q(e)} {\n    let col = colIn * ${e};\n    ${t}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Q(e)} {\n    let col = colIn * ${e};\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${(e=>{switch(e){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(e)}\n    }\n    return ${Q(e)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${Q(e)}) {\n    let col = colIn * ${e};\n    if (row < uniforms.dimAOuter && (col + ${e-1}) < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${e}] = value;\n    }\n  }`}(this.isVec4?4:1)}\n    ${e}\n    `}}const dr={kernelName:t.Conv2DBackpropInput,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{dy:i,filter:a}=n,{inputShape:o,strides:u,pad:l,dataFormat:d,dimRoundingMode:h}=s,c=t.backend_util.convertConv2DDataFormat(d),p=t.backend_util.computeConv2DInfo(o,a.shape,u,1,l,h,!1,c),f=[{type:"int32",data:[p.filterHeight,p.filterWidth]},{type:"int32",data:[p.filterHeight-1-p.padInfo.top,p.filterWidth-1-p.padInfo.left]},{type:"int32",data:[p.strideHeight,p.strideWidth]},{type:"int32",data:[p.batchSize,p.outHeight,p.outWidth,p.outChannels]}];let m;if(t.env().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||p.filterHeight<=2&&p.filterWidth<=2&&p.outChannels<=16&&1===p.inChannels)m=new ar(p);else{m=new lr(p);const e=p.inHeight*p.inWidth,t=p.inChannels,n=p.filterHeight*p.filterWidth*p.outChannels;f.push({type:"uint32",data:[e]},{type:"uint32",data:[t]},{type:"uint32",data:[n]})}return r.runWebGPUProgram(m,[i,a],"float32",f)}},hr=ve({opType:X.COS}),cr={kernelName:t.Cos,backendName:"webgpu",kernelFunc:hr},pr=ve({opType:X.COSH}),fr={kernelName:t.Cosh,backendName:"webgpu",kernelFunc:pr};class mr{constructor(e,t,n,r){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;const[s]=t;this.outputShape=[s,n[0],n[1],e],this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId="bilinear"===r?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){const[e,t]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[n,r,s]=this.cropHeightBiggerThan1?[`(${e} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${e} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${e}`],[i,a,o]=this.cropWidthBiggerThan1?[`(${t} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${t} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${t}`];return`\n    ${g("index")} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${n});\n        let width_ratio = f32(${i});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${r};\n        let width_scale = ${a};\n        let in_y = ${s};\n        if( in_y < 0.0 || in_y > ${e} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${o};\n        if( in_x < 0.0 || in_x > ${t} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `}}const gr={kernelName:t.CropAndResize,backendName:"webgpu",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:i,boxInd:a}=t,{cropSize:o,method:u,extrapolationValue:l}=r,d=new mr(s.shape[3],i.shape,o,u),h=[{type:"float32",data:[l]}];return n.runWebGPUProgram(d,[s,i,a],"float32",h)}};var br;!function(e){e.Prod="*",e.Sum="+"}(br||(br={}));class xr{constructor(e,t,n,r){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=t,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=n,this.reverse=r,this.op=e,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){const e=this.outputShape.length,t=this.op===br.Prod?"1.0":"0.0",n=this.exclusive?t:`getX(${wr(e,"coords",this.op)})`,r=this.outputShape[this.outputShape.length-1];let s="",i="";return this.exclusive?(s=this.reverse?"end != "+(r-1):"end != 0",i=this.reverse?"end + 1":"end - 1"):(s=this.reverse?`end + pow2 < ${r}`:"end >= pow2",i=this.reverse?"end + pow2":"end - pow2"),`\n      ${g("index")} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${yr(e,"coords",this.op)};\n         var val = ${n};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${s}) {\n           let idx = ${i};\n           ${yr(e,"coords",this.op)} = idx;\n           val ${this.op}= getX(${wr(e,"coords",this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `}}function wr(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function yr(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function kr(e,n,r,s,i,a){const o=n.shape.length,u=t.backend_util.getAxesPermutation([s],o);let l=n;null!=u&&(l=Jt({inputs:{x:n},backend:r,attrs:{perm:u}}));const d=t.backend_util.getInnerMostAxes(1,o)[0];if(d!==o-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${n.shape.length-1} but got axis=${s}`);const h=l.shape[d];let c=we({inputs:{x:l},backend:r});for(let t=0;t<=Math.ceil(Math.log2(h))-1;t++){const n=new xr(e,l.shape,!1,a),s=c,i=[{type:"float32",data:[t]}];c=r.runWebGPUProgram(n,[c],c.dtype,i),r.disposeData(s.dataId)}if(i){const t=new xr(e,l.shape,i,a),n=c,s=[{type:"float32",data:[0]}];c=r.runWebGPUProgram(t,[c],c.dtype,s),r.disposeData(n.dataId)}if(null!=u){const e=Jt({inputs:{x:c},backend:r,attrs:{perm:t.backend_util.getUndoAxesPermutation(u)}});return r.disposeData(c.dataId),r.disposeData(l.dataId),e}return c}const Ir={kernelName:t.Cumprod,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:i,exclusive:a,reverse:o}=r;return kr(br.Prod,s,n,i,a,o)}};const Sr={kernelName:t.Cumsum,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:i,exclusive:a,reverse:o}=r;return kr(br.Sum,s,n,i,a,o)}};const vr={kernelName:t.DenseBincount,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i,weights:a}=n,{size:o,binaryOutput:u}=s,l=1===i.shape.length,d=t.util.sizeFromShape(a.shape)>0,h=a.dtype,c=l?[i.shape[0]]:[i.shape[0],i.shape[1]],p=he({backend:r,attrs:{shape:l?[o]:[i.shape[0],o],value:0,dtype:h}}),f=new Bn(c,d,u),m=[{type:"int32",data:[o]}],g=d?[i,a]:[i];return r.runWebGPUProgram(f,g,h,m,p)}};class Cr{constructor(e,t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${t}`,this.dataFormat=t}getUserCode(){return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const $r={kernelName:t.DepthToSpace,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:i,dataFormat:a}=r,o=s.shape[0],u=("NHWC"===a?s.shape[1]:s.shape[2])*i,l=("NHWC"===a?s.shape[2]:s.shape[3])*i,d=("NHWC"===a?s.shape[3]:s.shape[1])/(i*i),h=[{type:"int32",data:[i]}],c=new Cr("NHWC"===a?[o,u,l,d]:[o,d,u,l],a);return n.runWebGPUProgram(c,[s],s.dtype,h)}};class Rr{constructor(e,t,n,r=!1,s=null,i=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=e,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),r&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.addBias=r,this.activation=s,this.hasPreluActivation=i,this.filterHeight=t,this.filterWidth=n,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){const e=this.filterWidth*this.filterHeight,t=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],n=this.workgroupSize[1]+this.filterHeight-1,r=this.workgroupSize[0]+this.filterWidth-1;return`\n      ${Z(this.activation,this.hasPreluActivation,!1,4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${r}>, ${n}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${g()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pad;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${n}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${r}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${e<t?`if (wIndex < ${e})`:`for(; wIndex < ${e}; wIndex = wIndex + ${t})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${J(this.addBias,this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}class Ar{constructor(e,n=!1,r=null,s=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[4,4,4],this.workPerThread=4,this.isVec4=!0,this.outputShape=e.outShape,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1]),t.util.assert("channelsLast"===e.dataFormat,(()=>"TODO: NCHW is unimplemented")),n&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=n,this.activation=r,this.hasPreluActivation=s,this.shaderKey=`depthwiseVec4_${r}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){const e=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,t=this.convInfo.strideHeight,n=this.convInfo.strideWidth;return`\n      ${Z(this.activation,this.hasPreluActivation,!0,4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${g()} {\n        let batch = i32(globalId.z) / uniforms.outShape[1];\n        let r = i32(globalId.z) % uniforms.outShape[1];\n        let c = i32(globalId.y) * ${this.workPerThread};\n        let d1 = i32(globalId.x) * 4;\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${t}, ${n}) - uniforms.pad;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${e}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${e}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${n} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${J(this.addBias,this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `}}class Tr{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.uniforms="pad : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, stride : vec2<i32>, dilation : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast="channelsLast"===e.dataFormat,t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.convInfo=e,this.addBias=t,this.activation=n,this.hasPreluActivation=r,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){const e=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`\n      ${Z(this.activation,this.hasPreluActivation,!1,4)}\n\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.stride - uniforms.pad;\n          let d2 = coords[${this.isChannelsLast?3:1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilation[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilation[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilation[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilation[1];\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilation[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilation[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${e};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${J(this.addBias,this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `}}const Pr={kernelName:t.DepthwiseConv2dNative,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i,filter:a}=n,{strides:o,pad:u,dataFormat:l,dilations:d,dimRoundingMode:h}=s,c=t.backend_util.convertConv2DDataFormat(l);let p=d;null==p&&(p=[1,1]);const f=t.backend_util.computeConv2DInfo(i.shape,a.shape,o,p,u,h,!0,c),m=[{type:"int32",data:[f.padInfo.top,f.padInfo.left]},{type:"int32",data:[f.inHeight,f.inWidth]}],g="channelsLast"===f.dataFormat;let b;return!g&&f.inHeight>16&&f.inWidth>16&&1===f.strideHeight&&1===f.strideWidth&&1===f.dilationWidth&&1===f.dilationHeight&&f.inChannels===f.outChannels?b=new Rr(f.outShape,f.filterHeight,f.filterWidth):g&&f.outHeight>4&&f.outWidth>4&&f.strideWidth<=2&&f.inChannels===f.outChannels&&1===f.dilationHeight&&1===f.dilationWidth&&f.inChannels%4==0?b=new Ar(f):(b=new Tr(f),m.push({type:"int32",data:[f.filterHeight]},{type:"int32",data:[f.filterWidth]},{type:"int32",data:[f.strideHeight,f.strideWidth]},{type:"int32",data:[f.dilationHeight,f.dilationWidth]})),r.runWebGPUProgram(b,[i,a],i.dtype,m)}};class Nr{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,e],this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `}}const zr={kernelName:t.Diag,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r}=e,{x:s}=n,i=[...s.shape,...s.shape],a=t.util.sizeFromShape(s.shape),o=pe({inputs:{x:s},backend:r,attrs:{shape:[a]}}),u=new Nr(a),l=r.runWebGPUProgram(u,[o],o.dtype),d=pe({inputs:{x:l},backend:r,attrs:{shape:i}});return r.disposeData(o.dataId),r.disposeData(l.dataId),d}};class _r{constructor(e){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pad: vec2<i32>, stride: vec2<i32>, dilation: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.outShape,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`\n       ${g("index")} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.stride - uniforms.pad;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilation[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilation[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `}}const Er={kernelName:t.Dilation2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i,filter:a}=n,{strides:o,pad:u,dilations:l}=s,d=t.backend_util.computeDilation2DInfo(i.shape,a.shape,o,u,"NHWC",l),h=[d.padInfo.top,d.padInfo.left],c=[{type:"int32",data:[d.filterHeight,d.filterWidth]},{type:"int32",data:[...h]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]}],p=new _r(d);return r.runWebGPUProgram(p,[i,a],i.dtype,c)}},Fr=Ce({opType:L.MUL,cpuKernelImpl:Ct,supportsComplex:!0}),Br={kernelName:t.Multiply,backendName:"webgpu",kernelFunc:Fr};function Or(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:i,keepDims:a}=r;return nn(s,i,a,"sum",n)}const Lr={kernelName:t.Sum,backendName:"webgpu",kernelFunc:Or};const Dr={kernelName:t.Einsum,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{equation:i}=s,a=n,{allDims:o,summedDims:u,idDims:l}=t.backend_util.decodeEinsumEquation(i,a.length);t.backend_util.checkEinsumDimSizes(o.length,l,a);const{path:d,steps:h}=t.backend_util.getEinsumComputePath(u,l),c=h.length;let p=null,f=o.length;const m=[];for(let e=0;e<c;++e){for(const n of h[e]){const{permutationIndices:e,expandDims:s}=t.backend_util.getEinsumPermutation(f,l[n]);let i;t.backend_util.isIdentityPermutation(e)?i=a[n]:(i=Jt({inputs:{x:a[n]},backend:r,attrs:{perm:e}}),m.push(i));const o=i.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);t.util.arraysEqual(i.shape,o)||(i=pe({inputs:{x:i},backend:r,attrs:{shape:o}}),m.push(i)),null===p?p=i:(p=Fr({inputs:{a:i,b:p},backend:r}),m.push(p))}e<c-1&&(d[e]>=0&&(p=Or({inputs:{x:p},backend:r,attrs:{axis:d[e]-(o.length-f),keepDims:!1}}),m.push(p)),f--)}for(const e of m)e!==p&&r.disposeData(e.dataId);return p}},Ur=ve({opType:X.ELU}),Wr={kernelName:t.Elu,backendName:"webgpu",kernelFunc:Ur},Mr=Ce({opType:L.EQUAL,dtype:"bool",cpuKernelImpl:ht}),Vr={kernelName:t.Equal,backendName:"webgpu",kernelFunc:Mr},Gr=ve({opType:X.ERF}),Hr={kernelName:t.Erf,backendName:"webgpu",kernelFunc:Gr},Kr=ve({opType:X.EXP,cpuKernelImpl:ct,dtype:"float32"}),Xr={kernelName:t.Exp,backendName:"webgpu",kernelFunc:Kr};function qr(e){const{inputs:n,attrs:r,backend:s}=e,{dim:i}=r,{input:a}=n,o=a.shape.length,u=a.shape.slice();let l=i;return i<0&&(t.util.assert(-(o+1)<=i,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+i+1),u.splice(l,0,1),pe({inputs:{x:a},backend:s,attrs:{shape:u}})}const jr={kernelName:t.ExpandDims,backendName:"webgpu",kernelFunc:qr},Yr=ve({opType:X.EXPM1,cpuKernelImpl:pt}),Qr={kernelName:t.Expm1,backendName:"webgpu",kernelFunc:Yr};class Zr{constructor(e,t){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=e,this.shaderKey=`fft_${e}`}getUserCode(){return`\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${"real"===this.component?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${g("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `}}function Jr(e,n,r){const s=r.tensorMap.get(e.dataId),i=t.util.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],o=[],u=pe({inputs:{x:e},backend:r,attrs:{shape:[i/a,a]}});o.push(u);const l=u.shape,d=new Zr("real",l),h=new Zr("imag",l),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],p=[{type:"float32",data:[n?2*Math.PI:-2*Math.PI]},{type:"float32",data:[n?l[1]:1]}],f=r.runWebGPUProgram(d,c,"float32",p);o.push(f);const m=r.runWebGPUProgram(h,c,"float32",p);o.push(m);const g=ke({inputs:{real:f,imag:m},backend:r});o.push(g);const b=pe({inputs:{x:g},backend:r,attrs:{shape:e.shape}});return o.forEach((e=>r.disposeData(e.dataId))),b}const es={kernelName:t.FFT,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return Jr(r,!1,n)}};class ts{constructor(e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `}}const ns={kernelName:t.FlipLeftRight,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new ts(n.shape);return r.runWebGPUProgram(s,[n],n.dtype)}},rs=ve({opType:X.FLOOR,cpuKernelImpl:ft}),ss={kernelName:t.Floor,backendName:"webgpu",kernelFunc:rs},is=Ce({opType:L.INT_DIV,dtype:"int32"}),as={kernelName:t.FloorDiv,backendName:"webgpu",kernelFunc:is};class os{constructor(e,t,n=!1){this.isFromPixels=!0,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[t,1,1]),this.importVideo=n,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){const e=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`\n      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};\n      ${g("index")} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${e};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `}}const us={kernelName:t.FromPixels,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e;let{pixels:i}=n;const{numChannels:a}=s;if(null==i)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");const o="undefined"!=typeof HTMLVideoElement&&i instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&i instanceof HTMLImageElement,l="undefined"!=typeof HTMLCanvasElement&&i instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&i instanceof OffscreenCanvas,d="undefined"!=typeof ImageBitmap&&i instanceof ImageBitmap,[h,c]=o?[i.videoWidth,i.videoHeight]:[i.width,i.height],p=[c,h,a],f=o||u;if(d||l||f){let e;{if(f){const e=t.env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=ls&&e===ds||(ds=e,ls=document.createElement("canvas").getContext("2d",{willReadFrequently:ds})),ls.canvas.width=h,ls.canvas.height=c,ls.drawImage(i,0,0,h,c),i=ls.canvas}const n=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,s="rgba8unorm",a=r.textureManager.acquireTexture(p[1],p[0],s,n);r.queue.copyExternalImageToTexture({source:i},{texture:a},[p[1],p[0]]),e={width:h,height:c,format:s,usage:n,texture:a}}const n=t.util.sizeFromShape(p),s=t.util.computeStrides(p),o=new os(p,a,false),u=[{type:"uint32",data:[n]},{type:"uint32",data:[a]},{type:"uint32",data:[...s]}],l=r.makeTensorInfo([c,h],"int32");r.tensorMap.get(l.dataId).resourceInfo=e;const d=r.runWebGPUProgram(o,[l],"int32",u);return r.disposeData(l.dataId),d}const m=i.data;let g=m;if(null!=a&&4!==a){g=new Uint8Array(i.width*i.height*a);const e=m.length;let t=0;for(let n=0;n<e;n++)n%4<a&&(g[t++]=m[n])}const b=r.makeTensorInfo(p,"int32",new Int32Array(g));return r.uploadToGPU(b.dataId),b}};let ls,ds=t.env().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class hs{constructor(e,n,r,s,i){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],t.backend_util.assertAndGetBroadcastShape(e,n),t.backend_util.assertAndGetBroadcastShape(e,r),this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),null!=s&&(t.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset")),null!=i&&(t.backend_util.assertAndGetBroadcastShape(e,i),this.variableNames.push("scale")),this.offsetShape=s,this.scaleShape=i,this.shaderKey="batchNorm"}getUserCode(){let e="0.0";null!=this.offsetShape&&(e="getOffsetByOutputIndex(index)");let t="1.0";null!=this.scaleShape&&(t="getScaleByOutputIndex(index)");return`\n      ${g("index")} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${e};\n          let scaleValue = ${t};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `}}const cs={kernelName:t.FusedBatchNorm,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r,scale:s,offset:i,mean:a,variance:o}=e,{varianceEpsilon:u}=t,l=n,d=[r,a,o];let h=null;null!=i&&(h=i.shape,d.push(i));let c=null;null!=s&&(c=s.shape,d.push(s));const p=new hs(r.shape,a.shape,o.shape,h,c),f=[{type:"float32",data:[u]}];return l.runWebGPUProgram(p,d,r.dtype,f)}};const ps={kernelName:t.FusedConv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i,filter:a,bias:o,preluActivationWeights:u}=n,{strides:l,pad:d,dataFormat:h,dilations:c,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=s,g=t.backend_util.convertConv2DDataFormat(h);return sr({x:i,filter:a,convInfo:t.backend_util.computeConv2DInfo(i.shape,a.shape,l,c,d,p,!1,g),backend:r,bias:o,preluActivationWeights:u,leakyreluAlpha:m,activation:f})}};const fs={kernelName:t.FusedDepthwiseConv2D,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i,filter:a,bias:o,preluActivationWeights:u}=n,{strides:l,pad:d,dilations:h,dimRoundingMode:c,activation:p,leakyreluAlpha:f}=s;let m=h;null==m&&(m=[1,1]),t.util.assert(t.backend_util.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=t.backend_util.computeConv2DInfo(i.shape,a.shape,l,m,d,c,!0),b=[i,a],x=null!=o,w=null!=u;x&&b.push(o),w&&b.push(u);const y=[{type:"int32",data:[g.padInfo.top,g.padInfo.left]},{type:"int32",data:[g.inHeight,g.inWidth]}];let k;return g.outHeight>4&&g.outWidth>4&&g.strideWidth<=2&&g.inChannels===g.outChannels&&1===g.dilationHeight&&1===g.dilationWidth&&g.inChannels%4==0?k=new Ar(g,x,p,w):(k=new Tr(g,x,p,w),y.push({type:"int32",data:[g.filterHeight]},{type:"int32",data:[g.filterWidth]},{type:"int32",data:[g.strideHeight,g.strideWidth]},{type:"int32",data:[g.dilationHeight,g.dilationWidth]})),"leakyrelu"===p&&(y.push({type:"float32",data:[f]}),k.uniforms+=" alpha : f32,"),r.runWebGPUProgram(k,b,"float32",y)}};class ms{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${e}`,this.sliceDim=e,this.uniforms=`sliceDim : i32, strides : ${f(e)},`}getUserCode(){let e;e=this.sliceDim>1?"uniforms.strides[j]":"uniforms.strides";return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${e};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `}}const gs={kernelName:t.GatherNd,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r}=e,{params:s,indices:i}=n,a=i.shape,o=a[a.length-1],u=t.util.sizeFromShape(s.shape),[l,d,h,c]=t.backend_util.prepareAndValidate(s,i),p=pe({inputs:{x:i},backend:r,attrs:{shape:[d,o]}}),f=pe({inputs:{x:s},backend:r,attrs:{shape:[t.util.sizeFromShape(s.shape)/h,h]}});if(r.shouldExecuteOnCPU([s,i])||"string"===s.dtype){const e=r.readSync(i.dataId),t=r.bufferSync(s),n=mt(e,t,s.dtype,d,o,h,c,s.shape,u);return r.makeTensorInfo(l,s.dtype,n.values)}const m=new ms(o,[d,h]),g=[{type:"int32",data:[o]},{type:"int32",data:c}],b=r.runWebGPUProgram(m,[f,p],f.dtype,g),x=pe({inputs:{x:b},backend:r,attrs:{shape:l}});return r.disposeData(p.dataId),r.disposeData(f.dataId),r.disposeData(b.dataId),x}};class bs{constructor(e,t){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.slice(),this.aShape=e,this.outputShape=t,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){const e=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let r=0;r<e.length;r++)2===r?n.push("indexZ"):n.push(`${t[r]}`);return n.join()}(this.aShape);return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${e}));\n        }\n      }\n    `}}function xs(e){const{inputs:n,backend:r,attrs:s}=e,{x:i,indices:a}=n,{axis:o,batchDims:u}=s,l=t.util.parseAxisParam(o,i.shape)[0],d=t.backend_util.segment_util.collectGatherOpShapeInfo(i,a,l,u),h=t.util.sizeFromShape(a.shape),c=[],p=pe({inputs:{x:i},backend:r,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),f=pe({inputs:{x:a},backend:r,attrs:{shape:[d.batchSize,h/d.batchSize]}});c.push(p),c.push(f);const m=[d.batchSize,d.outerSize,h/d.batchSize,d.sliceSize];if(r.shouldExecuteOnCPU([i,a])){const e=r.tensorMap.get(f.dataId).values,n=t.buffer(f.shape,f.dtype,e),s=r.tensorMap.get(p.dataId).values,i=t.buffer(p.shape,p.dtype,s),a=gt(i,n,m);return c.forEach((e=>r.disposeData(e.dataId))),r.makeTensorInfo(d.outputShape,a.dtype,a.values)}const g=new bs(p.shape,m),b=r.runWebGPUProgram(g,[p,f],p.dtype);c.push(b);const x=pe({inputs:{x:b},backend:r,attrs:{shape:d.outputShape}});return c.forEach((e=>r.disposeData(e.dataId))),x}const ws={kernelName:t.GatherV2,backendName:"webgpu",kernelFunc:xs},ys=Ce({opType:L.GREATER,cpuKernelImpl:xt,dtype:"bool"}),ks={kernelName:t.Greater,backendName:"webgpu",kernelFunc:ys},Is=Ce({opType:L.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:bt}),Ss={kernelName:t.GreaterEqual,backendName:"webgpu",kernelFunc:Is};const vs={kernelName:t.IFFT,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return Jr(r,!0,n)}},Cs=ve({opType:X.IS_FINITE,dtype:"bool"}),$s={kernelName:t.IsFinite,backendName:"webgpu",kernelFunc:Cs},Rs=ve({opType:X.IS_INF,dtype:"bool"}),As={kernelName:t.IsInf,backendName:"webgpu",kernelFunc:Rs},Ts=ve({opType:X.IS_NAN,dtype:"bool"}),Ps={kernelName:t.IsNan,backendName:"webgpu",kernelFunc:Ts};const Ns={kernelName:t.LeakyRelu,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:i}=r,a=[{type:"float32",data:[i]}],o=new Se(s.shape,X.LEAKYRELU,"alpha : f32,");return n.runWebGPUProgram(o,[s],"float32",a)}},zs=Ce({opType:L.LESS,dtype:"bool",cpuKernelImpl:yt}),_s={kernelName:t.Less,backendName:"webgpu",kernelFunc:zs},Es=Ce({opType:L.LESS_EQUAL,dtype:"bool",cpuKernelImpl:wt}),Fs={kernelName:t.LessEqual,backendName:"webgpu",kernelFunc:Es};class Bs{constructor(e){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e],this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `}}const Os={kernelName:t.LinSpace,backendName:"webgpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:i}=n,a=(s-r)/(i-1),o=new Bs(i),u=[{type:"float32",data:[r]},{type:"float32",data:[a]}];return t.runWebGPUProgram(o,[],"float32",u)}},Ls=ve({opType:X.LOG,cpuKernelImpl:kt}),Ds={kernelName:t.Log,backendName:"webgpu",kernelFunc:Ls},Us=ve({opType:X.LOG1P}),Ws={kernelName:t.Log1p,backendName:"webgpu",kernelFunc:Us},Ms=Ce({opType:L.LOGICAL_AND,dtype:"bool"}),Vs={kernelName:t.LogicalAnd,backendName:"webgpu",kernelFunc:Ms},Gs=ve({opType:X.LOGICAL_NOT}),Hs={kernelName:t.LogicalNot,backendName:"webgpu",kernelFunc:Gs},Ks=Ce({opType:L.LOGICAL_OR}),Xs={kernelName:t.LogicalOr,backendName:"webgpu",kernelFunc:Ks},qs="\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n";class js{constructor(e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`\n    ${g("index")} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${qs}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `}}class Ys{constructor(e,n){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,t.util.assert(n<=this.maxAllowRadius,(()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${n}`)),this.outputShape=e,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=$(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${g()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${qs}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `}}const Qs={kernelName:t.LRN,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:i,bias:a,alpha:o,beta:u}=r;let l;l=i>16?new js(s.shape):new Ys(s.shape,i);const d=[{type:"int32",data:[i]},{type:"float32",data:[a]},{type:"float32",data:[o]},{type:"float32",data:[u]}];return n.runWebGPUProgram(l,[s],s.dtype,d)}},Zs=Ce({opType:L.MAX,cpuKernelImpl:St}),Js={kernelName:t.Maximum,backendName:"webgpu",kernelFunc:Zs};const ei={kernelName:t.MaxPool,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{filterSize:a,strides:o,pad:u,dimRoundingMode:l}=s;return Cn(i,t.backend_util.computePool2DInfo(i.shape,a,o,1,u,l),"max",r)}};const ti={kernelName:t.Min,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:i,keepDims:a}=r;return nn(s,i,a,"min",n)}},ni=Ce({opType:L.MIN,cpuKernelImpl:vt}),ri={kernelName:t.Minimum,backendName:"webgpu",kernelFunc:ni};class si{constructor(e,t,n){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1])),this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=e,t.map(((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`})),this.offset="reflect"===n?0:1,this.shaderKey=`mirrorPad_${n}`}getUserCode(){const e=this.xShape.length,t=this.xShape.map(((e,t)=>`uniforms.pad${t}[0]`)).join(","),n=this.xShape.map(((t,n)=>`uniforms.pad${n}[0] + uniforms.xShape${e>1?`[${n}]`:""}`)).join(","),r=1===e?"start":"start[i]",s=1===e?"end":"end[i]",i=1===e?"outC":"outC[i]",a=f(e),o=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let start = ${a}(${t});\n          let end = ${a}(${n});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${e}; i = i + 1) {\n            if (${i} < ${r}) {\n              ${i} = ${r} * 2 - ${i} - ${this.offset};\n            } else if(${i} >= ${s}) {\n              ${i} = (${s} - 1) * 2 - ${i} + ${this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${o}));\n        }\n      }\n    `}}const ii={kernelName:t.MirrorPad,backendName:"webgpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{paddings:s,mode:i}=t,a=n,o=s.map((e=>({type:"int32",data:[e[0],e[1]]}))),u=new si(r.shape,s,i);return a.runWebGPUProgram(u,[r],r.dtype,o)}},ai=Ce({opType:L.MOD}),oi={kernelName:t.Mod,backendName:"webgpu",kernelFunc:ai};const ui={kernelName:t.Neg,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.tensorMap.get(r.dataId),[t,s]=$t(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}const s=new Se(r.shape,X.NEG);return n.runWebGPUProgram(s,[r],r.dtype)}};const li={kernelName:t.NonMaxSuppressionV3,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:r,attrs:s}=e,{boxes:i,scores:a}=n,{maxOutputSize:o,iouThreshold:u,scoreThreshold:l}=s,d=r.readSync(i.dataId),h=r.readSync(a.dataId),{selectedIndices:c}=t.kernel_impls.nonMaxSuppressionV3Impl(d,h,o,u,l);return r.makeTensorInfo([c.length],"int32",new Int32Array(c))}};const di={kernelName:t.NonMaxSuppressionV5,backendName:"webgpu",kernelFunc:function(e){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:r,attrs:s}=e,{boxes:i,scores:a}=n,{maxOutputSize:o,iouThreshold:u,scoreThreshold:l,softNmsSigma:d}=s,h=r.readSync(i.dataId),c=r.readSync(a.dataId),p=o,f=u,m=l,g=d,{selectedIndices:b,selectedScores:x}=t.kernel_impls.nonMaxSuppressionV5Impl(h,c,p,f,m,g);return[r.makeTensorInfo([b.length],"int32",new Int32Array(b)),r.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class hi{constructor(e,t){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e,t],this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`\n      ${g("index")} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `}}const ci={kernelName:t.OneHot,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{indices:i}=n,{dtype:a,depth:o,onValue:u,offValue:l}=s,d=t.util.sizeFromShape(i.shape),h=new hi(d,o),c=pe({inputs:{x:i},backend:r,attrs:{shape:[d]}}),p=[{type:"float32",data:[u]},{type:"float32",data:[l]}],f=r.runWebGPUProgram(h,[c],a,p);r.disposeData(c.dataId);const m=pe({inputs:{x:f},backend:r,attrs:{shape:[...i.shape,o]}});return r.disposeData(f.dataId),m}};function pi(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=Un({inputs:{input:r},backend:n}),t=pi({inputs:{x:e},backend:n}),s=jn({inputs:{input:r},backend:n}),i=pi({inputs:{x:s},backend:n}),a=ke({inputs:{real:t,imag:i},backend:n});return n.disposeData(e.dataId),n.disposeData(t.dataId),n.disposeData(s.dataId),n.disposeData(i.dataId),a}return he({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const fi={kernelName:t.ZerosLike,backendName:"webgpu",kernelFunc:pi};const mi={kernelName:t.OnesLike,backendName:"webgpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=Un({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),i=jn({inputs:{input:s},backend:r}),a=pi({inputs:{x:i},backend:r}),o=ke({inputs:{real:n,imag:a},backend:r});return r.disposeData(t.dataId),r.disposeData(n.dataId),r.disposeData(i.dataId),r.disposeData(a.dataId),o}return he({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const gi={kernelName:t.Pack,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{axis:i}=s;if(1===n.length)return qr({inputs:{input:n[0]},backend:r,attrs:{dim:i}});const a=n[0].shape,o=n[0].dtype;n.forEach((e=>{t.util.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),t.util.assert(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=Zn({inputs:n.map((e=>{const t=qr({inputs:{input:e},backend:r,attrs:{dim:i}});return u.push(t),t})),backend:r,attrs:{axis:i}});return u.forEach((e=>r.disposeData(e.dataId))),l}};class bi{constructor(e,t){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1])),this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),t.map(((e,t)=>{this.uniforms+=` pad${t} : vec2<i32>,`})),this.xShape=e,this.shaderKey="pad"}getUserCode(){const e=this.xShape.length,t=f(e),n=this.xShape.map(((e,t)=>`uniforms.pad${t}[0]`)).join(","),r=this.xShape.map(((t,n)=>`uniforms.pad${n}[0] + uniforms.xShape${e>1?`[${n}]`:""}`)).join(","),s=e>1?`${t}(${n})`:`${n}`,i=e>1?`${t}(${r})`:`${r}`,a=e>1?"any(outC < start)":"outC < start",o=e>1?"any(outC >= end)":"outC >= end",u=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let start = ${s};\n          let end = ${i};\n          let outC = getCoordsFromIndex(index);\n\n          if (${a} || ${o}) {\n            setOutputAtIndex(index, uniforms.constantValue);\n          } else {\n            let coords = outC - start;\n            setOutputAtIndex(index, getX(${u}));\n          }\n        }\n      }\n    `}}const xi=e=>{const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{paddings:a,constantValue:o}=s;if(a.every((e=>t.util.arraysEqual(e,[0,0]))))return we({inputs:{x:i},backend:r});if(0===t.util.sizeFromShape(i.shape)){return he({backend:r,attrs:{shape:a.map(((e,t)=>e[0]+i.shape[t]+e[1])),value:o,dtype:i.dtype}})}const u=[{type:"float32",data:[o]}];a.map((e=>u.push({type:"int32",data:[e[0],e[1]]})));const l=new bi(i.shape,a);return r.runWebGPUProgram(l,[i],i.dtype,u)},wi={kernelName:t.PadV2,backendName:"webgpu",kernelFunc:xi},yi=Ce({opType:L.POW}),ki={kernelName:t.Pow,backendName:"webgpu",kernelFunc:yi};const Ii={kernelName:t.Prelu,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,i=new xe(L.PRELU,r.shape,s.shape);return n.runWebGPUProgram(i,[r,s],"float32")}};const Si={kernelName:t.Prod,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:i,keepDims:a}=r;return nn(s,i,a,"prod",n)}},vi={kernelName:t.Range,backendName:"webgpu",kernelFunc:e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:i,dtype:a}=n,o=Tt(r,s,i,a);return t.makeTensorInfo([o.length],a,o)}},Ci=Ce({opType:L.DIV}),$i={kernelName:t.RealDiv,backendName:"webgpu",kernelFunc:Ci},Ri=ve({opType:X.RECIPROCAL}),Ai={kernelName:t.Reciprocal,backendName:"webgpu",kernelFunc:Ri},Ti=ve({opType:X.RELU}),Pi={kernelName:t.Relu,backendName:"webgpu",kernelFunc:Ti},Ni=ve({opType:X.RELU6}),zi={kernelName:t.Relu6,backendName:"webgpu",kernelFunc:Ni};class _i{constructor(e,t,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const Ei={kernelName:t.ResizeBilinear,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:i,size:a,halfPixelCenters:o}=r,[u,l]=a,d=[{type:"float32",data:[i&&u>1?1:0,i&&l>1?1:0]},{type:"float32",data:[o?.5:0]}],h=new _i(s.shape,u,l);return n.runWebGPUProgram(h,[s],"float32",d)}};class Fi{constructor(e,t,n,r){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[e[0],t,n,e[3]],this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=r,this.shaderKey=`resizeNearest_${r}`}getUserCode(){let e;e=this.halfPixelCenters?"max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":"vec2<f32>(rc) * effectiveInputOverOutputRatioRC";return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${e};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `}}const Bi={kernelName:t.ResizeNearestNeighbor,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:i,halfPixelCenters:a,size:o}=r,[u,l]=o,d=[{type:"float32",data:[i&&u>1?1:0,i&&l>1?1:0]},{type:"float32",data:[i?.5:0]}],h=new Fi(s.shape,u,l,a);return n.runWebGPUProgram(h,[s],s.dtype,d)}};class Oi{constructor(e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`\n      \n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    \n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `}}const Li={kernelName:t.Reverse,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{dims:a}=s,o=i.shape.length;if(0===o)return we({inputs:{x:i},backend:r});const u=i.shape,l=[1,1,1,1];u.forEach(((e,t)=>{l[t+4-o]=e}));const d=t.util.parseAxisParam(a,i.shape),h=[0,0,0,0];d.forEach((e=>{h[e+4-o]=1}));const c=[{type:"int32",data:h}],p=pe({inputs:{x:i},backend:r,attrs:{shape:l}}),f=new Oi(l),m=r.runWebGPUProgram(f,[p],p.dtype,c);r.disposeData(p.dataId);const g=pe({inputs:{x:m},backend:r,attrs:{shape:u}});return r.disposeData(m.dataId),g}};class Di{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,",this.shaderKey="rotate",this.outputShape=e,"number"==typeof t?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`\n        ${g("index")} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `}}const Ui={kernelName:t.RotateWithOffset,backendName:"webgpu",kernelFunc:({inputs:e,attrs:n,backend:r})=>{const{image:s}=e,{radians:i,fillValue:a,center:o}=n,u=r,l=new Di(s.shape,a),[d,h]=t.backend_util.getImageCenter(o,s.shape[1],s.shape[2]),c=[{type:"float32",data:[d]},{type:"float32",data:[h]},{type:"float32",data:[Math.sin(i)]},{type:"float32",data:[Math.cos(i)]}];"number"==typeof a?c.push({type:"float32",data:[Number.parseFloat(a.toFixed(2))]}):c.push({type:"float32",data:a});return u.runWebGPUProgram(l,[s],s.dtype,c)}},Wi=ve({opType:X.ROUND}),Mi={kernelName:t.Round,backendName:"webgpu",kernelFunc:Wi},Vi=ve({opType:X.RSQRT,cpuKernelImpl:Pt}),Gi={kernelName:t.Rsqrt,backendName:"webgpu",kernelFunc:Vi};class Hi{constructor(e,t,n,r,s,i,a,o=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=i,this.type=a,this.sumDupeIndices=o,this.dispatchLayout=P(e),this.dispatch=$(this.dispatchLayout,e,this.workgroupSize),this.sliceDimGreaterThanOne=t>1,this.shaderKey=`scatter_${n}_${r}_${this.sliceDimGreaterThanOne}_${a}_${o}`;const u=f(s.length);this.uniforms=`sliceDim : i32, strides: ${u}, updatesSize: i32,`,this.updatesRank=r,this.indicesRank=n}getUserCode(){let e="";1===this.indicesRank?e="coords[0]":2===this.indicesRank&&(e="coords[0], j");const t=`getIndices(${e})`,n=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides";let r="",s="";1===this.dispatchLayout.x.length?(r="flattenedIndex",s="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      "):2===this.dispatchLayout.x.length&&(r="vec2<i32>(flattenedIndex, coords[1])",s="\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      ");const i=`getUpdates(${Array.from({length:this.updatesRank},((e,t)=>`coords[${t}]`)).join(", ")})`;return`\n    ${s}\n      ${g("index")} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${t}));\n            flattenedIndex = flattenedIndex + indexInside * ${n};\n          }\n          let updateValue =\n              ${S(this.type,!1)}(${i});\n          let flatIndex = getOutputIndexFromCoords(${r});\n\n          ${this.sumDupeIndices?c("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}\n        }\n      }`}}const Ki={kernelName:t.ScatterNd,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{indices:i,updates:a}=n,{shape:o}=s,{sliceRank:u,numUpdates:l,sliceSize:d,strides:h,outputSize:c}=t.backend_util.calculateShapes(a,i,o),p=[c/d,d];if(0===c)return r.makeTensorInfo(o,i.dtype);const f=pe({inputs:{x:i},backend:r,attrs:{shape:[l,u]}}),m=pe({inputs:{x:a},backend:r,attrs:{shape:[l,d]}}),g=m.dtype,b=he({backend:r,attrs:{shape:p,value:0,dtype:g}}),x=[{type:"int32",data:[u]},{type:"int32",data:h},{type:"int32",data:[t.util.sizeFromShape(m.shape)]}],w=new Hi(m.shape,u,f.shape.length,m.shape.length,h,p,g),y=r.runWebGPUProgram(w,[m,f],g,x,b),k=pe({inputs:{x:y},backend:r,attrs:{shape:o}});return r.disposeData(f.dataId),r.disposeData(m.dataId),r.disposeData(y.dataId),k}};class Xi{constructor(e,t){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=t,this.shaderKey=`search_sorted_${t}`}getUserCode(){return`\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${"left"===this.side?"<":"<="} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `}}const qi={kernelName:t.SearchSorted,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:s,values:i}=t,{side:a}=r,o=new Xi([i.shape[0],i.shape[1]],a),u=[{type:"int32",data:[s.shape[1]]}];return n.runWebGPUProgram(o,[s,i],"int32",u)}};class ji{constructor(e,t,n){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=e,this.rank=n,this.shaderKey="select"}getUserCode(){let e,t;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(1===this.rank)t="resRC",e="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],s=[];for(let e=0;e<this.outputShape.length;e++)s.push(`${n[e]}`),e<this.cRank&&r.push(`${n[e]}`);e=r.join(),t=s.join()}return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${e});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${t}));\n          } else {\n            setOutputAtIndex(index, getB(${t}));\n          }\n        }\n      }\n    `}}const Yi={kernelName:t.Select,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r}=e,{condition:s,t:i,e:a}=n,o=new ji(s.shape.length,i.shape,i.shape.length);return r.runWebGPUProgram(o,[s,i,a],t.upcastType(i.dtype,a.dtype))}},Qi=ve({opType:X.SELU}),Zi={kernelName:t.Selu,backendName:"webgpu",kernelFunc:Qi},Ji=ve({opType:X.SIGMOID}),ea={kernelName:t.Sigmoid,backendName:"webgpu",kernelFunc:Ji},ta=ve({opType:X.SIGN}),na={kernelName:t.Sign,backendName:"webgpu",kernelFunc:ta},ra=ve({opType:X.SIN}),sa={kernelName:t.Sin,backendName:"webgpu",kernelFunc:ra},ia=ve({opType:X.SINH}),aa={kernelName:t.Sinh,backendName:"webgpu",kernelFunc:ia},oa=Ce({opType:L.SUB,cpuKernelImpl:Bt,supportsComplex:!0}),ua={kernelName:t.Sub,backendName:"webgpu",kernelFunc:oa};const la={kernelName:t.Softmax,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{logits:i}=n,{dim:a}=s,o=t.util.parseAxisParam([a],i.shape),u=kn({inputs:{x:i},backend:r,attrs:{reductionIndices:o,keepDims:!1}}),l=t.backend_util.expandShapeToKeepDim(u.shape,o),d=pe({inputs:{x:u},backend:r,attrs:{shape:l}}),h=oa({inputs:{a:i,b:d},backend:r}),c=Kr({inputs:{x:h},backend:r}),p=Or({inputs:{x:c},backend:r,attrs:{axis:o,keepDims:!1}}),f=pe({inputs:{x:p},backend:r,attrs:{shape:l}}),m=Ci({inputs:{a:c,b:f},backend:r});return r.disposeData(u.dataId),r.disposeData(d.dataId),r.disposeData(h.dataId),r.disposeData(c.dataId),r.disposeData(p.dataId),r.disposeData(f.dataId),m}},da=ve({opType:X.SOFTPLUS}),ha={kernelName:t.Softplus,backendName:"webgpu",kernelFunc:da},ca={kernelName:t.SpaceToBatchND,backendName:"webgpu",kernelFunc:e=>{const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{blockShape:a,paddings:o}=s;t.util.assert(i.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet"));const u=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<i.shape.length;++e)l.push([0,0]);const d=[],h=xi({inputs:{x:i},backend:r,attrs:{paddings:l,constantValue:0}}),c=t.backend_util.getReshaped(h.shape,a,u,!1),p=t.backend_util.getPermuted(c.length,a.length,!1),f=t.backend_util.getReshapedPermuted(h.shape,a,u,!1),m=pe({inputs:{x:h},backend:r,attrs:{shape:c}}),g=Jt({inputs:{x:m},backend:r,attrs:{perm:p}}),b=pe({inputs:{x:g},backend:r,attrs:{shape:f}});return d.push(h),d.push(m),d.push(g),d.forEach((e=>r.disposeData(e.dataId))),b}};class pa{constructor(e,t){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){const e=function(e,t=""){if(e>=5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`(resRC % ${t}aShape)`;const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<e;s++)r.push(`(${n[s]} % ${t}aShape[${s}])`);return r.join()}(this.rank,"uniforms.");return`\n      ${g("index")} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${e}));\n        }\n      }\n    `}}function fa(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{reps:a}=s;if(r.shouldExecuteOnCPU([i])||"string"===i.dtype||i.shape.length>=5){const e=r.readSync(i.dataId),n="string"===i.dtype?e.map((e=>t.util.decodeString(e))):e,s=t.buffer(i.shape,i.dtype,n),o=Ot(s,a);return r.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new pa(i.shape,a);return r.runWebGPUProgram(o,[i],i.dtype)}const ma={kernelName:t.Tile,backendName:"webgpu",kernelFunc:fa};const ga={kernelName:t.SparseToDense,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{sparseIndices:i,sparseValues:a,defaultValue:o}=n,{outputShape:u}=s,{sliceRank:l,numUpdates:d,sliceSize:h,strides:c,outputSize:p}=t.backend_util.calculateShapes(a,i,u),f=!1;if("string"===a.dtype){const e=r.bufferSync(i),n=r.bufferSync(a),s=t.util.decodeString(r.readSync(o.dataId)[0]),m=Nt(e,n,u,p,h,d,l,c,s,f);return r.makeTensorInfo(u,m.dtype,m.values)}const m=[p/h,h],g=pe({inputs:{x:i},backend:r,attrs:{shape:[d,l]}}),b=a.shape.length?pe({inputs:{x:a},backend:r,attrs:{shape:[d,h]}}):we({inputs:{x:a},backend:r}),x=b.dtype,w=r.makeTensorInfo([],x,t.util.makeZerosTypedArray(1,x)),y=pe({inputs:{x:o},backend:r,attrs:{shape:Array(m.length).fill(1)}}),k=fa({inputs:{x:y},backend:r,attrs:{reps:m}}),I=[{type:"int32",data:[l]},{type:"int32",data:c},{type:"int32",data:[t.util.sizeFromShape([d,h])]}];switch(d){case 0:break;case 1:{const e=new Hi([d,h],l,g.shape.length,b.shape.length,c,m,x,f);r.runWebGPUProgram(e,[b,g],x,I,k)}break;default:{const e=new Hi([d,h],l,g.shape.length,w.shape.length,c,m,x,f);r.runWebGPUProgram(e,[w,g],x,I,k)}{const e=new Hi([d,h],l,g.shape.length,b.shape.length,c,m,x);r.runWebGPUProgram(e,[b,g],x,I,k)}}const S=pe({inputs:{x:k},backend:r,attrs:{shape:u}});return r.disposeData(g.dataId),r.disposeData(b.dataId),r.disposeData(y.dataId),r.disposeData(w.dataId),r.disposeData(k.dataId),S}};const ba={kernelName:t.SplitV,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{numOrSizeSplits:a,axis:o}=s,u=t.util.parseAxisParam(o,i.shape)[0],l=t.backend_util.prepareSplitSize(i,a,u),d=i.shape.length,h=new Array(d).fill(0),c=i.shape.slice();return l.map((e=>{const t=[...c];t[u]=e;const n=zn({inputs:{x:i},backend:r,attrs:{begin:h,size:t}});return h[u]+=e,n}))}},xa=ve({opType:X.SQRT}),wa={kernelName:t.Sqrt,backendName:"webgpu",kernelFunc:xa},ya={kernelName:t.Square,backendName:"webgpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t,s=new Se(n.shape,X.SQUARE);return r.runWebGPUProgram(s,[n],n.dtype)}},ka=Ce({opType:L.SQUARED_DIFFERENCE}),Ia={kernelName:t.SquaredDifference,backendName:"webgpu",kernelFunc:ka};const Sa={kernelName:t.Step,backendName:"webgpu",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=new Se(r.shape,X.STEP,"stepAlpha : f32,"),i=[{type:"float32",data:[t.alpha]}];return n.runWebGPUProgram(s,[r],r.dtype,i)}};class va{constructor(e){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);const t=f(this.outputShape.length);this.uniforms=`begin : ${t},  strides : ${t}, `,this.shaderKey="stridedSlice"}getUserCode(){let e="";if(1===this.outputShape.length)e="coords * uniforms.strides + uniforms.begin";else{let t=0;e=this.outputShape.map(((e,n)=>(t++,1===this.outputShape.length?`coords * uniforms.strides[${n}] + uniforms.begin[${n}]`:`coords[${t-1}] * uniforms.strides[${n}] + uniforms.begin[${n}]`))).join(",")}return`\n       ${g("index")} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${e}));\n         }\n       }\n     `}}const Ca={kernelName:t.StridedSlice,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{begin:a,end:o,strides:u,beginMask:l,endMask:d,ellipsisMask:h,newAxisMask:c,shrinkAxisMask:p}=s,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:b,isSimpleSlice:x,begin:w,end:y,strides:k}=t.slice_util.sliceInfo(i.shape,a,o,u,l,d,h,c,p);let I;if(g)I=pe({inputs:{x:i},backend:r,attrs:{shape:m}});else if(b||x){t.util.assert(i.shape.length>=1,(()=>`Input must have rank at least 1, got: ${i.shape.length}`));const e=t.slice_util.computeOutShape(w,y,k),n=zn({inputs:{x:i},backend:r,attrs:{begin:w,size:e}});I=pe({inputs:{x:n},backend:r,attrs:{shape:m}}),r.disposeData(n.dataId)}else{if(r.shouldExecuteOnCPU([i])){const e=r.readSync(i.dataId),n=t.buffer(i.shape,i.dtype,e),s=Et(f,n,k,w);I=r.makeTensorInfo(m,i.dtype,s.values)}else{const e=new va(f),t=[{type:"int32",data:w},{type:"int32",data:k}],n=r.runWebGPUProgram(e,[i],i.dtype,t);I=pe({inputs:{x:n},backend:r,attrs:{shape:m}}),r.disposeData(n.dataId)}}return I}};const $a={kernelName:t.StringNGrams,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:i,leftPad:a,rightPad:o,padWidth:u,preserveShortSequences:l}=r,{data:d,dataSplits:h}=t,c=n.readSync(d.dataId),p=n.readSync(h.dataId),[f,m]=Ft(c,p,s,i,a,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},Ra=ve({opType:X.TAN}),Aa={kernelName:t.Tan,backendName:"webgpu",kernelFunc:Ra},Ta=ve({opType:X.TANH}),Pa={kernelName:t.Tanh,backendName:"webgpu",kernelFunc:Ta};class Na{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,",this.shaderKey="swap"}getUserCode(){return`\n        ${g("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}class za{constructor(e){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`\n        ${g("index")} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `}}function _a(e,t){null!==t&&e.disposeData(t.dataId)}function Ea(e){let t=1;for(;t<e;)t*=2;return t}const Fa={kernelName:t.TopK,backendName:"webgpu",kernelFunc:function(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{k:a,sorted:o}=s,u=i.shape,l=u[u.length-1];if(r.shouldExecuteOnCPU([i])){const e=r.readSync(i.dataId),[t,n]=Lt(e,u,i.dtype,a,o);return[r.makeTensorInfo(t.shape,t.dtype,t.values),r.makeTensorInfo(n.shape,n.dtype,n.values)]}if(0===a)return u[u.length-1]=0,[r.makeTensorInfo(u,i.dtype,[]),r.makeTensorInfo(u,"int32",[])];if(1===l)return[i,he({attrs:{shape:u,dtype:"int32",value:0},backend:r})];const d=t.util.sizeFromShape(u)/l,h=pe({inputs:{x:i},attrs:{shape:[d,l]},backend:r}),c=Ea(a),p=Ea(l);let f=null;const m=()=>null===f?[h,h]:[h,f],g=(e,t,n)=>{const s=m(),i=new Na(n),a=[{type:"int32",data:[l]},{type:"int32",data:[null===f?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[e]},{type:"int32",data:[t]}],o=f;f=r.runWebGPUProgram(i,s,"int32",a),_a(r,o)};for(let e=1;e<c;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)g(t,n,[d,p])}for(let e=p;e>c;e/=2){const t=m(),n=new za([d,e/2]),s=[{type:"int32",data:[l]},{type:"int32",data:[null===f?1:0]},{type:"int32",data:[c]}],i=f;f=r.runWebGPUProgram(n,t,"int32",s),_a(r,i);const a=c/2,o=2*a;for(let e=a;e>=1;e/=2)g(o,e,f.shape)}let b=f;f=zn({inputs:{x:f},backend:r,attrs:{begin:0,size:[d,a]}}),_a(r,b);let x=xs({inputs:{x:h,indices:f},backend:r,attrs:{axis:1,batchDims:1}});_a(r,h);const w=u.slice(0,-1);w.push(a),b=f,f=pe({inputs:{x:f},attrs:{shape:w},backend:r}),_a(r,b);const y=x;return x=pe({inputs:{x:x},attrs:{shape:w},backend:r}),_a(r,y),[x,f]}};class Ba{constructor(e){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=P(this.outputShape),this.dispatch=$(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${g("index")} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `}}const Oa=[ge,Mt,Gt,Kt,qt,Yt,rn,sn,on,un,dn,cn,fn,gn,xn,$n,An,Tn,En,On,Mn,Gn,Xn,Ie,Jn,ir,ur,dr,cr,fr,gr,Ir,Sr,vr,$r,Pr,zr,Er,Dr,Wr,Vr,Hr,Xr,jr,Qr,es,ce,ns,us,ss,as,cs,ps,fs,gs,ws,ks,Ss,ye,vs,Yn,$s,As,Ps,Ns,_s,Fs,Os,Ws,Ds,Vs,Hs,Xs,Qs,In,Js,ei,vn,ti,ri,ii,oi,Br,ui,li,di,Dn,ci,mi,gi,wi,ki,Ii,Si,vi,Wn,$i,Ai,Pi,zi,fe,Ei,Bi,Li,Ui,Mi,Gi,Ki,qi,Yi,Zi,ea,na,sa,aa,_n,Sa,Ca,$a,la,ha,ca,ga,ba,wa,ya,Ia,ua,Lr,Aa,Pa,ma,Fa,{kernelName:t.Transform,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:i}=t,{interpolation:a,fillMode:o,fillValue:u,outputShape:l}=r,[d,h,c,p]=s.shape,[f,m]=null!=l?l:[h,c],g=new Ba([d,f,m,p]),b="nearest"===a?1:2;let x;switch(o){case"constant":default:x=1;break;case"reflect":x=2;break;case"wrap":x=3;break;case"nearest":x=4}const w=[{type:"int32",data:[b]},{type:"int32",data:[x]},{type:"float32",data:[u]}];return n.runWebGPUProgram(g,[s,i],"float32",w)}},en,{kernelName:t.Unpack,backendName:"webgpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:i}=r;i<0&&(i+=s.shape.length);const a=s,o=a.shape.length,u=s.shape[i],l=new Array(o-1);let d=0;for(let e=0;e<o;e++)e!==i&&(l[d++]=a.shape[e]);const h=[],c=new Array(o).fill(0),p=a.shape.slice();p[i]=1;const f=new Array(u);for(let e=0;e<f.length;e++){c[i]=e;const t=zn({inputs:{x:a},backend:n,attrs:{begin:c,size:p}}),r=pe({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,h.push(t)}return h.forEach((e=>n.disposeData(e.dataId))),f}},fi];for(const e of Oa)t.registerKernel(e);e.WebGPUBackend=O,e.webgpu_util=F,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=tf-backend-webgpu.es2017.min.js.map
