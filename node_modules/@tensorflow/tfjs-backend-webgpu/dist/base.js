/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import './flags_webgpu';
import { env, registerBackend } from '@tensorflow/tfjs-core';
import { WebGPUBackend } from './backend_webgpu';
import { isWebGPUSupported } from './webgpu_util';
if (isWebGPUSupported()) {
    registerBackend('webgpu', async () => {
        // Remove it once we figure out how to correctly read the tensor data
        // before the tensor is disposed in profiling mode.
        env().set('CHECK_COMPUTATION_FOR_ERRORS', false);
        const gpuDescriptor = {
            powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ?
                'low-power' :
                'high-performance'
        };
        const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);
        const deviceDescriptor = {};
        // Note that timestamp-query-inside-passes is not formally in spec as
        // timestamp within a pass is not generally supported on all the platforms.
        // More details can be found at
        // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md
        if (adapter.features.has('timestamp-query-inside-passes')) {
            deviceDescriptor.requiredFeatures =
                // tslint:disable-next-line:no-any
                ['timestamp-query-inside-passes'];
        }
        const adapterLimits = adapter.limits;
        deviceDescriptor.requiredLimits = {
            'maxComputeWorkgroupStorageSize': adapterLimits.maxComputeWorkgroupStorageSize,
            'maxComputeWorkgroupsPerDimension': adapterLimits.maxComputeWorkgroupsPerDimension,
            'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,
        };
        const device = await adapter.requestDevice(deviceDescriptor);
        const adapterInfo = await adapter.requestAdapterInfo();
        return new WebGPUBackend(device, adapterInfo);
    }, 3 /*priority*/);
}
// Export webgpu utilities
export * from './webgpu';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJncHUvc3JjL2Jhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUMsR0FBRyxFQUFFLGVBQWUsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTNELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFaEQsSUFBSSxpQkFBaUIsRUFBRSxFQUFFO0lBQ3ZCLGVBQWUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkMscUVBQXFFO1FBQ3JFLG1EQUFtRDtRQUNuRCxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsOEJBQThCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFakQsTUFBTSxhQUFhLEdBQTZCO1lBQzlDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxXQUFXLENBQUMsQ0FBQztnQkFDYixrQkFBa0I7U0FDdkIsQ0FBQztRQUVGLE1BQU0sT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEUsTUFBTSxnQkFBZ0IsR0FBd0IsRUFBRSxDQUFDO1FBRWpELHFFQUFxRTtRQUNyRSwyRUFBMkU7UUFDM0UsK0JBQStCO1FBQy9CLHdGQUF3RjtRQUN4RixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLEVBQUU7WUFDekQsZ0JBQWdCLENBQUMsZ0JBQWdCO2dCQUM3QixrQ0FBa0M7Z0JBQ2xDLENBQUMsK0JBQXNDLENBQUMsQ0FBQztTQUM5QztRQUVELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDckMsZ0JBQWdCLENBQUMsY0FBYyxHQUFHO1lBQ2hDLGdDQUFnQyxFQUM1QixhQUFhLENBQUMsOEJBQThCO1lBQ2hELGtDQUFrQyxFQUM5QixhQUFhLENBQUMsZ0NBQWdDO1lBQ2xELDZCQUE2QixFQUFFLGFBQWEsQ0FBQywyQkFBMkI7U0FDekUsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFjLE1BQU0sT0FBTyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sV0FBVyxHQUFHLE1BQU0sT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDdkQsT0FBTyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUNwQjtBQUVELDBCQUEwQjtBQUMxQixjQUFjLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0ICcuL2ZsYWdzX3dlYmdwdSc7XG5cbmltcG9ydCB7ZW52LCByZWdpc3RlckJhY2tlbmR9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5cbmltcG9ydCB7V2ViR1BVQmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kX3dlYmdwdSc7XG5pbXBvcnQge2lzV2ViR1BVU3VwcG9ydGVkfSBmcm9tICcuL3dlYmdwdV91dGlsJztcblxuaWYgKGlzV2ViR1BVU3VwcG9ydGVkKCkpIHtcbiAgcmVnaXN0ZXJCYWNrZW5kKCd3ZWJncHUnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gUmVtb3ZlIGl0IG9uY2Ugd2UgZmlndXJlIG91dCBob3cgdG8gY29ycmVjdGx5IHJlYWQgdGhlIHRlbnNvciBkYXRhXG4gICAgLy8gYmVmb3JlIHRoZSB0ZW5zb3IgaXMgZGlzcG9zZWQgaW4gcHJvZmlsaW5nIG1vZGUuXG4gICAgZW52KCkuc2V0KCdDSEVDS19DT01QVVRBVElPTl9GT1JfRVJST1JTJywgZmFsc2UpO1xuXG4gICAgY29uc3QgZ3B1RGVzY3JpcHRvcjogR1BVUmVxdWVzdEFkYXB0ZXJPcHRpb25zID0ge1xuICAgICAgcG93ZXJQcmVmZXJlbmNlOiBlbnYoKS5nZXQoJ1dFQkdQVV9VU0VfTE9XX1BPV0VSX0dQVScpID9cbiAgICAgICAgICAnbG93LXBvd2VyJyA6XG4gICAgICAgICAgJ2hpZ2gtcGVyZm9ybWFuY2UnXG4gICAgfTtcblxuICAgIGNvbnN0IGFkYXB0ZXIgPSBhd2FpdCBuYXZpZ2F0b3IuZ3B1LnJlcXVlc3RBZGFwdGVyKGdwdURlc2NyaXB0b3IpO1xuICAgIGNvbnN0IGRldmljZURlc2NyaXB0b3I6IEdQVURldmljZURlc2NyaXB0b3IgPSB7fTtcblxuICAgIC8vIE5vdGUgdGhhdCB0aW1lc3RhbXAtcXVlcnktaW5zaWRlLXBhc3NlcyBpcyBub3QgZm9ybWFsbHkgaW4gc3BlYyBhc1xuICAgIC8vIHRpbWVzdGFtcCB3aXRoaW4gYSBwYXNzIGlzIG5vdCBnZW5lcmFsbHkgc3VwcG9ydGVkIG9uIGFsbCB0aGUgcGxhdGZvcm1zLlxuICAgIC8vIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgYXRcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ3B1d2ViL2dwdXdlYi9ibG9iL21haW4vcHJvcG9zYWxzL3RpbWVzdGFtcC1xdWVyeS1pbnNpZGUtcGFzc2VzLm1kXG4gICAgaWYgKGFkYXB0ZXIuZmVhdHVyZXMuaGFzKCd0aW1lc3RhbXAtcXVlcnktaW5zaWRlLXBhc3NlcycpKSB7XG4gICAgICBkZXZpY2VEZXNjcmlwdG9yLnJlcXVpcmVkRmVhdHVyZXMgPVxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgICBbJ3RpbWVzdGFtcC1xdWVyeS1pbnNpZGUtcGFzc2VzJyBhcyBhbnldO1xuICAgIH1cblxuICAgIGNvbnN0IGFkYXB0ZXJMaW1pdHMgPSBhZGFwdGVyLmxpbWl0cztcbiAgICBkZXZpY2VEZXNjcmlwdG9yLnJlcXVpcmVkTGltaXRzID0ge1xuICAgICAgJ21heENvbXB1dGVXb3JrZ3JvdXBTdG9yYWdlU2l6ZSc6XG4gICAgICAgICAgYWRhcHRlckxpbWl0cy5tYXhDb21wdXRlV29ya2dyb3VwU3RvcmFnZVNpemUsXG4gICAgICAnbWF4Q29tcHV0ZVdvcmtncm91cHNQZXJEaW1lbnNpb24nOlxuICAgICAgICAgIGFkYXB0ZXJMaW1pdHMubWF4Q29tcHV0ZVdvcmtncm91cHNQZXJEaW1lbnNpb24sXG4gICAgICAnbWF4U3RvcmFnZUJ1ZmZlckJpbmRpbmdTaXplJzogYWRhcHRlckxpbWl0cy5tYXhTdG9yYWdlQnVmZmVyQmluZGluZ1NpemUsXG4gICAgfTtcblxuICAgIGNvbnN0IGRldmljZTogR1BVRGV2aWNlID0gYXdhaXQgYWRhcHRlci5yZXF1ZXN0RGV2aWNlKGRldmljZURlc2NyaXB0b3IpO1xuICAgIGNvbnN0IGFkYXB0ZXJJbmZvID0gYXdhaXQgYWRhcHRlci5yZXF1ZXN0QWRhcHRlckluZm8oKTtcbiAgICByZXR1cm4gbmV3IFdlYkdQVUJhY2tlbmQoZGV2aWNlLCBhZGFwdGVySW5mbyk7XG4gIH0sIDMgLypwcmlvcml0eSovKTtcbn1cblxuLy8gRXhwb3J0IHdlYmdwdSB1dGlsaXRpZXNcbmV4cG9ydCAqIGZyb20gJy4vd2ViZ3B1JztcbiJdfQ==