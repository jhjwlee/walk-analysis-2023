{"version":3,"file":"tf-backend-webgpu.es2017.min.js","sources":["../../../../tfjs-backend-webgpu/src/flags_webgpu.ts","../../../../tfjs-backend-webgpu/src/adapter_info.ts","../../../../tfjs-backend-webgpu/src/buffer_manager.ts","../../../../tfjs-backend-webgpu/src/texture_manager.ts","../../../../tfjs-backend-webgpu/src/shader_util.ts","../../../../tfjs-backend-webgpu/src/webgpu_program.ts","../../../../tfjs-backend-webgpu/src/webgpu_util.ts","../../../../tfjs-backend-webgpu/src/backend_webgpu.ts","../../../../tfjs-backend-webgpu/src/binary_op_util.ts","../../../../tfjs-backend-webgpu/src/base.ts","../../../../tfjs-backend-webgpu/src/unary_op_util.ts","../../../../tfjs-backend-webgpu/src/activation_util.ts","../../../../tfjs-backend-webgpu/src/matmul_packed_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_small_output_size_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_splitK_webgpu.ts","../../../../tfjs-backend-webgpu/src/fill_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Fill.ts","../../../../tfjs-backend-webgpu/src/kernels/Reshape.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgpu/src/binary_op_complex_webgpu.ts","../../../../tfjs-backend-webgpu/src/binary_op_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Identity.ts","../../../../tfjs-backend-webgpu/src/kernels/Complex.ts","../../../../tfjs-backend-webgpu/src/unary_op_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/kernel_funcs_utils.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgpu/src/kernels/Abs.ts","../../../../tfjs-backend-webgpu/src/kernels/Acos.ts","../../../../tfjs-backend-webgpu/src/kernels/Acosh.ts","../../../../tfjs-backend-webgpu/src/kernels/Add.ts","../../../../tfjs-backend-webgpu/src/addn_packed_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/AddN.ts","../../../../tfjs-backend-webgpu/src/transpose_shared_webgpu.ts","../../../../tfjs-backend-webgpu/src/transpose_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Transpose.ts","../../../../tfjs-backend-webgpu/src/reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgpu/src/kernels/All.ts","../../../../tfjs-backend-webgpu/src/kernels/Any.ts","../../../../tfjs-backend-webgpu/src/argminmax_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgpu/src/kernels/Asin.ts","../../../../tfjs-backend-webgpu/src/kernels/Asinh.ts","../../../../tfjs-backend-webgpu/src/kernels/Atan.ts","../../../../tfjs-backend-webgpu/src/kernels/Atan2.ts","../../../../tfjs-backend-webgpu/src/kernels/Atanh.ts","../../../../tfjs-backend-webgpu/src/pool2d_webgpu.ts","../../../../tfjs-backend-webgpu/src/pool_filtersizeone_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Max.ts","../../../../tfjs-backend-webgpu/src/kernels/Mean.ts","../../../../tfjs-backend-webgpu/src/kernels/Pool_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgpu/src/avg_pool2d_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgpu/src/slice_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Slice.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgpu/src/bincount_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Bincount.ts","../../../../tfjs-backend-webgpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/Real.ts","../../../../tfjs-backend-webgpu/src/kernels/Cast.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/int.ts","../../../../tfjs-backend-webgpu/src/kernels/Ceil.ts","../../../../tfjs-backend-webgpu/src/clip_vec4_webgpu.ts","../../../../tfjs-backend-webgpu/src/clip_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgpu/src/concat_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Imag.ts","../../../../tfjs-backend-webgpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Concat.ts","../../../../tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts","../../../../tfjs-backend-webgpu/src/conv2d_naive_webgpu.ts","../../../../tfjs-backend-webgpu/src/im2col_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_mm_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgpu/src/kernels/Cos.ts","../../../../tfjs-backend-webgpu/src/kernels/Cosh.ts","../../../../tfjs-backend-webgpu/src/crop_and_resize_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgpu/src/cum_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgpu/src/depth_to_space_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_nchw_shared_webgpu.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_vec4_webgpu.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgpu/src/diag_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Diag.ts","../../../../tfjs-backend-webgpu/src/dilation_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgpu/src/kernels/Multiply.ts","../../../../tfjs-backend-webgpu/src/kernels/Sum.ts","../../../../tfjs-backend-webgpu/src/kernels/Einsum.ts","../../../../tfjs-backend-webgpu/src/kernels/Elu.ts","../../../../tfjs-backend-webgpu/src/kernels/Equal.ts","../../../../tfjs-backend-webgpu/src/kernels/Erf.ts","../../../../tfjs-backend-webgpu/src/kernels/Exp.ts","../../../../tfjs-backend-webgpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgpu/src/kernels/Expm1.ts","../../../../tfjs-backend-webgpu/src/fft_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/FFT.ts","../../../../tfjs-backend-webgpu/src/flip_left_right_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgpu/src/kernels/Floor.ts","../../../../tfjs-backend-webgpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgpu/src/from_pixels_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgpu/src/batchnorm_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedBatchNorm.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgpu/src/gather_nd_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgpu/src/gather_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Greater.ts","../../../../tfjs-backend-webgpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/IFFT.ts","../../../../tfjs-backend-webgpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgpu/src/kernels/IsInf.ts","../../../../tfjs-backend-webgpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgpu/src/kernels/Less.ts","../../../../tfjs-backend-webgpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgpu/src/lin_space_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgpu/src/kernels/Log.ts","../../../../tfjs-backend-webgpu/src/kernels/Log1p.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgpu/src/lrn_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/LRN.ts","../../../../tfjs-backend-webgpu/src/kernels/Maximum.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgpu/src/kernels/Min.ts","../../../../tfjs-backend-webgpu/src/kernels/Minimum.ts","../../../../tfjs-backend-webgpu/src/mirror_pad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgpu/src/kernels/Mod.ts","../../../../tfjs-backend-webgpu/src/kernels/Neg.ts","../../../../tfjs-backend-webgpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgpu/src/onehot_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/OneHot.ts","../../../../tfjs-backend-webgpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgpu/src/kernels/Pack.ts","../../../../tfjs-backend-webgpu/src/pad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/PadV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Pow.ts","../../../../tfjs-backend-webgpu/src/kernels/Prelu.ts","../../../../tfjs-backend-webgpu/src/kernels/Prod.ts","../../../../tfjs-backend-webgpu/src/kernels/Range.ts","../../../../tfjs-backend-webgpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgpu/src/kernels/Relu.ts","../../../../tfjs-backend-webgpu/src/kernels/Relu6.ts","../../../../tfjs-backend-webgpu/src/resize_bilinear_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgpu/src/resize_nearest_neighbor_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgpu/src/reverse_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Reverse.ts","../../../../tfjs-backend-webgpu/src/rotate_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgpu/src/kernels/Round.ts","../../../../tfjs-backend-webgpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgpu/src/scatter_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgpu/src/search_sorted_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-webgpu/src/select_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Select.ts","../../../../tfjs-backend-webgpu/src/kernels/Selu.ts","../../../../tfjs-backend-webgpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgpu/src/kernels/Sign.ts","../../../../tfjs-backend-webgpu/src/kernels/Sin.ts","../../../../tfjs-backend-webgpu/src/kernels/Sinh.ts","../../../../tfjs-backend-webgpu/src/kernels/Sub.ts","../../../../tfjs-backend-webgpu/src/kernels/Softmax.ts","../../../../tfjs-backend-webgpu/src/kernels/Softplus.ts","../../../../tfjs-backend-webgpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgpu/src/tile_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Tile.ts","../../../../tfjs-backend-webgpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgpu/src/kernels/SplitV.ts","../../../../tfjs-backend-webgpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgpu/src/kernels/Square.ts","../../../../tfjs-backend-webgpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgpu/src/kernels/Step.ts","../../../../tfjs-backend-webgpu/src/strided_slice_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgpu/src/kernels/Tan.ts","../../../../tfjs-backend-webgpu/src/kernels/Tanh.ts","../../../../tfjs-backend-webgpu/src/top_k_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/TopK.ts","../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Unpack.ts","../../../../tfjs-backend-webgpu/src/register_all_kernels.ts","../../../../tfjs-backend-webgpu/src/kernels/Transform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst ENV = env();\n\n/** The batched dispatching calls size in the device queue. */\nENV.registerFlag('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE', () => 15);\n\n/**\n * Whether we forward execution to the CPU backend if tensors are small and\n * reside on the CPU.\n */\nENV.registerFlag('WEBGPU_CPU_FORWARD', () => true);\n\n/**\n * This flag is used to test different types of matmul programs.\n *\n * See MatMulProgramType in webgpu_util.ts for a list of available values.\n */\nENV.registerFlag('WEBGPU_MATMUL_PROGRAM_TYPE', () => -1);\n\n/**\n * Whether to use conv2dTranspose_naive which directly implement the\n * conv2dTranspose logic rather than using a matmul to simulate.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE', () => false);\n\n/**\n * Whether we use low power GPU. Otherwise, a high performance GPU will be\n * requested.\n */\nENV.registerFlag('WEBGPU_USE_LOW_POWER_GPU', () => false);\n\n/**\n * Threshold for input tensor size that determines whether WebGPU backend will\n * delegate computation to CPU.\n *\n * Default value is 1000.\n */\nENV.registerFlag('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD', () => 1000);\n\n/**\n * Whether to use a dummy canvas to make profiling tools like PIX work with\n * TFJS webgpu backend.\n */\nENV.registerFlag('WEBGPU_USE_PROFILE_TOOL', () => false);\n\n/**\n * Whether to use import API.\n */\nENV.registerFlag('WEBGPU_IMPORT_EXTERNAL_TEXTURE', () => true);\n\n/**\n * Whether to use conv2dNaive for debugging.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_DEBUG', () => false);\n\n/**\n * Threshold to increase dispatched workgroups for matmul. If too few workgroups\n * are dispatched, it means the hardware may be in low occupancy.\n * 0 means it's not set by the user. A default strategy will be applied.\n */\nENV.registerFlag('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL', () => 0);\n\n/**\n * Whether we will run im2col as a separate shader for convolution.\n */\nENV.registerFlag('WEBGPU_CONV_SEPARATE_IM2COL_SHADER', () => false);\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class AdapterInfo {\n  private vendor: string;\n  private architecture: string;\n  public intelGPUGeneration: number;\n\n  constructor(adapterInfo: GPUAdapterInfo) {\n    if (adapterInfo) {\n      this.vendor = adapterInfo.vendor;\n      this.architecture = adapterInfo.architecture;\n      this.intelGPUGeneration = this.getIntelGPUGeneration();\n    }\n  }\n\n  private getIntelGPUGeneration() {\n    if (this.isIntel()) {\n      if (this.architecture.startsWith('gen')) {\n        return Number(this.architecture.match(/\\d+/));\n      } else if (this.architecture.startsWith('xe')) {\n        return 12;\n      }\n    }\n    return 0;\n  }\n\n  isIntel(): boolean {\n    return this.vendor === 'intel';\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class BufferManager {\n  private numUsedBuffers = 0;\n  private numFreeBuffers = 0;\n  private freeBuffers: Map<string, GPUBuffer[]> = new Map();\n  private usedBuffers: Map<string, GPUBuffer[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireUploadBuffer(size: number, usage: GPUBufferUsageFlags) {\n    return this.acquireBuffer(size, usage, true);\n  }\n\n  acquireBuffer(\n      size: number, usage: GPUBufferUsageFlags, mappedAtCreation = false) {\n    const key = getBufferKey(size, usage);\n    if (!this.freeBuffers.has(key)) {\n      this.freeBuffers.set(key, []);\n    }\n\n    if (!this.usedBuffers.has(key)) {\n      this.usedBuffers.set(key, []);\n    }\n\n    this.numBytesUsed += size;\n    this.numUsedBuffers++;\n\n    if (this.freeBuffers.get(key).length > 0) {\n      this.numFreeBuffers--;\n\n      const newBuffer = this.freeBuffers.get(key).shift();\n      this.usedBuffers.get(key).push(newBuffer);\n      return newBuffer;\n    }\n\n    this.numBytesAllocated += size;\n    const newBuffer = this.device.createBuffer({size, usage, mappedAtCreation});\n    this.usedBuffers.get(key).push(newBuffer);\n\n    return newBuffer;\n  }\n\n  releaseBuffer(buffer: GPUBuffer, size: number, usage: GPUBufferUsageFlags) {\n    if (this.freeBuffers.size === 0) {\n      return;\n    }\n\n    const key = getBufferKey(size, usage);\n    if (!this.freeBuffers.has(key)) {\n      this.freeBuffers.set(key, []);\n    }\n\n    this.freeBuffers.get(key).push(buffer);\n    this.numFreeBuffers++;\n    this.numUsedBuffers--;\n\n    const bufferList = this.usedBuffers.get(key);\n    const bufferIndex = bufferList.indexOf(buffer);\n    if (bufferIndex < 0) {\n      throw new Error(\n          'Cannot release a buffer that was never provided by this ' +\n          'buffer manager');\n    }\n    bufferList.splice(bufferIndex, 1);\n    this.numBytesUsed -= size;\n  }\n\n  releaseUploadBuffer(\n      buffer: GPUBuffer, size: number, usage: GPUBufferUsageFlags) {\n    buffer.mapAsync(GPUMapMode.WRITE)\n        .then(\n            () => {\n              this.releaseBuffer(buffer, size, usage);\n            },\n            (err) => {\n                // Do nothing;\n            });\n  }\n\n  getNumUsedBuffers(): number {\n    return this.numUsedBuffers;\n  }\n\n  getNumFreeBuffers(): number {\n    return this.numFreeBuffers;\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.usedBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getBufferKey(size: number, usage: GPUBufferUsageFlags) {\n  return `${size}_${usage}`;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private freeTextures: Map<string, GPUTexture[]> = new Map();\n  private usedTextures: Map<string, GPUTexture[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireTexture(\n      width: number, height: number, format: GPUTextureFormat,\n      usage: GPUTextureUsageFlags) {\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n\n    if (!this.usedTextures.has(key)) {\n      this.usedTextures.set(key, []);\n    }\n\n    this.numBytesUsed += byteSize;\n    this.numUsedTextures++;\n\n    if (this.freeTextures.get(key).length > 0) {\n      this.numFreeTextures--;\n\n      const newTexture = this.freeTextures.get(key).shift();\n      this.usedTextures.get(key).push(newTexture);\n      return newTexture;\n    }\n\n    this.numBytesAllocated += byteSize;\n\n    const newTexture = this.device.createTexture({\n      size: [width, height],\n      format,\n      usage,\n    });\n    this.usedTextures.get(key).push(newTexture);\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: GPUTexture, width: number, height: number,\n      format: GPUTextureFormat, usage: GPUTextureUsageFlags) {\n    if (this.freeTextures.size === 0) {\n      return;\n    }\n\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n\n    this.freeTextures.get(key).push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n\n    const textureList = this.usedTextures.get(key);\n    const textureIndex = textureList.indexOf(texture);\n    if (textureIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    textureList.splice(textureIndex, 1);\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    this.numBytesUsed -= byteSize;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    this.freeTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n\n    this.usedTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n\n    this.freeTextures = new Map();\n    this.usedTextures = new Map();\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getTextureKey(\n    width: number, height: number, format: GPUTextureFormat,\n    usage: GPUTextureUsageFlags) {\n  return `${width}_${height}_${format}_${usage}`;\n}\n\nfunction getBytesPerElement(format: GPUTextureFormat) {\n  if (format === 'rgba8unorm') {\n    return 16;\n  } else {\n    throw new Error(`${format} is not supported!`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Generates WGSL that computes strides.\nexport function symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  if (Math.max(...indicesArr) > 3) {\n    throw new Error('Cannot symbolically compute strides for rank > 4 tensor.');\n  }\n\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport const atomicAddSnippet =\n    (ptr: string, v: string, type: 'int32'|'float32') => {\n      if (type === 'int32') {\n        return `atomicAdd(${ptr}, bitcast<i32>(${v}));`;\n      } else {\n        // atomicAdd only supports uint/int type. For float, we use\n        // atomicCompareExchangeWeak to simulate.\n        return `\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${v});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${ptr}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`;\n      }\n    };\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, Rank, ShapeMap, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {symbolicallyComputeStrides} from './shader_util';\n\nexport interface WebGPUProgram {\n  // Whether to use atomic built-in functions.\n  atomic?: boolean;\n  // dispatch specifies geometry of thread groups - derived from dispatchLayout.\n  dispatch: [number, number, number];\n  // dispatchLayout enumerates how tensor dimensions are distributed among\n  // dispatch x,y,z dimensions.\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  isFromPixels?: boolean;\n  isVec4?: boolean;\n  outputShape: number[];\n  // The unique key to distinguish different shader source code.\n  shaderKey: string;\n  // Whether to use output size for bounds checking.\n  size?: boolean;\n  uniforms?: string;\n  variableNames: string[];\n  // Describe each variable's type and must have one-one mapping with\n  // variableNames. If not set, all variables type will be either f32 or\n  // vec4<f32> based on isVec4 member.\n  variableTypes?: string[];\n  // workgroupSize.x * workgroupSize.y * workgroupSize.z = the number of threads\n  // in a thread group. Individual dimensions determines thread layout within\n  // the group.\n  workgroupSize: [number, number, number];\n  // Size of register cache in one dimension (assumes square cache).\n  // Each thread writes to workPerThread * workPerThread locations in the output\n  // buffer.\n  workPerThread?: number;\n  getUserCode: () => string;\n}\n\nexport const compileProgram =\n    (device: GPUDevice, program: WebGPUProgram, inputsData: InputInfo[],\n     output: TensorInfo): GPUComputePipeline => {\n      const outputData = {dtype: output.dtype, shape: output.shape};\n      const source = makeShader(inputsData, outputData, program);\n      const module = device.createShaderModule(\n          {code: source, label: program.constructor.name});\n      const pipeline = device.createComputePipeline({\n        compute: {module, entryPoint: '_start'},\n        label: program.constructor.name,\n        layout: 'auto'\n      });\n\n      return pipeline;\n    };\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'i32';\n  } else if (rank === 2) {\n    return `vec2<i32>`;\n  } else if (rank === 3) {\n    return `vec3<i32>`;\n  } else if (rank === 4) {\n    return `vec4<i32>`;\n  } else if (rank === 5) {\n    return `vec5`;\n  } else if (rank === 6) {\n    return `vec6`;\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getCoordsXYZ(index: number): string {\n  if (index === 0) {\n    return 'x';\n  } else if (index === 1) {\n    return 'y';\n  } else if (index === 2) {\n    return 'z';\n  } else if (index === 3) {\n    return 'w';\n  } else if (index === 4) {\n    return 'u';\n  } else if (index === 5) {\n    return 'v';\n  } else {\n    throw Error(`Index ${index} is not yet supported`);\n  }\n}\n\nexport function getMainHeaderString(): string;\nexport function getMainHeaderString(index: string): string;\nexport function getMainHeaderString(...params: string[]): string {\n  let snippet: string;\n  switch (params.length) {\n    case 0:\n      snippet = `\n        fn main()\n      `;\n      break;\n    case 1:\n      snippet = `\n        fn main(${params[0]} : i32)\n      `;\n      break;\n    default:\n      throw Error('Unreachable');\n  }\n  return snippet;\n}\n\nexport function getStartHeaderString(\n    useGlobalIndex: boolean, program: WebGPUProgram): string {\n  let snippet: string;\n  snippet = `\n     ${getWorkgroupSizeString(program)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${useGlobalIndex ? `main(getGlobalIndex());` : `main();`};\n      }\n    `;\n  return snippet;\n}\n\nexport function getWorkgroupSizeString(program: WebGPUProgram): string {\n  return `\n  @compute @workgroup_size(${program.workgroupSize[0]}, ${\n      program.workgroupSize[1]}, ${program.workgroupSize[2]})\n`;\n}\n\nfunction makeShader(\n    inputInfo: InputInfo[], outputData: {dtype: DataType, shape: number[]},\n    program: WebGPUProgram): string {\n  const prefixSnippets: string[] = [];\n  const flatWorkgroupSize = program.workgroupSize[0] *\n      program.workgroupSize[1] * program.workgroupSize[2];\n  prefixSnippets.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${\n      isFlatDispatch(program) ?\n          `  return i32(globalId.x);` :\n          `  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${\n              flatWorkgroupSize}u +\n                localIndex);\n        `}\n      }\n    `);\n\n  if (program.isFromPixels) {\n    prefixSnippets.push(`\n        struct Uniform {\n          size            : i32,\n          numChannels     : i32,\n          outShapeStrides : vec2<i32>,\n        };\n\n        @group(0) @binding(0) var<storage, read_write> result: array<${\n        mapToWgslTypes(outputData.dtype, program.isVec4)}>;\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);\n    const useGlobalIndex = isFlatDispatchLayout(program);\n    return [\n      commonSnippet,\n      prefixSnippets.join('\\n'),\n      getCoordsFromIndexSnippet(outputData.shape),\n      program.getUserCode(),\n      getStartHeaderString(useGlobalIndex, program),\n    ].join('\\n');\n  }\n\n  let uniformDeclaration = 'struct Uniforms { NAN : f32, INFINITY : f32, ';\n  program.variableNames.forEach((x, i) => {\n    const perDataType = getCoordsDataType(inputInfo[i].shape.length);\n    uniformDeclaration +=\n        `${x.charAt(0).toLowerCase() + x.slice(1)}Shape : ${perDataType}, `;\n  });\n  const outputDataType = getCoordsDataType(outputData.shape.length);\n  uniformDeclaration += `outShape : ${outputDataType}, `;\n  const stridesLength = outputData.shape.length - 1;\n  const stridesDataType = getCoordsDataType(stridesLength);\n  uniformDeclaration += `\n         outShapeStrides: ${stridesDataType}, `;\n\n  if (program.size) {\n    uniformDeclaration += 'size : i32, ';\n  }\n\n  if (program.uniforms) {\n    uniformDeclaration += program.uniforms;\n  }\n  uniformDeclaration += '};';\n  uniformDeclaration = insertAlignment(uniformDeclaration);\n\n  prefixSnippets.push(uniformDeclaration);\n\n  // Output buffer.\n  if (program.atomic) {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    `);\n  } else {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${\n        mapToWgslTypes(outputData.dtype, program.isVec4)}>;\n    `);\n  }\n  program.variableNames.forEach((x, i) => {\n    prefixSnippets.push(`\n      @group(0) @binding(${1 + i}) var<storage, read> ${x}: array<${\n        program.variableTypes ?\n            program.variableTypes[i] :\n            mapToWgslTypes(inputInfo[i].dtype, program.isVec4)}>;\n        `);\n  });\n\n  if (uniformDeclaration !== '') {\n    prefixSnippets.push(`\n      @group(0) @binding(${\n        1 + program.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);\n  }\n\n  const coordsSnippet =\n      getOutputCoordsSnippet(outputData.shape, program.dispatchLayout);\n\n  const sources = [\n    commonSnippet, prefixSnippets.join('\\n') + isInfSnippet,\n    getCoordsFromIndexSnippet(outputData.shape), coordsSnippet,\n    getOutputIndexFromCoordsSnippet(outputData.shape.length)\n  ];\n  if (!program.atomic) {\n    sources.push(\n        setOutputSnippet(outputData.shape, outputData.dtype, program.isVec4));\n  }\n\n  const inputSnippet =\n      inputInfo\n          .map(\n              (x, i) => getInputSnippet(\n                  x, outputData.shape,\n                  program.variableTypes ?\n                      (program.variableTypes[i] === 'vec4<f32>') :\n                      program.isVec4,\n                  program.dispatchLayout.x.length === outputData.shape.length))\n          .join('\\n');\n  sources.push(inputSnippet);\n  sources.push(program.getUserCode());\n  const useGlobalIndex = isFlatDispatchLayout(program);\n  sources.push(getStartHeaderString(useGlobalIndex, program));\n  const source = sources.join('\\n');\n  return source;\n}\n\nexport function makeShaderKey<R extends Rank>(\n    program: WebGPUProgram, shapes: Array<ShapeMap[R]>, inputsData: InputInfo[],\n    output: TensorInfo): string {\n  let key = program.shaderKey;\n  if (program.isFromPixels) {\n    return key;\n  }\n\n  const types = inputsData.map(d => d.dtype).concat(output.dtype);\n  const broadcastDims =\n      inputsData.map(d => backend_util.getBroadcastDims(d.shape, output.shape));\n  const inputShapesEqualsOutShape =\n      inputsData.map(d => util.arraysEqual(d.shape, output.shape)).join('_');\n  const broadcastDimsKey = broadcastDims.map(d => d.join('_')).join(';');\n\n  const flatDispatchString = isFlatDispatch(program) ? 'flatDispatch' : '';\n\n  key += '_' + (program.workgroupSize ? program.workgroupSize.join(',') : '') +\n      shapes.map(shape => shape.length).join(',') + types.join(',') +\n      program.variableNames.join(',') + broadcastDimsKey +\n      inputShapesEqualsOutShape + flatDispatchString;\n\n  return key;\n}\n\nconst commonSnippet = `\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  fn idiv(a: i32, b: i32, sign: f32) -> i32 {\n    var res: i32 = a / b;\n    let modulo: i32 = a % b;\n    if (sign < 0. && modulo != 0) {\n      res = res - 1;\n    }\n    return res;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n`;\n\nconst isInfSnippet = `\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n`;\n\ntype InputInfo = {\n  dtype: DataType; shape: number[]; name: string;\n};\nexport type WGSLDataType = 'f32'|'i32'|'vec4<f32>'|'vec4<i32>'|'vec4<bool>';\n\n/**\n * Derives logical coordinates from a flat index. Performs integer division\n * with each stride and decrements the index until the index equals the final\n * dimension coordinate.\n */\nfunction getCoordsFromIndexSnippet(shape: number[]): string {\n  const rank = shape.length;\n\n  if (rank <= 1) {\n    return `fn getCoordsFromIndex(index : i32) -> i32 { return index; }`;\n  }\n\n  const strides = util.computeStrides(shape);\n  const dtype = getCoordsDataType(rank);\n\n  const coords: string[] = [];\n  for (let i = 0; i < rank; i++) {\n    coords.push(`d${i}`);\n  }\n\n  if (strides.length === 1) {\n    return `    fn getCoordsFromIndex(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;\n      return vec2<i32>(d0, d1);\n    }`;\n  }\n  let snippet;\n  snippet = 'var index2 = index;' +\n      strides\n          .map((_, i) => {\n            const line1 =\n                `let ${coords[i]} = index2 / uniforms.outShapeStrides.${\n                    getCoordsXYZ(i)}`;\n            const line2 = i === strides.length - 1 ?\n                `let ${coords[i + 1]} = index2 - ${\n                    coords[i]} * uniforms.outShapeStrides.${getCoordsXYZ(i)}` :\n                `index2 = index2 - ${coords[i]} * uniforms.outShapeStrides.${\n                    getCoordsXYZ(i)}`;\n            return `${line1}; ${line2};`;\n          })\n          .join('');\n\n  return `\n    fn getCoordsFromIndex(index : i32) -> ${dtype} {\n      ${snippet}\n      return ${dtype}(${coords.join(',')});\n    }\n  `;\n}\n\nfunction getInputAtCoordsSnippet(\n    inputInfo: InputInfo, isVec4: boolean): string {\n  const texName = inputInfo.name;\n  const rank = inputInfo.shape.length;\n  const type = getCoordsDataType(rank);\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, rank);\n  const inputs = dims.map(d => `${d} : i32`).join(', ');\n\n  if (rank < 1) {\n    if (isVec4) {\n      return `\n        fn ${funcName}() -> vec4<f32> {\n          return vec4<f32>(${texName}[0]);\n        }\n      `;\n    }\n\n    return `\n      fn ${funcName}() ->f32 {\n        return f32(${texName}[0]);\n      }\n    `;\n  }\n\n  const shapeStr =\n      `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  let rankStr = `${rank}D`;\n  if (rank === 0) {\n    rankStr = '1D';\n  }\n\n  if (isVec4) {\n    return `\n      fn ${funcName}(${inputs}) -> vec4<f32> {\n        return vec4<f32>(${texName}[getIndexFromCoords${rankStr}(${type}(${\n        dims.join(',')}),\n          ${shapeStr}) / 4]);\n      }\n      `;\n  }\n\n  return `\n    fn ${funcName}(${inputs}) -> f32 {\n      return f32(${texName}[getIndexFromCoords${rankStr}(${type}(${\n      dims.join(',')}),\n        ${shapeStr})]);\n    }\n   `;\n}\n\nfunction getInputByOutputSnippet(\n    inputInfo: InputInfo, outShape: number[], isVec4: boolean,\n    isFlatDispatchLayout: boolean): string {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const funcName = 'get' + texFuncSnippet + 'ByOutput';\n\n  const inRank = inputInfo.shape.length;\n  const outRank = outShape.length;\n  const type = getCoordsDataType(outRank);\n\n  // If the inShape equals the outShape and the dispatch layout is flat, we can\n  // directly use |gl_GlobalInvocationID.x| as the index and don't need coords\n  // conversion between these two shapes.\n  if (util.arraysEqual(inputInfo.shape, outShape) && isFlatDispatchLayout) {\n    if (isVec4) {\n      return `\n      fn ${funcName}Index(globalIndex : i32) -> vec4<f32> {\n        return vec4<f32>(${texName}[globalIndex]);\n      }\n\n      fn ${funcName}Coords(coords : ${type}) -> vec4<f32> {\n        return vec4<f32>(${texName}[${\n          outRank > 1 ? 'getOutputIndexFromCoords(coords)' : 'coords'} / 4]);\n      }\n      `;\n    } else {\n      return `\n    fn ${funcName}Index(globalIndex : i32) -> f32 {\n      return f32(${texName}[globalIndex]);\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> f32 {\n      return f32(${texName}[${\n          outRank > 1 ? 'getOutputIndexFromCoords(coords)' : 'coords'}]);\n    }\n    `;\n    }\n  }\n\n  const broadcastDims =\n      backend_util.getBroadcastDims(inputInfo.shape, outShape);\n  const rankDiff = outRank - inRank;\n\n  let coordsSnippet = '';\n\n  if (inRank === 0) {\n    if (isVec4) {\n      return `\n    fn ${funcName}Index(globalIndex : i32) -> vec4<f32> {\n      return get${texFuncSnippet}();\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> vec4<f32> {\n      return get${texFuncSnippet}();\n    }\n  `;\n    }\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> f32{\n      return get${texFuncSnippet}();\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> f32{\n      return get${texFuncSnippet}();\n    }\n  `;\n  } else {\n    if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet =\n          broadcastDims.map(d => `coords.${getCoordsXYZ(d + rankDiff)} = 0;`)\n              .join('\\n');\n    }\n  }\n\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    if (outRank > 1) {\n      const coordsType = getCoordsDataType(inRank);\n      const coordsValues =\n          inputInfo.shape.map((s, i) => `coords.${getCoordsXYZ(i + rankDiff)}`)\n              .join(', ');\n      unpackedCoordsSnippet = `${coordsType}(${coordsValues})`;\n    } else {\n      unpackedCoordsSnippet = 'coords';\n    }\n  }\n\n  const shapeStr =\n      `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  const rankStr = `${inRank}D`;\n  if (isVec4) {\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> vec4<f32> {\n      var coords = getCoordsFromIndex(globalIndex);\n      ${coordsSnippet}\n      return ${texName}[getIndexFromCoords${rankStr}(${\n        unpackedCoordsSnippet}, ${shapeStr}) / 4];\n    }\n\n    fn ${funcName}Coords(coordsIn : ${type}) -> vec4<f32> {\n      var coords = coordsIn;\n      ${coordsSnippet}\n      return ${texName}[getIndexFromCoords${rankStr}(${\n        unpackedCoordsSnippet}, ${shapeStr}) / 4];\n    }\n  `;\n  }\n\n  return `\n  fn ${funcName}Index(globalIndex : i32) -> f32 {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${coordsSnippet}\n    return f32(${texName}[getIndexFromCoords${rankStr}(${\n      unpackedCoordsSnippet}, ${shapeStr})]);\n  }\n\n  fn ${funcName}Coords(coordsIn : ${type}) -> f32 {\n    var coords = coordsIn;\n    ${coordsSnippet}\n    return f32(${texName}[getIndexFromCoords${rankStr}(${\n      unpackedCoordsSnippet}, ${shapeStr})]);\n  }\n`;\n}\n\nfunction getInputSnippet(\n    inputInfo: InputInfo, outShape: number[], isVec4: boolean,\n    isFlatDispatchLayout: boolean): string {\n  let res = getInputAtCoordsSnippet(inputInfo, isVec4);\n\n  const inShape = inputInfo.shape;\n  if (inShape.length <= outShape.length) {\n    res += getInputByOutputSnippet(\n        inputInfo, outShape, isVec4, isFlatDispatchLayout);\n  }\n\n  return res;\n}\n\n/**\n * Generates getOutputCoords() function that computes output coordinates from\n * dispatch geometry to reduce arithmetic.\n */\nfunction getOutputCoordsSnippet(\n    outShape: number[],\n    dispatchLayout: {x: number[], y?: number[], z?: number[]}): string {\n  const {x, y = [], z = []} = dispatchLayout;\n\n  const outRank = outShape.length;\n  const rank = x.length + y.length + z.length;\n  // getOutputCoords is only meaningful when the output rank is same with\n  // dispatch layout rank.\n  if (rank !== outRank) {\n    return '';\n  }\n\n  if (x.length === outRank) {\n    const dtype = getCoordsDataType(outRank);\n    const snippet = `fn getOutputCoords() -> ${dtype}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `;\n    return snippet;\n  }\n\n  let gatherDimensionsStr = '';\n  const dims = [x, y, z];\n\n  for (let i = 0; i < dims.length; i++) {\n    const arr = dims[i];\n\n    if (arr.length === 0) {\n      continue;\n    }\n\n    if (arr.length === 1) {\n      gatherDimensionsStr += `let d${arr[0]} = i32(globalId[${i}]);`;\n    } else {\n      const strides = symbolicallyComputeStrides(arr, 'uniforms.outShape');\n      gatherDimensionsStr += `var index${i} = i32(globalId[${i}]);`;\n      for (let j = 0; j < strides.length; j++) {\n        gatherDimensionsStr += `let d${arr[j]} = index${i} / ${strides[j]};`;\n\n        if (j === strides.length - 1) {\n          gatherDimensionsStr += `let d${arr[j + 1]} = ` +\n              `index${i} - d${arr[j]} * ${strides[j]};`;\n        } else {\n          gatherDimensionsStr +=\n              `index${i} = index${i} - d${arr[j]} * ${strides[j]};`;\n        }\n      }\n    }\n  }\n\n  const dimensions = [];\n  for (let i = 0; i < rank; i++) {\n    dimensions.push(`d${i}`);\n  }\n\n  const dtype = getCoordsDataType(rank);\n  let snippet = `fn getOutputCoords() -> ${dtype} {\n  ${gatherDimensionsStr}\n`;\n  if (dimensions.length === 0) {\n    snippet += `return ${dtype}(0); }`;\n  } else {\n    snippet += `return ${dtype}(${dimensions.join(',')}); }`;\n  }\n\n  return snippet;\n}\n\nfunction getOutputIndexFromCoordsSnippet(outRank: number) {\n  let snippet = '';\n  switch (outRank) {\n    case 0:\n    case 1:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        `;\n      break;\n    case 2:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        `;\n      break;\n    case 3:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        `;\n      break;\n    case 4:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        `;\n      break;\n    case 5:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        `;\n      break;\n    case 6:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        `;\n      break;\n    default:\n      util.assert(false, () => `Unsupported ${outRank}D shape`);\n      break;\n  }\n  return snippet;\n}\n\nfunction isFlatDispatch(program: WebGPUProgram): boolean {\n  return program.dispatch[1] === 1 && program.dispatch[2] === 1;\n}\n\nexport function mapToWgslTypes(type: DataType, isVec4: boolean): WGSLDataType|\n    DataType {\n  if (type === 'float32') {\n    return isVec4 ? 'vec4<f32>' : 'f32';\n  } else if (type === 'int32') {\n    return isVec4 ? 'vec4<i32>' : 'i32';\n  } else if (type === 'bool') {\n    // Type 'bool' cannot be used in storage class,\n    // https://www.w3.org/TR/WGSL/#host-shareable-types.\n    return isVec4 ? 'vec4<i32>' : 'i32';\n  }\n\n  return type;\n}\n\nfunction setOutputSnippet(\n    outShape: number[], outBufferType: DataType, isVec4: boolean): string {\n  const outRank = outShape.length;\n  const wgslType = mapToWgslTypes(outBufferType, isVec4);\n  let snippet;\n  if (isVec4) {\n    snippet = `fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {\n      result[flatIndex] = ${wgslType}(value);\n    }\n    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {\n      result[flatIndex] = ${wgslType}(value);\n    }`;\n  } else {\n    snippet = `fn setOutputAtIndex(flatIndex : i32, value : f32) {\n      result[flatIndex] = ${wgslType}(value);\n    }\n    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {\n      result[flatIndex] = ${wgslType}(value);\n    }`;\n  }\n  if (outRank >= 2) {\n    const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, outRank);\n    const type = getCoordsDataType(outRank);\n\n    if (isVec4) {\n      snippet += `\n      fn setOutputAtCoords(${\n          dims.map(d => `${d} : i32`).join(', ')}, value : vec4<f32>) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndex(flatIndex / 4, value);\n      }\n      fn setOutputAtCoordsI32(${\n          dims.map(d => `${d} : i32`).join(', ')}, value : vec4<i32>) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndexI32(flatIndex / 4, value);\n      }\n    `;\n    } else {\n      snippet += `\n      fn setOutputAtCoords(${\n          dims.map(d => `${d} : i32`).join(', ')}, value : f32) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndex(flatIndex, value);\n      }\n      fn setOutputAtCoordsI32(${\n          dims.map(d => `${d} : i32`).join(', ')}, value : i32) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndexI32(flatIndex, value);\n      }\n    `;\n    }\n  }\n\n  return snippet;\n}\n\nfunction insertAlignment(uniformShader: string) {\n  // insert alignment when current pattern is vec5 or vec6\n  const curInsertRe = /(\\w+)\\s*:\\s*vec(5|6)/g;\n  uniformShader = uniformShader.replace(curInsertRe, (match) => {\n    return '@align(16) ' + match;\n  });\n\n  // insert alignment when previous pattern is vec5 or vec6\n  const preInsertRe = /vec(5|6)\\s*,\\s*(\\w+)/g;\n  uniformShader = uniformShader.replace(preInsertRe, (_, p1, p2) => {\n    return `vec${p1}, @align(16) ${p2}`;\n  });\n  return uniformShader;\n}\nfunction isFlatDispatchLayout(program: WebGPUProgram): boolean {\n  if (program.dispatchLayout.hasOwnProperty('y') &&\n      program.dispatchLayout.y.length !== 0) {\n    return false;\n  }\n  if (program.dispatchLayout.hasOwnProperty('z') &&\n      program.dispatchLayout.z.length !== 0) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nconst arrayProduct = (arr: number[]) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nexport function tilesFitEvenlyIntoShape(\n    tileSize: number[], shape: number[]): boolean {\n  if (tileSize.length !== shape.length) {\n    throw new Error(\n        `Cannot compute whether rank ${tileSize.length}` +\n        ` tiles fit evenly into rank ${shape.length} shape` +\n        ` - ranks must match.`);\n  }\n  return shape.every(\n      (dim: number, dimIdx: number) => dim % tileSize[dimIdx] === 0);\n}\n\n// Computes dispatch geometry based on layout of output dimensions and\n// workgroupSize.\nexport function computeDispatch(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    workgroupSize: [number, number, number] = [1, 1, 1],\n    elementsPerThread: [number, number, number] =\n        [1, 1, 1]): [number, number, number] {\n  const [dispatchX, dispatchY, dispatchZ] = [\n    Math.ceil(\n        arrayProduct(layout.x.map(d => outputShape[d])) /\n        (workgroupSize[0] * elementsPerThread[0])),\n    layout.y ? Math.ceil(\n                   arrayProduct(layout.y.map(d => outputShape[d])) /\n                   (workgroupSize[1] * elementsPerThread[1])) :\n               1,\n    layout.z ? Math.ceil(\n                   arrayProduct(layout.z.map(d => outputShape[d])) /\n                   (workgroupSize[2] * elementsPerThread[2])) :\n               1\n  ];\n  return [dispatchX, dispatchY, dispatchZ];\n}\n\nexport type WorkgroupInfo = {\n  workgroupSize: [number, number, number],\n  elementsPerThread: [number, number, number],\n};\n\nexport function computeWorkgroupInfoForMatMul(\n    dimAOuter: number, dimInner: number, dimBOuter: number,\n    transposeA = false): WorkgroupInfo {\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the input shapes to improve the EU occupancy.\n  // TODO: WebGPU limits the maximum allowed shared memory size as 16K. To make\n  // sure it doesn't exceed this limitations. Temporarily reduce the work group\n  // size to [8, 8, 1] and the work per thread size is [4, 4, 1]. But we should\n  // revisit it and find the balance between work group size and work per thread\n  // size.\n  const workgroupSize: [number, number, number] = [8, 8, 1];\n  const elementsPerThread: [number, number, number] = [4, 4, 1];\n\n  if (!transposeA) {\n    if (dimAOuter <= 8) {\n      elementsPerThread[1] = 1;\n    }\n\n    if (dimInner <= 16 && dimBOuter <= 16) {\n      workgroupSize[0] = 4;\n    }\n  }\n\n  return {workgroupSize, elementsPerThread};\n}\n\nexport function computeWorkgroupSizeForConv2d(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    isVec4 = false): [number, number, number] {\n  if (isVec4) {\n    return [8, 8, 1];\n  }\n\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the output shape. For example, when one dimension is smaller\n  // than 4, it will be wasteful if we assign a larger size for this dimension,\n  // which results lots of threads doing useless work and reduces parallelism\n  // of hardware threads. But it is always a balance between work group size\n  // and shared memory. If one dimension is too small, such as 1, shared memory\n  // will won't be fully utilized.\n  if (dim0 <= 4) {\n    return [4, 16, 1];\n  }\n  if (dim1 <= 4) {\n    return [16, 4, 1];\n  }\n\n  return [16, 16, 1];\n}\n\nexport function computeWorkPerThreadForConv2d(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    isVec4 = false): [number, number, number] {\n  if (isVec4) {\n    return [4, 4, 1];\n  }\n\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // The following conditions correspond to the values set in\n  // computeWorkgroupSizeForConv2d.\n  if (dim0 <= 4) {\n    return [1, 2, 1];\n  }\n  if (dim1 <= 4) {\n    return [2, 1, 1];\n  }\n\n  return [2, 2, 1];\n}\n\nexport function flatDispatchLayout(shape: number[]) {\n  return {x: shape.map((d, i) => i)};\n}\n\nexport function GPUBytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32' || dtype === 'bool' ||\n      dtype === 'string') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function isWebGPUSupported(): boolean {\n  return ((typeof window !== 'undefined') ||\n          //@ts-ignore\n          (typeof WorkerGlobalScope !== 'undefined')) &&\n      !!navigator.gpu;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGPU backend.');\n    }\n  });\n}\n\nexport enum MatMulProgramType {\n  MatMulReduceProgram,\n  MatMulSplitKProgram,\n  MatMulSmallOutputSizeProgram,\n  MatMulPackedProgram,\n  MatMulMax\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {backend_util, BackendValues, buffer, DataStorage, DataType, engine, env, GPUData, KernelBackend, Rank, RecursiveArray, ShapeMap, Tensor, TensorBuffer, TensorInfo, TimingInfo, TypedArray, util, WebGPUData} from '@tensorflow/tfjs-core';\n\nimport {AdapterInfo} from './adapter_info';\nimport {BufferManager} from './buffer_manager';\nimport {TextureManager} from './texture_manager';\nimport * as webgpu_program from './webgpu_program';\nimport * as webgpu_util from './webgpu_util';\n\nexport interface WebGPUMemoryInfo extends backend_util.MemoryInfo {\n  numBytesInGPU: number;\n  numBytesAllocatedInGPU: number;\n  unreliable: boolean;\n}\n\nexport type BufferInfo = {\n  size: number,\n  usage: GPUBufferUsageFlags,\n  buffer: GPUBuffer\n};\n\nexport type TextureInfo = {\n  width: number,\n  height: number,\n  format: GPUTextureFormat,\n  usage: GPUTextureUsageFlags,\n  texture: GPUTexture|GPUExternalTexture\n};\n\ntype TensorData = {\n  values: BackendValues,\n  dtype: DataType,\n  shape: number[],\n  refCount: number,\n  resourceInfo?: BufferInfo|TextureInfo,\n  // external is true means we use the resource provided by users directly\n  // (without a copy), so users should be responsible for its release.\n  external?: boolean,\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo}\n};\n\ninterface DataId {}\n\nexport type WebGPUKernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<WebGPUKernelInfo>|WebGPUKernelInfo;\n\nexport interface WebGPUTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\ntype ProgramUniform = Array<{type: string; data: number[]}>;\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Reshape dispatch, not to exceed device limits.\nconst reshapeDispatch =\n    (device: GPUDevice,\n     program: webgpu_program.WebGPUProgram): [number, number, number] => {\n      const MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE =\n          device.limits.maxComputeWorkgroupsPerDimension;\n      const layout = program['dispatchLayout'];\n      const dispatch = program['dispatch'];\n      if (dispatch.every((d) => d <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE)) {\n        return dispatch;\n      }\n\n      util.assert(\n          dispatch[0] > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE &&\n              layout.y === undefined && layout.z === undefined,\n          () => 'Dispatch size exceeds WebGPU limits in Y or Z dimension.');\n\n      let dispatchAverage = Math.ceil(Math.sqrt(dispatch[0]));\n      if (dispatchAverage > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE) {\n        dispatchAverage = Math.ceil(Math.cbrt(dispatch[0]));\n        util.assert(\n            dispatchAverage <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE,\n            () => 'Total dispatch size exceeds WebGPU maximum.');\n        return [dispatchAverage, dispatchAverage, dispatchAverage];\n      } else {\n        return [dispatchAverage, dispatchAverage, 1];\n      }\n    };\n\nexport class WebGPUBackend extends KernelBackend {\n  bufferManager: BufferManager;\n  adapterInfo: AdapterInfo;\n  device: GPUDevice;\n  queue: GPUQueue;\n  tensorMap: DataStorage<TensorData>;\n  textureManager: TextureManager;\n  thresholdToIncreaseWorkgroups: number;\n\n  private activeTimers: TimerNode[];\n  private currentCommandEncoder: GPUCommandEncoder;\n  private currentComputePass: GPUComputePassEncoder;\n  private commandQueueOwnedIds = new WeakSet<DataId>();\n  private dispatchNumberInEncoder = 0;\n  private disposed = false;\n  private downloadWaitMs = 0;\n  private dummyCanvas: HTMLCanvasElement;\n  private dummyContext: GPUCanvasContext;\n  private tensorDataPendingDisposal: DataId[] = [];\n  private static nextDataId = 0;\n  private pipelineCache: {[key: string]: GPUComputePipeline};\n  private programTimersStack: TimerNode[];\n  private querySet: GPUQuerySet;\n  private stagingPendingDisposal: BufferInfo[] = [];\n  private supportTimeQuery: boolean;\n  private uniformPendingDisposal: BufferInfo[] = [];\n  private uploadWaitMs = 0;\n\n  private nextDataId(): number {\n    return WebGPUBackend.nextDataId++;\n  }\n\n  constructor(device: GPUDevice, adapterInfo?: GPUAdapterInfo) {\n    super();\n    if (!webgpu_util.isWebGPUSupported()) {\n      throw new Error('WebGPU is not supported on this device');\n    }\n    this.pipelineCache = {};\n    this.device = device;\n    this.queue = device.queue;\n    this.currentCommandEncoder = null;\n    this.currentComputePass = null;\n    this.supportTimeQuery =\n        device.features.has('timestamp-query-inside-passes');\n    this.adapterInfo = new AdapterInfo(adapterInfo);\n    this.thresholdToIncreaseWorkgroups =\n        this.adapterInfo.intelGPUGeneration >= 12 ? 16 : 8;\n\n    this.bufferManager = new BufferManager(this.device);\n    this.textureManager = new TextureManager(this.device);\n    this.tensorMap = new DataStorage(this, engine());\n    if (this.supportTimeQuery) {\n      this.querySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n\n    // Profiling tools like PIX needs this dummy canvas to\n    // trigger capturing a frame.\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      this.dummyCanvas = document.createElement('canvas');\n      this.dummyCanvas.width = 1;\n      this.dummyCanvas.height = 1;\n\n      this.dummyContext = this.dummyCanvas.getContext('webgpu');\n      this.dummyContext.configure({\n        device,\n        format: 'bgra8unorm',\n      });\n\n      document.body.appendChild(this.dummyCanvas);\n    }\n  }\n\n  override floatPrecision(): 32 {\n    return 32;\n  }\n\n  defaultGpuBufferUsage(): number {\n    return GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC |\n        GPUBufferUsage.COPY_DST;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.tensorDataPendingDisposal.indexOf(dataId) >= 0) {\n      return false;\n    }\n    if (!this.tensorMap.has(dataId)) {\n      return true;\n    }\n\n    const tensorData = this.tensorMap.get(dataId);\n    this.decRef(dataId);\n    if (!force && tensorData.refCount > 0) {\n      return false;\n    }\n\n    // complex is never in commandQueueOwnedIds\n    if (this.commandQueueOwnedIds.has(dataId)) {\n      this.tensorDataPendingDisposal.push(dataId);\n      return false;\n    }\n\n    const {complexTensorInfos} = this.tensorMap.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.releaseResource(dataId);\n    this.tensorMap.delete(dataId);\n\n    return true;\n  }\n\n  override memory(): WebGPUMemoryInfo {\n    return {\n      numBytesInGPU: this.bufferManager.numBytesUsed,\n      numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated,\n      unreliable: false\n    } as WebGPUMemoryInfo;\n  }\n\n  releaseResource(dataId: DataId) {\n    const tensorData = this.tensorMap.get(dataId);\n    if (!tensorData || !tensorData.resourceInfo) {\n      return;\n    }\n    // If tensor's resource is from external, do not release.\n    if (tensorData.external) {\n      tensorData.resourceInfo = null;\n      return;\n    }\n    if ('texture' in tensorData.resourceInfo) {\n      const textureInfo = tensorData.resourceInfo;\n      if (textureInfo.texture instanceof GPUTexture) {\n        this.textureManager.releaseTexture(\n            textureInfo.texture, textureInfo.width, textureInfo.height,\n            textureInfo.format, textureInfo.usage);\n      }\n      textureInfo.texture = null;\n    } else {\n      const bufferInfo = tensorData.resourceInfo;\n      this.bufferManager.releaseBuffer(\n          bufferInfo.buffer, bufferInfo.size, bufferInfo.usage);\n      bufferInfo.buffer = null;\n    }\n    tensorData.resourceInfo = null;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  override incRef(dataId: DataId): void {\n    const tensorData = this.tensorMap.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.tensorMap.set(dataId, {dtype, shape, values, refCount: 1});\n    return dataId;\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.tensorMap.set(dataId, {dtype, shape, values, refCount});\n  }\n\n  submitQueue() {\n    this.ensureComputePassEnded();\n    this.queue.submit([this.currentCommandEncoder.finish()]);\n    this.currentCommandEncoder = null;\n    this.dispatchNumberInEncoder = 0;\n\n    this.commandQueueOwnedIds = new WeakSet<DataId>();\n\n    this.tensorDataPendingDisposal.forEach(d => {\n      this.releaseResource(d);\n      this.tensorMap.delete(d);\n    });\n    this.uniformPendingDisposal.forEach(\n        d => this.bufferManager.releaseBuffer(d.buffer, d.size, d.usage));\n    this.stagingPendingDisposal.forEach(\n        d => this.bufferManager.releaseUploadBuffer(d.buffer, d.size, d.usage));\n\n    this.tensorDataPendingDisposal = [];\n    this.uniformPendingDisposal = [];\n    this.stagingPendingDisposal = [];\n  }\n\n  ensureCommandEncoderReady() {\n    if (!this.currentCommandEncoder) {\n      this.currentCommandEncoder = this.device.createCommandEncoder();\n    }\n  }\n\n  ensureComputePassEnded() {\n    if (this.currentComputePass) {\n      this.currentComputePass.end();\n      this.currentComputePass = null;\n    }\n  }\n\n  getComputePass() {\n    if (!this.currentComputePass) {\n      this.currentComputePass = this.currentCommandEncoder.beginComputePass();\n    }\n    return this.currentComputePass;\n  }\n\n  public async getBufferData(buffer: GPUBuffer, size: number):\n      Promise<ArrayBuffer> {\n    const staging = this.bufferManager.acquireBuffer(\n        size, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);\n    this.ensureCommandEncoderReady();\n    this.ensureComputePassEnded();\n    this.currentCommandEncoder.copyBufferToBuffer(buffer, 0, staging, 0, size);\n    this.submitQueue();\n\n    await staging.mapAsync(GPUMapMode.READ);\n    const values = staging.getMappedRange().slice(0);\n\n    staging.unmap();\n    if (staging != null) {\n      this.bufferManager.releaseBuffer(\n          staging, size, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);\n    }\n\n    // Need to get texture from swapChain to enable profiling tool\n    // to capture a frame\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      util.assert(\n          this.dummyContext !== undefined,\n          () => `Fail to get context for profiling tool`);\n      this.dummyContext.getCurrentTexture();\n    }\n\n    return values;\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, data: BackendValues):\n      BackendValues {\n    const tensorData = this.tensorMap.get(dataId);\n    this.releaseResource(dataId);\n    tensorData.values = data;\n    return tensorData.values;\n  }\n\n  // TODO: Remove once this is fixed:\n  // https://github.com/tensorflow/tfjs/issues/1595\n  override readSync(dataId: object): BackendValues {\n    const tensorData = this.tensorMap.get(dataId);\n    const {values} = tensorData;\n\n    if (values == null) {\n      throw new Error(\n          'WebGPU readSync is only available for CPU-resident tensors.');\n    }\n\n    return values;\n  }\n\n  override async read(dataId: object): Promise<BackendValues> {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(`Tensor ${dataId} was not registered!`);\n    }\n    const tensorData = this.tensorMap.get(dataId);\n\n    const {values} = tensorData;\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId, values);\n    }\n\n    // Download the values from the GPU.\n    let vals: BackendValues;\n    if (tensorData.dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(tensorData.complexTensorInfos.real.dataId),\n        this.read(tensorData.complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else {\n      const bufferInfo = tensorData.resourceInfo as BufferInfo;\n      const data = await this.getBufferData(bufferInfo.buffer, bufferInfo.size);\n      vals = util.convertBackendValuesAndArrayBuffer(data, tensorData.dtype);\n    }\n    this.convertAndCacheOnCPU(dataId, vals);\n    return vals;\n  }\n\n  // The source GPUBuffer and destination GPUBuffer have the same size and\n  // usage.\n  private copyBuffer(srcBuffer: GPUBuffer, size: number, usage: number) {\n    const dstBuffer = this.bufferManager.acquireBuffer(size, usage);\n    this.ensureCommandEncoderReady();\n    this.ensureComputePassEnded();\n    this.currentCommandEncoder.copyBufferToBuffer(\n        srcBuffer, 0, dstBuffer, 0, size);\n    this.submitQueue();\n    return dstBuffer;\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGPU buffer.\n   */\n  override createTensorFromGPUData(\n      values: WebGPUData, shape: number[], dtype: DataType): Tensor {\n    let buffer = values.buffer;\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. `);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.tensorMap.set(\n        dataId,\n        {dtype, shape, values: null, refCount: 1, external: values.zeroCopy});\n    const tensorData = this.tensorMap.get(dataId);\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) *\n        util.sizeFromShape(tensorData.shape);\n    if (values.buffer.size < size) {\n      throw new Error(`GPUBuffer size(${\n          values.buffer.size}) is smaller than tensor size(${size})!`);\n    } else if (\n        (values.buffer.usage &\n         (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) !==\n        (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) {\n      throw new Error(\n          'GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!');\n    }\n\n    // Do buffer copy by default.\n    if (values.zeroCopy !== true) {\n      buffer = this.copyBuffer(buffer, size, buffer.usage);\n    }\n    tensorData.resourceInfo = {size: buffer.size, usage: buffer.usage, buffer};\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n\n  /**\n   * Read tensor to a new GPUBuffer.\n   * @param dataId The source tensor.\n   */\n  override readToGPU(dataId: DataId): GPUData {\n    const srcTensorData = this.tensorMap.get(dataId);\n    const {values, dtype, shape, resourceInfo} = srcTensorData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading buffer for complex64 dtype.');\n    }\n\n    if (resourceInfo == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    const size = (resourceInfo as BufferInfo).size;\n    const buffer = this.bufferManager.acquireBuffer(size, resourceInfo.usage);\n    this.ensureCommandEncoderReady();\n    this.ensureComputePassEnded();\n    this.currentCommandEncoder.copyBufferToBuffer(\n        (resourceInfo as BufferInfo).buffer, 0, buffer, 0, size);\n    this.submitQueue();\n\n    const tensorInfo = this.makeTensorInfo(shape, dtype);\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tensorInfo);\n\n    const tensorData = this.tensorMap.get(tensorInfo.dataId);\n    tensorData\n        .resourceInfo = {size, usage: this.defaultGpuBufferUsage(), buffer};\n\n    return {tensorRef, buffer, bufSize: size};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  override async time(f: () => void): Promise<WebGPUTimingInfo> {\n    if (!this.supportTimeQuery) {\n      console.warn(\n          `This device doesn't support timestamp-query-inside-passes extension. ` +\n          `Start Chrome browser with flag ` +\n          `--disable-dawn-features=disallow_unsafe_apis then try again. ` +\n          `Otherwise, zero will be shown for the kernel time when profiling ` +\n          `mode is enabled. Using performance.now is not workable for webgpu ` +\n          `since it doesn't support synchronous data read from GPU.`);\n    }\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: WebGPUKernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: WebGPUKernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res: WebGPUTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null\n    };\n\n    const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n    res['kernelMs'] = util.sum(kernelMs);\n    res['getExtraProfileInfo'] = () =>\n        kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n            .map(d => `${d.name}: ${d.ms}`)\n            .join(', ');\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      values = (values as unknown as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = this.write(values as BackendValues, shape, dtype);\n    return {dataId, shape, dtype};\n  }\n\n  private tensorToBinding(tensor?: TensorInfo): GPUBindingResource {\n    if (!tensor) {\n      return null;\n    }\n\n    const tensorData = this.tensorMap.get(tensor.dataId);\n    if ('texture' in tensorData.resourceInfo) {\n      const info = tensorData.resourceInfo;\n      if (info.texture instanceof GPUExternalTexture) {\n        return info.texture;\n      } else {\n        return info.texture.createView();\n      }\n    }\n    const bufferInfo = tensorData.resourceInfo;\n    return {offset: 0, size: bufferInfo.size, buffer: bufferInfo.buffer};\n  }\n\n  async getQueryTime(query: GPUQuerySet): Promise<number> {\n    if (this.supportTimeQuery) {\n      return this.getTimeFromQuerySet(query);\n    } else {\n      return 0;\n    }\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const tensorData = this.tensorMap.get(dataId);\n    // Already on the GPU.\n    if (tensorData.resourceInfo) {\n      return;\n    }\n\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) *\n        util.sizeFromShape(tensorData.shape);\n    const buffer =\n        this.bufferManager.acquireBuffer(size, this.defaultGpuBufferUsage());\n\n    tensorData\n        .resourceInfo = {size, usage: this.defaultGpuBufferUsage(), buffer};\n    if (tensorData.values) {\n      const stagingBuffer = this.bufferManager.acquireUploadBuffer(\n          size, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC);\n      const arrayBuffer = stagingBuffer.getMappedRange();\n      if (tensorData.dtype === 'int32' || tensorData.dtype === 'bool') {\n        new Int32Array(arrayBuffer).set(tensorData.values as TypedArray);\n      } else {\n        new Float32Array(arrayBuffer).set(tensorData.values as Float32Array);\n      }\n      stagingBuffer.unmap();\n      this.ensureCommandEncoderReady();\n      this.ensureComputePassEnded();\n      this.currentCommandEncoder.copyBufferToBuffer(\n          stagingBuffer, 0, buffer, 0, size);\n\n      const stagingInfo = {\n        size,\n        usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC,\n        buffer: stagingBuffer\n      };\n      this.stagingPendingDisposal.push(stagingInfo);\n      // TODO: WebGPU doesn't support read data synchronously from GPU to CPU.\n      // So it will report error when switching backend from WebGPU to others.\n      // There are two situations: 1) swithcing the backend after running a\n      // model; 2) swithcing the backend within the model. Temporarilly keep\n      // the values on CPU to solve the first issue. tensorData.values = null;\n    }\n  }\n\n  private makeUniforms(programUniform: ProgramUniform): GPUBindingResource {\n    let currentOffset = 0;\n    let preLength = 0;\n    const offsets: number[] = [];\n    let maxAlignmentOfField = 1;\n    programUniform.forEach((d) => {\n      if (d.data.length === 0) {\n        d.data = [1];\n      }\n      // https://www.w3.org/TR/WGSL/#alignof\n      let baseAlignment: number;\n      switch (d.data.length) {\n        case 1:\n          baseAlignment = 4;\n          break;\n        case 2:\n          baseAlignment = 8;\n          break;\n        case 3:\n          baseAlignment = 16;\n          break;\n        case 4:\n          baseAlignment = 16;\n          break;\n        case 5:\n          baseAlignment = 16;\n          break;\n        case 6:\n          baseAlignment = 16;\n          break;\n        default:\n          util.assert(false, () => `Unsupported ${d.data.length}D shape`);\n      }\n\n      if (preLength === 5 || preLength === 6) {\n        baseAlignment = 16;\n      }\n      if (baseAlignment > maxAlignmentOfField) {\n        maxAlignmentOfField = baseAlignment;\n      }\n      currentOffset = Math.ceil(currentOffset / baseAlignment) * baseAlignment;\n      preLength = d.data.length;\n      offsets.push(currentOffset);\n      currentOffset += d.data.length * 4;\n    });\n\n    currentOffset =\n        Math.ceil(currentOffset / maxAlignmentOfField) * maxAlignmentOfField;\n    const arrayBuffer = new ArrayBuffer(currentOffset);\n    programUniform.forEach((d, i) => {\n      const offset = offsets[i];\n      if (d.type === 'int32') {\n        new Int32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else if (d.type === 'uint32') {\n        new Uint32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else {\n        new Float32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      }\n    });\n\n    const uniformBuffer = this.bufferManager.acquireBuffer(\n        currentOffset, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n    this.queue.writeBuffer(uniformBuffer, 0, arrayBuffer, 0, currentOffset);\n\n    const uniformInfo = {\n      size: currentOffset,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n      buffer: uniformBuffer\n    };\n    this.uniformPendingDisposal.push(uniformInfo);\n\n    return {offset: 0, size: currentOffset, buffer: uniformBuffer};\n  }\n\n  public runWebGPUProgram(\n      program: webgpu_program.WebGPUProgram, inputs: TensorInfo[],\n      outputDtype: DataType, programDefinedUniform?: ProgramUniform,\n      output?: TensorInfo): TensorInfo {\n    if (!output) {\n      output = this.makeTensorInfo(program.outputShape, outputDtype);\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      this.tensorMap.get(output.dataId).values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n    this.uploadToGPU(output.dataId);\n    program.dispatch = reshapeDispatch(this.device, program);\n\n    // There are six kinds of uniforms: NAN, INFINITY, shapes, shape strides,\n    // program size, program defined uniforms.\n    let programUniform: ProgramUniform = [];\n    let bufferShapes: number[][] = [];\n    if (!program.isFromPixels) {\n      programUniform.push(\n          {type: 'float32', data: [NaN]}, {type: 'float32', data: [Infinity]});\n      bufferShapes = inputs.concat(output).map(d => d.shape);\n      const uniformsType = 'int32';\n      bufferShapes.map(d => {\n        programUniform.push({type: uniformsType, data: d});\n      });\n      const strides = util.computeStrides(output.shape);\n      programUniform.push({type: uniformsType, data: strides});\n      if (program.size) {\n        const size = util.sizeFromShape(program.outputShape);\n        programUniform.push(\n            {type: uniformsType, data: [program.isVec4 ? size / 4 : size]});\n      }\n    }\n\n    const inputsData = inputs.map((input: TensorInfo, i: number) => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n      this.uploadToGPU(input.dataId);\n\n      return {\n        // Returning dtype from tensorMap because it reflects dtype\n        // of underlying buffer, rather than abstract dtype.\n        dtype: this.tensorMap.get(input.dataId).dtype,\n        shape: input.shape,\n        name: program.variableNames[i]\n      };\n    });\n\n    const key =\n        webgpu_program.makeShaderKey(program, bufferShapes, inputsData, output);\n\n    let pipeline;\n    if (key in this.pipelineCache) {\n      pipeline = this.pipelineCache[key];\n    } else {\n      pipeline = webgpu_program.compileProgram(\n          this.device, program, inputsData, output);\n      this.pipelineCache[key] = pipeline;\n    }\n\n    if (programDefinedUniform) {\n      programUniform = [...programUniform, ...programDefinedUniform];\n    }\n    const bindings = [\n      this.tensorToBinding(output), ...inputs.map(t => this.tensorToBinding(t)),\n      this.makeUniforms(programUniform)\n    ];\n\n    const bindGroup = this.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: bindings.map((b, i) => ({binding: i, resource: b})),\n    });\n\n    this.ensureCommandEncoderReady();\n    const pass = this.getComputePass();\n    const shouldTimeProgram = this.activeTimers != null;\n    if (shouldTimeProgram) {\n      if (this.supportTimeQuery) {\n        // tslint:disable-next-line:no-any\n        (pass as any).writeTimestamp(this.querySet, 0);\n      }\n    }\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(\n        program.dispatch[0], program.dispatch[1], program.dispatch[2]);\n    if (shouldTimeProgram) {\n      if (this.supportTimeQuery) {\n        // tslint:disable-next-line:no-any\n        (pass as any).writeTimestamp(this.querySet, 1);\n      }\n    }\n    this.dispatchNumberInEncoder++;\n\n    inputs.forEach(input => {\n      this.commandQueueOwnedIds.add(input.dataId);\n    });\n    this.commandQueueOwnedIds.add(output.dataId);\n\n    if (env().get('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE') as\n        number <= this.dispatchNumberInEncoder) {\n      this.submitQueue();\n    }\n\n    if (shouldTimeProgram) {\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(this.querySet)\n      });\n    }\n    return output;\n  }\n\n  async getTimeFromQuerySet(querySet: GPUQuerySet) {\n    const queryBuffer = this.bufferManager.acquireBuffer(\n        16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n    const dst = this.bufferManager.acquireBuffer(\n        16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n    this.ensureCommandEncoderReady();\n    this.ensureComputePassEnded();\n    this.currentCommandEncoder.resolveQuerySet(querySet, 0, 2, queryBuffer, 0);\n    this.currentCommandEncoder.copyBufferToBuffer(queryBuffer, 0, dst, 0, 16);\n    this.submitQueue();\n    await dst.mapAsync(GPUMapMode.READ);\n    const arrayBuf = new BigUint64Array(dst.getMappedRange());\n    const timeElapsedNanos = Number((arrayBuf[1] - arrayBuf[0]));\n    dst.unmap();\n    this.bufferManager.releaseBuffer(\n        dst, 16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n    this.bufferManager.releaseBuffer(\n        queryBuffer, 16,\n        GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n    // Return milliseconds.\n    return timeElapsedNanos / 1000000;\n  }\n\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGPU_CPU_FORWARD') &&\n        inputs.every(\n            input => this.tensorMap.get(input.dataId).resourceInfo == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  override numDataIds() {\n    return this.tensorMap.numDataIds() - this.tensorDataPendingDisposal.length;\n  }\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    this.bufferManager.dispose();\n    this.textureManager.dispose();\n    this.disposed = true;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum BinaryOpType {\n  ADD,\n  ATAN2,\n  COMPLEX_MULTIPLY_IMAG,\n  COMPLEX_MULTIPLY_REAL,\n  DIV,\n  EQUAL,\n  GREATER,\n  GREATER_EQUAL,\n  INT_DIV,\n  LESS,\n  LESS_EQUAL,\n  LOGICAL_AND,\n  LOGICAL_OR,\n  MAX,\n  MIN,\n  MOD,\n  MUL,\n  NOT_EQUAL,\n  POW,\n  PRELU,\n  SQUARED_DIFFERENCE,\n  SUB\n}\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) { return a; }\n  if (isnan(b)) { return b; }\n  `;\n\nconst CHECK_NAN_SNIPPET_VEC4 = `\n  resultTemp = select(\n      resultTemp, vec4<f32>(valueForNaN),\n      vec4<bool>(isNaN) | isnanVec4(a) | isnanVec4(b));\n  `;\n\nconst ADD = 'return a + b;';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nconst COMPLEX_MULTIPLY_REAL = 'return areal * breal - aimag * bimag;';\nconst COMPLEX_MULTIPLY_IMAG = 'return areal * bimag + aimag * breal;';\nconst DIV = 'return a / b;';\nconst EQUAL = 'return f32(a == b);';\nconst EQUAL_VEC4 = 'return vec4<f32>(a == b);';\nconst GREATER = 'return f32(a > b);';\nconst GREATER_VEC4 = 'return vec4<f32>(a > b);';\nconst GREATER_EQUAL = 'return f32(a >= b);';\nconst GREATER_EQUAL_VEC4 = 'return vec4<f32>(a >= b);';\n\nconst INT_DIV = `\n  let s = sign(a) * sign(b);\n  let ia = i32(round(a));\n  let ib = i32(round(b));\n  return f32(idiv(ia, ib, s));\n`;\nconst INT_DIV_VEC4 = `\n  let ia = vec4<i32>(round(a));\n  let ib = vec4<i32>(round(b));\n  let cond = ib != vec4<i32>(0);\n  var resultTemp = vec4<i32>(0);\n  let s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    resultTemp[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    resultTemp[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    resultTemp[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    resultTemp[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4<f32>(resultTemp);\n`;\n\nconst LESS = 'return f32(a < b);';\nconst LESS_VEC4 = 'return vec4<f32>(a < b);';\nconst LESS_EQUAL = 'return f32(a <= b);';\nconst LESS_EQUAL_VEC4 = 'return vec4<f32>(a <= b);';\nconst LOGICAL_AND = 'return f32(a >= 1.0 && b >= 1.0);';\nconst LOGICAL_AND_VEC4 = `return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));`;\nconst LOGICAL_OR = 'return f32(a >= 1.0 || b >= 1.0);';\nconst LOGICAL_OR_VEC4 = `return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`;\nconst MOD = `\n  ${CHECK_NAN_SNIPPET}\n  if (b == 0.) {\n    return uniforms.NAN;\n  }\n  var resultTemp = a % b;\n  if ((a < 0. && b < 0.) || (a >= 0. && b > 0.)) {\n    return resultTemp;\n  } else {\n    return (resultTemp + b) % b;\n  }\n`;\nconst MOD_VEC4 = `\n  let isNaN = !vec4<bool>(b);\n  let valueForNaN = uniforms.NAN;\n  var resultTemp = vec4<f32>(a % b);\n  ${CHECK_NAN_SNIPPET_VEC4}\n\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n\n  return resultTemp;\n`;\nconst MUL = 'return a * b;';\nconst NOT_EQUAL = `\n  if (isnan(a) || isnan(b)) {\n    return 1.0;\n  }\n  return f32(a != b);\n`;\nconst NOT_EQUAL_VEC4 = `\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n  ${CHECK_NAN_SNIPPET_VEC4}\n\n  return resultTemp;\n`;\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b) {\n    return uniforms.NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  if (round(abs(b) % 2.0) != 1.0) {\n    return pow(abs(a), b);\n  }\n  return sign(a) * pow(abs(a), b);\n`;\nconst POW_VEC4 = `\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n  let valueForNaN = uniforms.NAN;\n  ${CHECK_NAN_SNIPPET_VEC4}\n  return resultTemp;\n`;\n\nconst PRELU = `if (a < 0.0) { return b * a; }  return a;`;\nconst PRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nconst SUB = 'return a - b;';\n\nfunction getBinaryWithNanString(\n    op: string, useVec4: boolean, valueForNaN = 'uniforms.NAN') {\n  const checkNanSnippet = useVec4 ? CHECK_NAN_SNIPPET_VEC4 : CHECK_NAN_SNIPPET;\n  return useVec4 ? `\n    let valueForNaN = ${valueForNaN};\n    var resultTemp = vec4<f32>(${op}(a, b));\n    ` + checkNanSnippet +\n          `\n    return resultTemp;\n  ` :\n                   checkNanSnippet + `\n    return ${op}(a, b);\n  `;\n}\n\nexport function getBinaryOpString(\n    type: BinaryOpType, useVec4?: boolean): string {\n  switch (type) {\n    case BinaryOpType.ADD:\n      return ADD;\n    case BinaryOpType.ATAN2:\n      return getBinaryWithNanString('atan2', useVec4);\n    case BinaryOpType.COMPLEX_MULTIPLY_IMAG:\n      return COMPLEX_MULTIPLY_IMAG;\n    case BinaryOpType.COMPLEX_MULTIPLY_REAL:\n      return COMPLEX_MULTIPLY_REAL;\n    case BinaryOpType.DIV:\n      return DIV;\n    case BinaryOpType.EQUAL:\n      return useVec4 ? EQUAL_VEC4 : EQUAL;\n    case BinaryOpType.GREATER:\n      return useVec4 ? GREATER_VEC4 : GREATER;\n    case BinaryOpType.GREATER_EQUAL:\n      return useVec4 ? GREATER_EQUAL_VEC4 : GREATER_EQUAL;\n    case BinaryOpType.INT_DIV:\n      return useVec4 ? INT_DIV_VEC4 : INT_DIV;\n    case BinaryOpType.LESS:\n      return useVec4 ? LESS_VEC4 : LESS;\n    case BinaryOpType.LESS_EQUAL:\n      return useVec4 ? LESS_EQUAL_VEC4 : LESS_EQUAL;\n    case BinaryOpType.LOGICAL_AND:\n      return useVec4 ? LOGICAL_AND_VEC4 : LOGICAL_AND;\n    case BinaryOpType.LOGICAL_OR:\n      return useVec4 ? LOGICAL_OR_VEC4 : LOGICAL_OR;\n    case BinaryOpType.MAX:\n      return getBinaryWithNanString('max', useVec4);\n    case BinaryOpType.MIN:\n      return getBinaryWithNanString('min', useVec4);\n    case BinaryOpType.MOD:\n      return useVec4 ? MOD_VEC4 : MOD;\n    case BinaryOpType.MUL:\n      return MUL;\n    case BinaryOpType.NOT_EQUAL:\n      return useVec4 ? NOT_EQUAL_VEC4 : NOT_EQUAL;\n    case BinaryOpType.POW:\n      return useVec4 ? POW_VEC4 : POW;\n    case BinaryOpType.PRELU:\n      return useVec4 ? PRELU_VEC4 : PRELU;\n    case BinaryOpType.SQUARED_DIFFERENCE:\n      return SQUARED_DIFFERENCE;\n    case BinaryOpType.SUB:\n      return SUB;\n    default:\n      throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {env, registerBackend} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from './backend_webgpu';\nimport {isWebGPUSupported} from './webgpu_util';\n\nif (isWebGPUSupported()) {\n  registerBackend('webgpu', async () => {\n    // Remove it once we figure out how to correctly read the tensor data\n    // before the tensor is disposed in profiling mode.\n    env().set('CHECK_COMPUTATION_FOR_ERRORS', false);\n\n    const gpuDescriptor: GPURequestAdapterOptions = {\n      powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ?\n          'low-power' :\n          'high-performance'\n    };\n\n    const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);\n    const deviceDescriptor: GPUDeviceDescriptor = {};\n\n    // Note that timestamp-query-inside-passes is not formally in spec as\n    // timestamp within a pass is not generally supported on all the platforms.\n    // More details can be found at\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes')) {\n      deviceDescriptor.requiredFeatures =\n          // tslint:disable-next-line:no-any\n          ['timestamp-query-inside-passes' as any];\n    }\n\n    const adapterLimits = adapter.limits;\n    deviceDescriptor.requiredLimits = {\n      'maxComputeWorkgroupStorageSize':\n          adapterLimits.maxComputeWorkgroupStorageSize,\n      'maxComputeWorkgroupsPerDimension':\n          adapterLimits.maxComputeWorkgroupsPerDimension,\n      'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,\n    };\n\n    const device: GPUDevice = await adapter.requestDevice(deviceDescriptor);\n    const adapterInfo = await adapter.requestAdapterInfo();\n    return new WebGPUBackend(device, adapterInfo);\n  }, 3 /*priority*/);\n}\n\n// Export webgpu utilities\nexport * from './webgpu';\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nexport enum UnaryOpType {\n  ABS,\n  ACOS,\n  ACOSH,\n  ASIN,\n  ASINH,\n  ATAN,\n  ATANH,\n  CEIL,\n  COS,\n  COSH,\n  ELU,\n  ERF,\n  EXP,\n  EXPM1,\n  FLOOR,\n  IS_FINITE,\n  IS_INF,\n  IS_NAN,\n  LINEAR,\n  LOG,\n  LOG1P,\n  LOGICAL_NOT,\n  NEG,\n  RELU,\n  RELU6,\n  LEAKYRELU,\n  RECIPROCAL,\n  ROUND,\n  RSQRT,\n  SELU,\n  SIGMOID,\n  SIGN,\n  SIN,\n  SINH,\n  SOFTPLUS,\n  SQRT,\n  SQUARE,\n  STEP,\n  TAN,\n  TANH,\n  TO_INT\n}\n\nconst ABS = `return abs(a);`;\nconst ACOS = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n`;\nconst ACOSH = `\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n`;\nconst ASIN = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n`;\nconst ASINH = `return asinh(a);`;\nconst ATAN = `\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n`;\nconst ATANH = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n`;\nconst CEIL = `return ceil(a);`;\nconst COS = `return cos(a);`;\nconst COSH = `\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nconst EXPM1 = `return exp(a) - 1.0;`;\nconst ELU = `if (a >= 0.0) { return a; }  return (exp(a) - 1.0);`;\nconst ELU_VEC4 = `\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n`;\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  let p = ${backend_util.ERF_P};\n  let a1 = ${backend_util.ERF_A1};\n  let a2 = ${backend_util.ERF_A2};\n  let a3 = ${backend_util.ERF_A3};\n  let a4 = ${backend_util.ERF_A4};\n  let a5 = ${backend_util.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`;\nconst EXP = `return exp(a);`;\nconst FLOOR = `return floor(a);`;\nconst IS_FINITE = `return f32(!isnan(a) && !isinf(a));`;\nconst IS_INF = `return f32(isinf(a));`;\nconst IS_NAN = `return f32(isnan(a));`;\nconst LINEAR = `return a;`;\nconst LOG = `if (a < 0.0) { return uniforms.NAN; }\n  return log(a);`;\nconst LOG1P = `\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n`;\nconst LOGICAL_NOT = `return f32(!(a >= 1.0));`;\nconst NEG = `return -a;`;\nconst LEAKYRELU = `if (a < 0.0) { return uniforms.alpha * a; } return a;`;\nconst LEAKYRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst RECIPROCAL = `return 1.0 / a;`;\nconst RELU = `return select(a, 0.0, a < 0.0);`;\nconst RELU6 = 'return clamp(a, 0.0, 6.0);';\nconst RELU6_VEC4 =\n    'return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));';\nconst RELU_VEC4 = `\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n`;\nconst ROUND = `return round(a);`;\nconst RSQRT = `return inverseSqrt(a);`;\n// Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n// See: https://arxiv.org/abs/1706.02515\nconst SELU = `\n  if (a >= 0.0) {\n    return ${backend_util.SELU_SCALE} * a;\n  } else {\n    return ${backend_util.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`;\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * a));`;\nconst SIGN = `return sign(a);`;\nconst SIN = `return sin(a);`;\nconst SINH = `\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nconst SOFTPLUS = `\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n`;\nconst SQRT = `return sqrt(a);`;\nconst SQUARE = `return a * a;`;\nconst STEP = `\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n`;\nconst TAN = `return tan(a);`;\nconst TANH = `\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n`;\nconst TO_INT = `return f32(i32((a)));`;\n\nexport function getUnaryOpString(type: UnaryOpType, useVec4?: boolean): string {\n  switch (type) {\n    case UnaryOpType.ABS:\n      return ABS;\n    case UnaryOpType.ACOS:\n      return ACOS;\n    case UnaryOpType.ACOSH:\n      return ACOSH;\n    case UnaryOpType.ASIN:\n      return ASIN;\n    case UnaryOpType.ASINH:\n      return ASINH;\n    case UnaryOpType.ATAN:\n      return ATAN;\n    case UnaryOpType.ATANH:\n      return ATANH;\n    case UnaryOpType.COS:\n      return COS;\n    case UnaryOpType.COSH:\n      return COSH;\n    case UnaryOpType.CEIL:\n      return CEIL;\n    case UnaryOpType.ELU:\n      return useVec4 ? ELU_VEC4 : ELU;\n    case UnaryOpType.ERF:\n      return ERF;\n    case UnaryOpType.EXP:\n      return EXP;\n    case UnaryOpType.EXPM1:\n      return EXPM1;\n    case UnaryOpType.FLOOR:\n      return FLOOR;\n    case UnaryOpType.IS_FINITE:\n      return IS_FINITE;\n    case UnaryOpType.IS_INF:\n      return IS_INF;\n    case UnaryOpType.IS_NAN:\n      return IS_NAN;\n    case UnaryOpType.LINEAR:\n      return LINEAR;\n    case UnaryOpType.LOG:\n      return LOG;\n    case UnaryOpType.LOG1P:\n      return LOG1P;\n    case UnaryOpType.LOGICAL_NOT:\n      return LOGICAL_NOT;\n    case UnaryOpType.NEG:\n      return NEG;\n    case UnaryOpType.LEAKYRELU:\n      return useVec4 ? LEAKYRELU_VEC4 : LEAKYRELU;\n    case UnaryOpType.RECIPROCAL:\n      return RECIPROCAL;\n    case UnaryOpType.RELU:\n      return useVec4 ? RELU_VEC4 : RELU;\n    case UnaryOpType.RELU6:\n      return useVec4 ? RELU6_VEC4 : RELU6;\n    case UnaryOpType.ROUND:\n      return ROUND;\n    case UnaryOpType.RSQRT:\n      return RSQRT;\n    case UnaryOpType.SELU:\n      return SELU;\n    case UnaryOpType.SIGMOID:\n      return SIGMOID;\n    case UnaryOpType.SIGN:\n      return SIGN;\n    case UnaryOpType.SIN:\n      return SIN;\n    case UnaryOpType.SINH:\n      return SINH;\n    case UnaryOpType.SOFTPLUS:\n      return SOFTPLUS;\n    case UnaryOpType.SQRT:\n      return SQRT;\n    case UnaryOpType.SQUARE:\n      return SQUARE;\n    case UnaryOpType.STEP:\n      return STEP;\n    case UnaryOpType.TAN:\n      return TAN;\n    case UnaryOpType.TANH:\n      return TANH;\n    case UnaryOpType.TO_INT:\n      return TO_INT;\n\n    default:\n      throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport function activationFnSnippet(\n    activation: backend_util.Activation, hasPreluActivationWeights = false,\n    packed = false, coordsLength = 3): string {\n  if (activation === null) {\n    return '';\n  }\n\n  let activationOpSnippet = '';\n  if (activation === 'linear') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LINEAR);\n  } else if (activation === 'relu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU, packed);\n  } else if (activation === 'elu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.ELU, packed);\n  } else if (activation === 'relu6') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU6, packed);\n  } else if (activation === 'prelu') {\n    activationOpSnippet = getBinaryOpString(BinaryOpType.PRELU, packed);\n  } else if (activation === 'sigmoid') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.SIGMOID, packed);\n  } else if (activation === 'leakyrelu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LEAKYRELU, packed);\n  } else {\n    throw new Error(`Activation ${\n        activation} has not been implemented for the WebGPU backend.`);\n  }\n  const elementSize = packed ? 4 : 1;\n  const dataType = typeSnippet(elementSize);\n  let activationFnSnippet = '';\n  if (hasPreluActivationWeights) {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${activationOpSnippet}\n      }`;\n  } else {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        ${activationOpSnippet}\n      }`;\n  }\n  return activationFnSnippet;\n}\n\nexport function biasActivationSnippet(\n    hasBias: boolean, activation: backend_util.Activation): string {\n  return `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupInfoForMatMul} from './webgpu_util';\n\nexport function matMulReadFnSource(\n    transposeA: boolean, transposeB: boolean, fitAOuter = false,\n    fitBOuter = false, fitInner = false, component = 1) {\n  util.assert(\n      transposeA && component === 1 || !transposeA,\n      () => `transposeA ${transposeA} is not compatible with component size ${\n          component}`);\n  const sampleA = `\n      ${\n      transposeA ? `value = getA(batch, col, row);` :\n                   `value = getA(batch, row, col);`}\n\n    `;\n  const sampleB = transposeB ? `value = getB(batch, col, row);` :\n                               `value = getB(batch, row, col);`;\n\n  return `\n  fn mm_readA(batch: i32, row: i32, colIn: i32) -> ${typeSnippet(component)} {\n    var value = ${typeSnippet(component)}(0.0);\n    let col = colIn * ${component};\n    ${\n      fitAOuter && fitInner ?\n          sampleA :\n          `\n    ${\n              transposeA ?\n                  `if(row < uniforms.dimAOuter && col < uniforms.dimInner)` :\n                  `if(row < uniforms.aShape[1] && col < uniforms.aShape[2])`}\n    {\n      ${sampleA}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, colIn: i32) -> ${typeSnippet(component)} {\n    let col = colIn * ${component};\n    var value = ${typeSnippet(component)}(0.0);\n    ${sampleB}\n    return value;\n  }\n  `;\n}\n\nexport function matMulReadWriteFnSource(\n    hasBias: boolean, activation: backend_util.Activation, transposeA: boolean,\n    transposeB: boolean, fitAOuter = false, fitBOuter = false, fitInner = false,\n    component = 1) {\n  return `\n  ${\n      matMulReadFnSource(\n          transposeA, transposeB, fitAOuter, fitBOuter, fitInner, component)}\n  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${\n      typeSnippet(component)}) {\n    let col = colIn * ${component};\n    ${\n      fitAOuter && fitBOuter ?\n          '' :\n          'if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)'}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${biasActivationSnippet(hasBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `;\n}\n\nconst writeDataToSubAVec4Snippet =\n    (transpose: boolean, innerElementSize: number) => {\n      if (transpose) {\n        return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart / ${innerElementSize} + inputCol);\n        `;\n\n      } else {\n        return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart / ${innerElementSize} + inputCol);\n        `;\n      }\n    };\n\nconst calculateResultSnippet =\n    (transposeA: boolean, innerElementSize: number, rowPerThread: number) => {\n      if (transposeA) {\n        return `\n        let ACached0 = mm_Asub[k * ${innerElementSize}][localRow];\n        let ACached1 = mm_Asub[k * ${innerElementSize} + 1][localRow];\n        let ACached2 = mm_Asub[k * ${innerElementSize} + 2][localRow];\n        ${\n            innerElementSize === 3 ? '' :\n                                     `let ACached3 = mm_Asub[k * ${\n                                         innerElementSize} + 3][localRow];`}\n        for (var i = 0; i < ${rowPerThread}; i++) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${\n            innerElementSize === 3 ?\n                '' :\n                'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n      } else {\n        return `\n        for (var i = 0; i < ${rowPerThread}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${\n            innerElementSize === 3 ? '' :\n                                     'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n      }\n    };\n\nexport function makeMatMulPackedVec4Source(\n    workPerThread: number[], workgroupSize: [number, number, number],\n    transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n    isVectorA = false, broadcastBatch = false): string {\n  const tileAOuter = workgroupSize[1] * workPerThread[1];\n  const tileBOuter = workgroupSize[0] * workPerThread[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  const innerElementSize = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const rowPerThread = workPerThread[1];\n  util.assert(\n      ((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n       (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n          tileAWidth % workgroupSize[0] === 0 &&\n          tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4,\n      () => `If transposeA ${transposeA} is true, innerElementSize ${\n          innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n          Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n      tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n          workgroupSize[0]}. tileInner ${\n          tileInner} must be divisible by workgroupSize[1] ${\n          workgroupSize[1]}. colPerThread ${workPerThread[0]} must be 4.`);\n  return `\n  var<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${\n      tileAWidth / innerElementSize}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${\n      tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\n  ${main()} {\n    let localRow = i32(localId.y);\n    let tileRow = ${isVectorA ? '0' : `localRow * ${rowPerThread}`};\n    let tileCol = i32(localId.x);\n\n    let globalRow = ${isVectorA ? '0' : `i32(globalId.y) * ${rowPerThread}`};\n    let globalCol = i32(globalId.x);\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let batchA = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.aShape[0]'};\n    let batchB = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.bShape[0]'};\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n    let numTiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` :\n               `(uniforms.dimInner - 1) / ${tileInner} + 1`};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc: array<vec4<f32>, ${rowPerThread}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${rowPerThreadB};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${writeDataToSubAVec4Snippet(transposeA, innerElementSize)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${tileInner};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${tileInner / innerElementSize}; k++) {\n            let BCached0 = mm_Bsub[k * ${innerElementSize}][tileCol];\n            let BCached1 = mm_Bsub[k * ${innerElementSize} + 1][tileCol];\n            let BCached2 = mm_Bsub[k * ${innerElementSize} + 2][tileCol];\n            ${\n      innerElementSize === 3 ?\n          '' :\n          `let BCached3 = mm_Bsub[k * ${innerElementSize} + 3][tileCol];`}\n\n            ${\n      calculateResultSnippet(transposeA, innerElementSize, rowPerThread)}\n        }\n\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`;\n}\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) => {\n  return transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' :\n\n                      'let ACached = mm_Asub[tileRow + innerRow][k];';\n};\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport function makeMatMulPackedSource(\n    workPerThread: number[], workgroupSize: [number, number, number],\n    transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n    sequentialAccessByThreads = false, broadcastBatch = false): string {\n  const tileAOuter = workPerThread[1] * workgroupSize[1];\n  const tileBOuter = workPerThread[0] * workgroupSize[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  util.assert(\n      tileAHight % workgroupSize[1] === 0 &&\n          tileAWidth % workgroupSize[0] === 0 &&\n          tileInner % workgroupSize[1] === 0,\n      () => `tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n          workgroupSize[1]}, tileAWidth ${\n          tileAWidth} must be divisible by workgroupSize[0]${\n          workgroupSize[0]}, tileInner ${\n          tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n  const rowPerThreadA = tileAHight / workgroupSize[1];\n  const colPerThreadA = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const rowPerThread = workPerThread[1];\n  const colPerThread = workPerThread[0];\n  const matmulSnippet = sequentialAccessByThreads ?\n      `\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n      let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${\n          tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${\n          tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n            ${writeDataToSubASnippet(transposeA)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${\n          tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n              for (var inputCol = localCol; inputCol < ${\n          tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${tileInner};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${colPerThread}>;\n        for (var k = 0; k < ${tileInner}; k++) {\n          for (var inner = 0; inner < ${colPerThread}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${\n          workgroupSize[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n            let ACached = ${\n          transposeA ?\n              `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n              `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n              acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                  ACached * BCached[innerCol];\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${\n          workgroupSize[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      ` :\n      `\n  let tileRow = i32(localId.y) * ${rowPerThread};\n  let tileCol = i32(localId.x) * ${colPerThread};\n\n  let globalRow = i32(globalId.y) * ${rowPerThread};\n  let globalCol = i32(globalId.x) * ${colPerThread};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let tileRowA = i32(localId.y) * ${rowPerThreadA};\n  let tileColA = i32(localId.x) * ${colPerThreadA};\n  let tileRowB = i32(localId.y) * ${rowPerThreadB};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${writeDataToSubASnippet(transposeA)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${tileInner};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${colPerThread}>;\n    for (var k = 0; k < ${tileInner}; k++) {\n      for (var inner = 0; inner < ${colPerThread}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        ${readDataFromSubASnippet(transposeA)}\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;\n\n  return `\n    var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n    ${main()} {\n      let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n      let batchA = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.aShape[0]'};\n      let batchB = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.bShape[0]'};\n      let numTiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` :\n               `(uniforms.dimInner - 1) / ${tileInner} + 1`};\n      var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n      var acc : array<array<f32, ${colPerThread}>, ${rowPerThread}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${matmulSnippet}\n    }\n  `;\n}\n\nconst readVectorASnippet = (transpose: boolean) => {\n  return transpose ? `\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ` :\n                     `\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  `;\n};\n\nexport function makeVectorMatrixProductSource(\n    workgroupSize: [number, number, number], transposeA = false): string {\n  util.assert(\n      workgroupSize[1] === 1 && workgroupSize[2] === 1,\n      () => `A linear work group size is required. But got ${workgroupSize}.`);\n  const tileSize = workgroupSize[0] * 4;\n  return `\n    var<workgroup> mm_Asub : array<vec4<f32>, ${workgroupSize[0]}>;\n\n    ${main()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${tileSize} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${tileSize} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${readVectorASnippet(transposeA)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${tileSize / 4}; k++) {\n          let rowB = t * ${tileSize} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `;\n}\n\nexport class MatMulPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  fitAOuter: boolean;\n  fitBOuter: boolean;\n  fitInner: boolean;\n  tileInner: number;\n  isVectorA: boolean;\n  isVec4: boolean;\n  private sequentialAccessByThreads: boolean;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      transposeA = false, transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null,\n      sequentialAccessByThreads = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [2], y: [1], z: [0]};\n    const dimInner = transposeA ? aShape[1] : aShape[2];\n    this.isVec4 = ((dimInner % 4 === 0 && !transposeA) ||\n                   (outputShape[1] % 4 === 0 && transposeA)) &&\n        outputShape[2] % 4 === 0 && !transposeB;\n    this.isVectorA = outputShape[1] === 1 && !transposeA;\n\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.elementsPerThread = [1, 1, 1];\n      this.workgroupSize = [32, 1, 1];\n    } else {\n      const workgroupInfo = computeWorkgroupInfoForMatMul(\n          outputShape[1], dimInner, outputShape[2], transposeA);\n      this.workgroupSize = workgroupInfo.workgroupSize;\n      this.elementsPerThread = workgroupInfo.elementsPerThread;\n    }\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    [this.fitAOuter, this.fitBOuter, this.fitInner] =\n        this.getShapeFit(outputShape[1], outputShape[2], dimInner);\n    this.shaderKey = `matMulPacked_${this.elementsPerThread}_${transposeA}_${\n        transposeB}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${\n        this.fitInner}_${this.isVec4}_${this.isVectorA}_${\n        this.sequentialAccessByThreads}`;\n  }\n\n  getShapeFit(dimAOuter: number, dimBOuter: number, dimInner: number):\n      boolean[] {\n    const tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1];\n    const tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0];\n\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.tileInner = this.workgroupSize[0] * 4;\n    } else {\n      this.tileInner = tileBOuter;\n    }\n\n    const fitAOuter = dimAOuter % tileAOuter === 0;\n    const fitBOuter = dimBOuter % tileBOuter === 0;\n    const fitInner = dimInner % this.tileInner === 0;\n    return [fitAOuter, fitBOuter, fitInner];\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivationWeights, this.isVec4)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation,\n            false /* transposeA is implemented in makeMatMulPackedSource */,\n            this.transposeB, this.fitAOuter, this.fitBOuter, this.fitInner,\n            this.isVec4 ? 4 : 1)}\n      ${\n        this.isVec4 ?\n            makeMatMulPackedVec4Source(\n                this.elementsPerThread, this.workgroupSize, this.transposeA,\n                this.tileInner, false, null, this.isVectorA, true) :\n            (this.isVectorA ? makeVectorMatrixProductSource(\n                                  this.workgroupSize, this.transposeA) :\n                              makeMatMulPackedSource(\n                                  this.elementsPerThread, this.workgroupSize,\n                                  this.transposeA, this.tileInner, false, null,\n                                  this.sequentialAccessByThreads, true))}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet} from './activation_util';\nimport {matMulReadWriteFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport function makeMatMulReduceSource(workgroupSizeX: number): string {\n  return `\n    var<workgroup> sumValues : array<f32, ${workgroupSizeX}>;\n    ${main()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${workgroupSizeX}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${workgroupSizeX / 2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `;\n}\n\nexport class MatMulReduceProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n\n  constructor(\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [], y: [1, 2], z: [0]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.shaderKey =\n        `matMulReduce_${this.activation}_${transposeA}_${transposeB}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.transposeA, this.transposeB)}\n      ${makeMatMulReduceSource(this.workgroupSize[0])}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet} from './activation_util';\nimport {matMulReadWriteFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\n\nexport function makeMatMulSmallOutputSizeSource(\n    workgroupSize: [number, number, number]): string {\n  const tileAOuter = workgroupSize[1];\n  const tileBOuter = workgroupSize[0];\n  const tileInner = tileAOuter > tileBOuter ? tileAOuter : tileBOuter;\n  return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileInner}>, ${tileAOuter}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${main()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${tileInner} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${tileInner};\n    globalRowB = globalRowB + ${tileInner};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${tileInner};\n      globalRowB = globalRowB + ${tileInner};\n\n      for (var k = 0; k < ${tileInner}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `;\n}\n\nexport class MatMulSmallOutputSizeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [16, 8, 1];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n\n    this.dispatchLayout = {x: [2], y: [1], z: [0]};\n    this.dispatch = [\n      Math.ceil(outputShape[2] / this.workgroupSize[0]),\n      Math.ceil(outputShape[1] / this.workgroupSize[1]), outputShape[0]\n    ];\n\n    const addBias = bias != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.shaderKey =\n        `matMulSmallOutputSize_${this.activation}_${transposeA}_${transposeB}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.transposeA, this.transposeB)}\n      ${makeMatMulSmallOutputSizeSource(this.workgroupSize)}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source, matMulReadFnSource} from './matmul_packed_webgpu';\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MatMulSplitKProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [8, 8, 1];\n  elementsPerThread: [number, number, number];\n  transposeA: boolean;\n  transposeB: boolean;\n  atomic = true;\n  isVec4 = false;\n  splitedDimInner = 128;\n\n  constructor(\n      outputShape: [number, number, number], dimInner: number,\n      transposeA = false, transposeB = false) {\n    util.assert(\n        outputShape[0] === 1,\n        () => 'MatMulSplitKProgram only supports batch = 1.');\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [2], y: [1], z: [0, 3]};\n    this.isVec4 = (transposeA && this.outputShape[1] % 4 === 0 ||\n                   !transposeA && dimInner % 4 === 0) &&\n        this.outputShape[2] % 4 === 0;\n    this.elementsPerThread = [4, 4, this.splitedDimInner];\n\n    if (!this.isVec4) {\n      if (this.outputShape[1] < 16) {\n        this.elementsPerThread[1] = 1;\n      }\n      if (this.outputShape[2] < 16) {\n        this.elementsPerThread[0] = 1;\n      }\n    }\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout,\n        [\n          this.outputShape[0], this.outputShape[1], this.outputShape[2],\n          dimInner\n        ],\n        this.workgroupSize, this.elementsPerThread);\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.shaderKey = `matMulSplitK_${transposeA}_${transposeB}_${\n        this.elementsPerThread}_${this.isVec4}`;\n  }\n\n  getUserCode(): string {\n    const component = this.isVec4 ? 4 : 1;\n    const userCode = `\n      ${\n        matMulReadFnSource(\n            false, this.transposeB, false, false, false, component)}\n      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${\n        typeSnippet(component)}) {\n        let col = colIn * ${component};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${component}; i = i + 1) {\n            ${\n        atomicAddSnippet(\n            '&result[flatIndex + i]', `${component > 1 ? 'value[i]' : 'value'}`,\n            'float32')}\n          }\n        }\n      }\n      ${\n        this.isVec4 ? makeMatMulPackedVec4Source(\n                          this.elementsPerThread, this.workgroupSize,\n                          this.transposeA, 32, true, this.splitedDimInner) :\n                      makeMatMulPackedSource(\n                          this.elementsPerThread, this.workgroupSize,\n                          this.transposeA, 32, true, this.splitedDimInner)}\n    `;\n    return userCode;\n  }\n}\n\nexport class BiasActivationProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  private addBias: boolean;\n  private activation: backend_util.Activation;\n  private hasPreluActivationWeights: boolean;\n\n  constructor(\n      outputShape: number[], bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.addBias = bias != null;\n    this.hasPreluActivationWeights = preluActivationWeights != null;\n    this.activation = activation;\n    if (this.addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (this.hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.shaderKey = `biasActivation_${activation}`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FillProgram implements WebGPUProgram {\n  variableNames: string[] = [];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'value : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'fill';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FillProgram} from '../fill_webgpu';\n\nexport function fill(args: {backend: WebGPUBackend, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape);\n    const uniformData = [{type: 'float32', data: [value as number]}];\n    return backend.runWebGPUProgram(program, [], dtype, uniformData);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgpu',\n  kernelFunc: fill as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function reshape(\n    args: {inputs: ReshapeInputs, backend: WebGPUBackend, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  // Backend needs to track refCount for the dataId for reshape op\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgpu',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MatMulPackedProgram} from '../matmul_packed_webgpu';\nimport {MatMulReduceProgram} from '../matmul_reduce_webgpu';\nimport {MatMulSmallOutputSizeProgram} from '../matmul_small_output_size_webgpu';\nimport {BiasActivationProgram, MatMulSplitKProgram} from '../matmul_splitK_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\nimport {MatMulProgramType} from '../webgpu_util';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: WebGPUBackend,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const inputs: TensorInfo[] = [a3d, b3d];\n  const dimensions = [\n    {type: 'int32', data: [outerShapeA]}, {type: 'int32', data: [outerShapeB]},\n    {type: 'int32', data: [innerShapeA]}\n  ];\n\n  let program: WebGPUProgram;\n  let out: TensorInfo;\n  const outputShape: [number, number, number] =\n      [batchDim, outerShapeA, outerShapeB];\n  let matmulProgramType = env().get('WEBGPU_MATMUL_PROGRAM_TYPE') as number;\n  if (matmulProgramType < 0) {\n    // Usually increasing workgroups is a good way to gain more performance for\n    // few workgroups by tiling 32x32 (default matmul algorithm). Currently,\n    // there are three ways to increase workgroups. 1) MatMulReduceProgram,\n    // which is used only when the output size is very small (128 for now). 2)\n    // MatMulSplitKProgram, increasing workgroups by spliting K. 3)\n    // MatMulSmallOutputSizeProgram, increasing workgroups by small tile size.\n    // For different devices, the minimum optimal workgroups may be different.\n    // So here we set a |thresholdToIncreaseWorkgroups| to indicate whether we\n    // need to increase workgroups. And the literal number is an empirical\n    // value.\n    const thresholdFlagValue =\n        env().getNumber('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL');\n    const thresholdToIncreaseWorkgroups = thresholdFlagValue > 0 ?\n        thresholdFlagValue :\n        backend.thresholdToIncreaseWorkgroups;\n    const workgroupsBy32x32 =\n        batchDim * Math.ceil(outerShapeA / 32) * Math.ceil(outerShapeB / 32);\n    const hasFewWorkgroups =\n        workgroupsBy32x32 <= thresholdToIncreaseWorkgroups ||\n        (outerShapeA <= 8 &&\n         workgroupsBy32x32 <= thresholdToIncreaseWorkgroups * 2);\n    if (hasFewWorkgroups) {\n      if (batchDim * outerShapeA * outerShapeB <= 128) {\n        matmulProgramType = MatMulProgramType.MatMulReduceProgram;\n      } else if (batchDim === 1 && innerShapeB >= 2000) {\n        matmulProgramType = MatMulProgramType.MatMulSplitKProgram;\n      } else {\n        matmulProgramType = MatMulProgramType.MatMulSmallOutputSizeProgram;\n      }\n    } else {\n      matmulProgramType = MatMulProgramType.MatMulPackedProgram;\n    }\n  }\n\n  switch (matmulProgramType) {\n    case MatMulProgramType.MatMulReduceProgram:\n      program = new MatMulReduceProgram(\n          outputShape, transposeA, transposeB, bias, activation,\n          preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulSplitKProgram: {\n      // The output buffer must be initailzed to zero before using since we\n      // use atomicAdd in MatMulSplitKProgram.\n      out = fill(\n          {backend, attrs: {shape: outputShape, value: 0, dtype: a.dtype}});\n      program = new MatMulSplitKProgram(\n          outputShape, innerShapeB, transposeA, transposeB);\n      if (bias || activation) {\n        out =\n            backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n        const biasActivationProgram = new BiasActivationProgram(\n            out.shape, bias, activation, preluActivationWeights);\n        let uniformData = null;\n        const activationInputs: TensorInfo[] = [out];\n        if (bias) {\n          activationInputs.push(bias);\n        }\n        if (preluActivationWeights) {\n          activationInputs.push(preluActivationWeights);\n        }\n        if (activation === 'leakyrelu') {\n          uniformData = [{type: 'float32', data: [leakyreluAlpha]}];\n          biasActivationProgram.uniforms += ' alpha : f32,';\n        }\n        const outActivated = backend.runWebGPUProgram(\n            biasActivationProgram, activationInputs, out.dtype, uniformData);\n        intermediates.push(out);\n        const outReshaped = reshape(\n            {inputs: {x: outActivated}, backend, attrs: {shape: outShape}});\n        intermediates.push(outActivated);\n        for (const i of intermediates) {\n          backend.disposeData(i.dataId);\n        }\n        return outReshaped;\n      }\n      break;\n    }\n    case MatMulProgramType.MatMulSmallOutputSizeProgram:\n      program = new MatMulSmallOutputSizeProgram(\n          a3dShape, b3dShape, outputShape, transposeA, transposeB, bias,\n          activation, preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulPackedProgram:\n      // Experiments show that sequential access is more friendly for Intel\n      // GPUs.\n      const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n      program = new MatMulPackedProgram(\n          a3dShape, outputShape, transposeA, transposeB, bias, activation,\n          preluActivationWeights, sequentialAccessByThreads);\n      break;\n    default:\n      throw new Error(`Unsupported MatMulProgramType ${matmulProgramType}.`);\n  }\n\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (preluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  out = backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgpu',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpComplexProgram implements WebGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  op: BinaryOpType;\n  size = true;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `binaryOpComplex_${op}`;\n    this.op = op;\n  }\n\n  getUserCode(): string {\n    const opStr = getBinaryOpString(this.op, false);\n    const userCode = `\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${opStr}\n      }\n\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  isVec4: boolean;\n  op: BinaryOpType;\n  outputShape: number[];\n  shaderKey: string;\n  size = true;\n  variableNames = ['A', 'B'];\n  workgroupSize: [number, number, number];\n  workPerThread: number;\n\n  private lastDimensionSize: number;\n  private useSharedMemoryWithA: boolean;\n  private useSharedMemoryWithB: boolean;\n  private type: string;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.op = op;\n\n    this.useSharedMemoryWithA =\n        aShape.length <= 1 && bShape.length > 1 && aShape[0] < 128;\n    this.useSharedMemoryWithB =\n        bShape.length <= 1 && aShape.length > 1 && bShape[0] < 128;\n\n    if (this.useSharedMemoryWithA || this.useSharedMemoryWithB) {\n      this.isVec4 = false;\n      // lastDimensionSize is used as sharedBuf array size, so can not be\n      // used as uniform.\n      this.lastDimensionSize =\n          this.useSharedMemoryWithB ? bShape[0] : aShape[0];\n      this.shaderKey = `binary_${this.type}_${op}_${this.lastDimensionSize}_${\n          this.useSharedMemoryWithB}`;\n      this.type = 'shared';\n      // This is an experimental value when using shared memory.\n      // Note that the maximum of workgroup X dimension is 256.\n      this.workgroupSize = [256, 1, 1];\n      this.workPerThread = 1;\n    } else {\n      if (util.arraysEqual(aShape, bShape) &&\n          util.sizeFromShape(aShape) % 4 === 0) {\n        this.isVec4 = true;\n        this.type = 'vec4';\n        this.workPerThread = 4;\n      } else {\n        this.isVec4 = false;\n        this.type = 'plain';\n        this.workPerThread = 1;\n      }\n      this.shaderKey = `binary_${this.type}_${op}`;\n      // TODO(jiajia.qin@intel.com): Heuristically select a good work group\n      // size.\n      this.workgroupSize = [128, 1, 1];\n    }\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n  }\n\n  getUserCode(): string {\n    let userCode;\n    const dType = this.isVec4 ? 'vec4<f32>' : 'f32';\n    const opFnStr = `\n    fn binaryOperation(a : ${dType}, b : ${dType}) -> ${dType} {\n      let isNaN = false;\n      {\n        ${getBinaryOpString(this.op, this.isVec4)}\n      }\n    };\n    `;\n\n    if (this.type === 'shared') {\n      const sharedIndexSnippet = this.lastDimensionSize > 1 ?\n          `coords[${this.outputShape.length - 1}]` :\n          '0';\n      const accessDataSnippet = this.useSharedMemoryWithB ?\n          `let a = getAByOutputIndex(index);\n          let b = sharedBuf[${sharedIndexSnippet}];` :\n          `let a = sharedBuf[${sharedIndexSnippet}];\n          let b = getBByOutputIndex(index);`;\n      userCode = `\n        ${opFnStr}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${main('index')} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${\n          this.useSharedMemoryWithB ? 'B' : 'A'}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${accessDataSnippet}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `;\n    } else {\n      userCode = `\n       ${opFnStr}\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let a = getAByOutputIndex(index);\n           let b = getBByOutputIndex(index);\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;\n    }\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs} = args;\n  const {x} = inputs;\n\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgpu',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\n/**\n * Complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args: {inputs: ComplexInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.tensorMap.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgpu',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class UnaryOpProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A'];\n  workgroupSize: [number, number, number];\n  op: UnaryOpType;\n  uniforms?: string;\n  size = true;\n\n  constructor(outputShape: number[], op: UnaryOpType, uniforms = '') {\n    // TODO(jiajia.qin@intel.com): Heuristically select a good work group size.\n    const workgroupSizeX = 128;\n    this.workgroupSize = [workgroupSizeX, 1, 1];\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.op = op;\n    if (uniforms !== '') {\n      this.uniforms = uniforms;\n    }\n    this.shaderKey = `unary_${op}`;\n  }\n\n  getUserCode(): string {\n    return `\n      fn unaryOperation(a : f32) -> f32 {\n        ${getUnaryOpString(this.op, false)}\n      }\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TensorInfo, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BinaryOpComplexProgram} from '../binary_op_complex_webgpu';\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\nimport {complex} from '../kernels/Complex';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\ntype UnaryKernelFuncConfig = {\n  opType: UnaryOpType,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opType Op type to create `UnaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opType, cpuKernelImpl, dtype}: UnaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    const $dtype = dtype || x.dtype;\n    if (webgpuBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webgpuBackend.tensorMap.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webgpuBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const program: UnaryOpProgram = new UnaryOpProgram(x.shape, opType);\n    return webgpuBackend.runWebGPUProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opType: BinaryOpType,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  supportsComplex?: boolean,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opType Op type to create `BinaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    {opType, cpuKernelImpl, supportsComplex = false, dtype}:\n        BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webgpuBackend.tensorMap.get(a.dataId);\n      const bData = webgpuBackend.tensorMap.get(b.dataId);\n      let real: TensorInfo, imag: TensorInfo;\n      if (opType !== BinaryOpType.MUL) {\n        [real, imag] = [\n          [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n          [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n        ].map(complexParts => {\n          const [aPart, bPart] = complexParts;\n\n          const aHandle = {\n            dataId: aPart.dataId,\n            dtype: aPart.dtype,\n            shape: a.shape\n          };\n          const bHandle = {\n            dataId: bPart.dataId,\n            dtype: bPart.dtype,\n            shape: b.shape\n          };\n\n          const program = new BinaryOpProgram(opType, a.shape, b.shape);\n          return webgpuBackend.runWebGPUProgram(\n              program, [aHandle, bHandle],\n              upcastType(aPart.dtype, bPart.dtype));\n        });\n      } else {\n        const realProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_IMAG, a.shape, b.shape);\n\n        const inputs = [\n          {\n            dataId: aData.complexTensorInfos.real.dataId,\n            dtype: aData.complexTensorInfos.real.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: aData.complexTensorInfos.imag.dataId,\n            dtype: aData.complexTensorInfos.imag.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.real.dataId,\n            dtype: bData.complexTensorInfos.real.dtype,\n            shape: b.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.imag.dataId,\n            dtype: bData.complexTensorInfos.imag.dtype,\n            shape: b.shape\n          }\n        ];\n\n        real = webgpuBackend.runWebGPUProgram(realProgram, inputs, 'float32');\n        imag = webgpuBackend.runWebGPUProgram(imagProgram, inputs, 'float32');\n      }\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webgpuBackend});\n\n      webgpuBackend.disposeData(real.dataId);\n      webgpuBackend.disposeData(imag.dataId);\n\n      // TODO: Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webgpuBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aData = webgpuBackend.tensorMap.get(a.dataId).values as TypedArray;\n      const bData = webgpuBackend.tensorMap.get(b.dataId).values as TypedArray;\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aData as any as Uint8Array[]) :\n          aData;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bData as any as Uint8Array[]) :\n          bData;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return webgpuBackend.makeTensorInfo(outShape, $dtype, outValues);\n    }\n    const program = new BinaryOpProgram(opType, a.shape, b.shape);\n    return webgpuBackend.runWebGPUProgram(program, [a, b], $dtype);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  greaterImpl: greaterImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  lessImpl: lessImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  prodImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  scatterImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const abs =\n    unaryKernelFunc({opType: UnaryOpType.ABS, cpuKernelImpl: simpleAbsImplCPU});\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgpu',\n  kernelFunc: abs\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const acos = unaryKernelFunc({opType: UnaryOpType.ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgpu',\n  kernelFunc: acos\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const acosh = unaryKernelFunc({opType: UnaryOpType.ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgpu',\n  kernelFunc: acosh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nexport const addKernelFunc = binaryKernelFunc(\n    {opType: BinaryOpType.ADD, cpuKernelImpl: cpuAdd, supportsComplex: true});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgpu',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class AddNPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shapes: number[][]) {\n    this.outputShape = shapes[0];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'addN';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`let v${variable} = get${variable}ByOutputCoords(coords);`);\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    const userCode = `\n      ${main('index')} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${snippets.join('\\n        ')}\n            setOutputAtIndex(flatIndex, ${operation});\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {AddNPackedProgram} from '../addn_packed_webgpu';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  const program = new AddNPackedProgram(shapes);\n  return backend.runWebGPUProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgpu',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class TransposeSharedProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[]};\n  dispatch: [number, number, number];\n  // Note that the maximum number of workgroup invocations by webgpu is 256.\n  workgroupSize: [number, number, number] = [16, 16, 1];\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [0], y: [1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]);\n\n    this.shaderKey = 'transposeShared';\n  }\n\n  getUserCode(): string {\n    util.assert(\n        this.workgroupSize[0] === this.workgroupSize[1],\n        () => `Must be a square tile, current tile shape is ${\n            this.workgroupSize[0]} x ${this.workgroupSize[1]}`);\n    const tileSize = this.workgroupSize[0];\n    const userCode = `\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${\n        this.workgroupSize[0]}>;\n      ${main()} {\n        var x = i32(workgroupId.x) * ${tileSize} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${tileSize} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${tileSize} + i32(localId.x);\n        y = i32(workgroupId.x) * ${tileSize} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransposeProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  shaderKey: string;\n  outputShape: number[];\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  newDim: number[];\n  size = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.newDim = newDim;\n    this.shaderKey = `transpose_${newDim}`;\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let resRC = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${\n        this.outputShape.length}D(\n              ${dtype}(${switched}), uniforms.aShape)]);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = `resRC.${getCoordsXYZ(i)}`;\n  }\n\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Transpose, TransposeAttrs, TransposeInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {transposeImplCPU as cpuTranspose} from '../kernel_utils/shared';\n\nimport {TransposeSharedProgram} from '../transpose_shared_webgpu';\nimport {TransposeProgram} from '../transpose_webgpu';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webgpuBackend = backend;\n\n  const xRank = x.shape.length;\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = webgpuBackend.tensorMap.get(x.dataId);\n    const values = xData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  if (x.shape.length === 2 && util.arraysEqual(perm, [1, 0])) {\n    const program = new TransposeSharedProgram(x.shape, perm);\n    return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n  const program = new TransposeProgram(x.shape, perm);\n  return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgpu',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ReduceProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  variableNames = ['x'];\n  uniforms = 'reduceSize : i32,';\n  reduceType: 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum';\n  inputShape: number[];\n  size = true;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum') {\n    this.inputShape = [reduceInfo.batchSize, reduceInfo.inSize];\n    const [outputShape, ] =\n        backend_util.computeOutAndReduceShapes(this.inputShape, [1]);\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n    // dispatch size.\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n\n    this.reduceType = reduceType;\n    this.shaderKey = `reduce_${reduceType}`;\n  }\n\n  getUserCode(): string {\n    let reduceOp = ``;\n    let initValue = '0.0';\n    const workgroupSizeX = this.workgroupSize[0];\n    if (this.reduceType === 'min' || this.reduceType === 'max') {\n      reduceOp = `\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${\n          this.reduceType === 'min' ? '<' : '>'} bestValue)\n           {  bestValue = candidate; }`;\n      initValue = 'f32(x[offset])';\n    } else if (this.reduceType === 'sum' || this.reduceType === 'mean') {\n      reduceOp = ' bestValue = bestValue + candidate; ';\n    } else if (this.reduceType === 'prod') {\n      reduceOp = ' bestValue = bestValue * candidate; ';\n      initValue = '1.0';\n    } else if (this.reduceType === 'all') {\n      reduceOp = ' bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ';\n      initValue = '1.0';\n    } else if (this.reduceType === 'any') {\n      reduceOp = ' bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ';\n      initValue = '0.0';\n    }\n\n    const outputSnippet = this.reduceType === 'mean' ?\n        // tslint:disable-next-line:max-line-length\n        `setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));` :\n        `setOutputAtIndex(outputIndex, bestValue);`;\n\n    const sharedMemorySnippet = `\n         var<workgroup> xBestValues : array<f32, ${workgroupSizeX}>;\n       `;\n\n    const userCode = `\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ${sharedMemorySnippet}\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${\n        this.outputShape.length === 1 ?\n            'outputCoords' :\n            'outputCoords[0]'} * uniforms.reduceSize;\n          return offset;\n       }\n       ${main('index')} {\n         let outputIndex = index / ${workgroupSizeX};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${initValue};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${workgroupSizeX}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${workgroupSizeX}) {\n           let candidate = f32(x[offset + k]);\n           ${reduceOp}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${workgroupSizeX}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${reduceOp}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${outputSnippet}\n        }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reshape} from '../kernels/Reshape';\nimport {transpose} from '../kernels/Transpose';\nimport {ReduceProgram} from '../reduce_webgpu';\n\nimport {maxImplCPU} from './shared';\nimport {prodImplCPU} from './shared';\n\ntype ReduceTypes = 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum';\n\nexport function reduce(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    reduceType: ReduceTypes, backend: WebGPUBackend): TensorInfo {\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n\n  let input = x;\n  if (permutedAxes != null) {\n    input = transpose({inputs: {x}, attrs: {perm: permutedAxes}, backend});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(input);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(reduceType, axes, xRank);\n\n  const [reduceOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, axes);\n  let resOutShape = reduceOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    resOutShape = backend_util.expandShapeToKeepDim(reduceOutShape, origAxes);\n  }\n\n  let res;\n  if ((reduceType === 'max' || reduceType === 'prod') &&\n      backend.shouldExecuteOnCPU([input])) {\n    const xVals = backend.tensorMap.get(input.dataId).values as TypedArray;\n    switch (reduceType) {\n      case 'max':\n        const outValues = maxImplCPU(\n            xVals, util.sizeFromShape(reduceShape), resOutShape, x.dtype);\n        res = backend.makeTensorInfo(resOutShape, x.dtype, outValues);\n        break;\n      case 'prod':\n        const {outVals, outShape, outDtype} =\n            prodImplCPU(input.shape, input.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n        break;\n      default:\n        throw new Error(\n            `${reduceType} CPU implementation is not yet supported.`);\n    }\n  } else {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(input.shape);\n    const batchSize = xSize / inSize;\n\n    const reduceInfo = {windowSize: inSize, inSize, batchSize, outSize: 1};\n    const dtype = reduceType === 'mean' ? 'float32' : sumOutType(x.dtype);\n    const uniformData = [\n      {type: 'int32', data: [inSize]},\n    ];\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const reduced =\n        backend.runWebGPUProgram(program, [input], dtype, uniformData);\n    toDispose.push(reduced);\n\n    res = reshape({inputs: {x: reduced}, attrs: {shape: resOutShape}, backend});\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return res;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function all(\n    args: {inputs: AllInputs, attrs: AllAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'all', backend);\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgpu',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function any(\n    args: {inputs: AnyInputs, attrs: AnyAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'any', backend);\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgpu',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ArgMinMaxProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  variableNames = ['x'];\n  uniforms = 'infinityValue : f32,';\n  inputShape: number[];\n  reductionFactor: number;\n  op: string;\n  size = true;\n  private type: string;\n\n  constructor(inputShape: number[], axis: number, reduceType: 'min'|'max') {\n    const axes = [axis];\n\n    this.op = reduceType === 'min' ? '<' : '>';\n\n    // |outShape| is the shape with the removed axis\n    const [outputShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(inputShape, axes);\n\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // The shared algorithm is mainly used for large reduce size. It fully\n    // utilizes the threads in one workgroup to do the reduction. However,\n    // when the reduce size is very small or the output shape is too large. It's\n    // better to use the plain algorithm to reduce the number of workgroups to\n    // speedup. The threthold can be further tuned.\n    if (util.sizeFromShape(reduceShape) < 32 ||\n        util.sizeFromShape(outputShape) > 1000) {\n      this.type = 'plain';\n      this.dispatch = computeDispatch(\n          this.dispatchLayout, this.outputShape, this.workgroupSize);\n    } else {\n      this.type = 'shared';\n      // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n      // dispatch size.\n      this.dispatch =\n          computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n    }\n\n    this.inputShape = inputShape;\n    this.shaderKey = `argMinMax_${this.op}_${this.type}`;\n  }\n\n  getUserCode(): string {\n    const workgroupSizeX = this.workgroupSize[0];\n    const getInputShapeLastDim = () => {\n      if (this.inputShape.length === 1) {\n        return 'uniforms.xShape';\n      } else {\n        return `uniforms.xShape.${getCoordsXYZ(this.inputShape.length - 1)}`;\n      }\n    };\n\n    const splitOutputCoords = () => {\n      let snippet = '';\n      if (this.outputShape.length === 1) {\n        if (this.inputShape.length !== 1) {\n          snippet += 'outputCoords,';\n        }\n      } else {\n        for (let i = 0; i < this.outputShape.length; i++) {\n          snippet += `outputCoords.${getCoordsXYZ(i)},`;\n        }\n      }\n      return snippet;\n    };\n\n    if (this.type === 'shared') {\n      const sharedMemorySnippet = `\n      var<workgroup> xBestIndices : array<i32, ${workgroupSizeX}>;\n      var<workgroup> xBestValues : array<f32, ${workgroupSizeX}>;\n    `;\n      const userCode = `\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ${sharedMemorySnippet}\n\n      ${main('index')} {\n        let outputIndex = index / ${workgroupSizeX};\n        let reduceLength = ${getInputShapeLastDim()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${workgroupSizeX}) {\n          let candidate = getX(${splitOutputCoords()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${workgroupSizeX}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `;\n      return userCode;\n    } else {\n      const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${splitOutputCoords()} 0);\n          let reduceLength = ${getInputShapeLastDim()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${splitOutputCoords()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `;\n      return userCode;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: WebGPUBackend, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'max');\n  const uniformData = [{type: 'float32', data: [Number.NEGATIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgpu',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: WebGPUBackend, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'min');\n  const uniformData = [{type: 'float32', data: [Number.POSITIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgpu',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const asin = unaryKernelFunc({opType: UnaryOpType.ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgpu',\n  kernelFunc: asin\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const asinh = unaryKernelFunc({opType: UnaryOpType.ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgpu',\n  kernelFunc: asinh\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const atan = unaryKernelFunc({opType: UnaryOpType.ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgpu',\n  kernelFunc: atan\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const atan2 = binaryKernelFunc({opType: BinaryOpType.ATAN2});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgpu',\n  kernelFunc: atan2\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const atanh = unaryKernelFunc({opType: UnaryOpType.ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgpu',\n  kernelFunc: atanh\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Pool2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms =\n      `stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,`;\n  // TODO(jiajia.qin@intel.com): Dynamically choose different workgroupSize for\n  // different output shapes.\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  poolType: 'max'|'avg';\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg') {\n    this.outputShape = convInfo.outShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `pool2D_${poolType}`;\n    this.poolType = poolType;\n  }\n\n  getUserCode(): string {\n    let updateSnippet = `resultValue = max(value, resultValue);`;\n    if (this.poolType === 'avg') {\n      updateSnippet = `resultValue = resultValue + value; count = count + 1.0;`;\n    }\n\n    let returnValue = `resultValue`;\n    if (this.poolType === 'avg') {\n      returnValue = `resultValue / max(count, 1.0)`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          var resultValue = ${\n        this.poolType === 'avg' ? '0.0' : '-1.0 / pow(10.0, -20.0)'};\n          var count = 0.0;\n\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, coords[3]);\n              ${updateSnippet}\n            }\n          }\n\n          setOutputAtIndex(index, ${returnValue});\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class PoolWithFilterSizeEqualsOneProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = `stride : vec2<i32>,`;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'poolWithFilterSizeEqualsOne';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.stride;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: WebGPUBackend, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  return reduce(x, reductionIndices, keepDims, 'max', backend);\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgpu',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function mean(\n    args: {inputs: MeanInputs, attrs: MeanAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'mean', backend);\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgpu',\n  kernelFunc: mean as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool2DProgram} from '../pool2d_webgpu';\nimport {PoolWithFilterSizeEqualsOneProgram} from '../pool_filtersizeone_webgpu';\n\nimport {identity} from './Identity';\nimport {max} from './Max';\nimport {mean} from './Mean';\nimport {reshape} from './Reshape';\n\ntype PoolType = 'max'|'avg';\nexport function poolImpl(\n    x: TensorInfo, convInfo: backend_util.Conv2DInfo, poolType: PoolType,\n    backend: WebGPUBackend): TensorInfo {\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n\n  if (convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.filterHeight === convInfo.inHeight && convInfo.batchSize === 1 &&\n      convInfo.padInfo.type === 'VALID') {\n    const length = x.shape.length;\n    const reshapeX = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: [\n          x.shape[length - 3] * x.shape[length - 2] /* height * width */,\n          x.shape[length - 1] /* channel */\n        ]\n      }\n    });\n    let reduceX;\n    if (poolType === 'avg') {\n      reduceX = mean(\n          {inputs: {x: reshapeX}, backend, attrs: {axis: 0, keepDims: false}});\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      reduceX = max({\n        inputs: {x: reshapeX},\n        backend,\n        attrs: {reductionIndices: 0, keepDims: false}\n      });\n    }\n\n    const result = reshape(\n        {inputs: {x: reduceX}, backend, attrs: {shape: convInfo.outShape}});\n    backend.disposeData(reshapeX.dataId);\n    backend.disposeData(reduceX.dataId);\n    return result;\n  }\n\n  let program: Pool2DProgram|PoolWithFilterSizeEqualsOneProgram;\n  const dimensions =\n      [{type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1) {\n    program = new PoolWithFilterSizeEqualsOneProgram(convInfo);\n  } else {\n    if (poolType === 'avg') {\n      program = new Pool2DProgram(convInfo, 'avg');\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      program = new Pool2DProgram(convInfo, 'max');\n    }\n\n    dimensions.push(\n        {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        },\n        {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n          type: 'int32',\n          data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x], x.dtype, dimensions);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {poolImpl} from './Pool_impl';\n\nexport function avgPool(\n    args: {inputs: AvgPoolInputs, backend: WebGPUBackend, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  return poolImpl(x, convInfo, 'avg', backend);\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgpu',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class AvgPool2DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms =\n      `stride : vec2<i32>, pads : vec2<i32>, dilation : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `avg_pool2d_backprop`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilation[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.stride[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilation[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.stride[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool2d_backprop_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {assertNotComplex} from '../webgpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const program = new AvgPool2DBackpropProgram(convInfo);\n  const avgMultiplier = 1 / (convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    },\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'float32', data: [avgMultiplier]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgpu',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SliceProgram implements WebGPUProgram {\n  variableNames = ['source'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  rank: number;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  start: number[];\n  size = true;\n\n  constructor(start: number[], destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.start = start;\n    this.uniforms = `start : ${getCoordsDataType(start.length)}, `;\n    this.shaderKey = 'slice';\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getCoords(this.rank);\n    let coordSum;\n    if (this.start.length === 1) {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc = uniforms.start + coords;`;\n      });\n    } else {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc.${coords[i]} = uniforms.start.${\n            getCoordsXYZ(i)} + coords.${coords[i]};`;\n      });\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${dtype};\n          let coords = getCoordsFromIndex(index);\n          ${coordSum.join('\\n')}\n          setOutputAtIndex(index, getSource(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(coord => `sourceLoc.${coord}`).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_webgpu';\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: WebGPUBackend, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xBufferInfo = backend.tensorMap.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xBufferInfo.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // TODO(xing.xu): Add shadow slice support.\n  const program = new SliceProgram($begin, $size);\n  const uniformData = [{type: 'int32', data: $begin}];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: WebGPUBackend,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgpu',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nconst writeSnippet = `\n  fn bincount_write(index: i32, value: f32) {\n    ${atomicAddSnippet('&result[index]', 'value', 'float32')}\n  }\n`;\n\nconst binaryWriteSnippet = `\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n`;\n\nexport class BincountProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'binCountSize : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  hasWeights = true;\n  binaryOutput = false;\n  rank: number;\n\n  constructor(\n      shape: [number]|[number, number], hasWeights: boolean,\n      binaryOutput = false) {\n    this.outputShape = shape;\n    this.rank = shape.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.binaryOutput = binaryOutput;\n    if (binaryOutput) {\n      this.atomic = false;\n    }\n    this.hasWeights = hasWeights;\n    if (this.hasWeights) {\n      this.variableNames.push('w');\n    }\n    this.shaderKey =\n        `bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${this.binaryOutput ? binaryWriteSnippet : writeSnippet}\n  ${main('index')} {\n    ${\n        this.rank === 1 ?\n            `if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${\n                this.binaryOutput ? 1. :\n                                    (this.hasWeights ? 'getW(index)' : '1.')};\n        bincount_write(indexVal, value);\n      }\n    }` :\n            `let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${\n                this.binaryOutput ?\n                    1. :\n                    (this.hasWeights ? 'getW(coord[0], coord[1])' : '1.')};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BincountProgram} from '../bincount_webgpu';\n\nimport {fill} from './Fill';\n\nexport function bincount(\n    args:\n        {inputs: BincountInputs, backend: WebGPUBackend, attrs: BincountAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const outputSize: [number] = [size];\n  const dtype = weights.dtype;\n\n  const output = fill({backend, attrs: {shape: outputSize, value: 0, dtype}});\n  const program = new BincountProgram([xSize], hasWeights);\n  const uniformData = [{type: 'int32', data: [size]}];\n  const bincountInputs: TensorInfo[] = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(\n      program, bincountInputs, dtype, uniformData, output);\n\n  return res;\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgpu',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU as cpuNotEqual} from '../kernel_utils/shared';\n\nexport const notEqual = binaryKernelFunc({\n  opType: BinaryOpType.NOT_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuNotEqual\n});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgpu',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {castImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: WebGPUBackend, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO: Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeData(floatX.dataId);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeData(realPart.dataId);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.tensorMap.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeData(zerosTensorInfo.dataId);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function int(input: TensorInfo, backend: WebGPUBackend): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, UnaryOpType.TO_INT);\n  const output = backend.runWebGPUProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const ceil =\n    unaryKernelFunc({opType: UnaryOpType.CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgpu',\n  kernelFunc: ceil\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ClipVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  variableNames = ['A'];\n  uniforms = 'minVal : f32, maxVal : f32,';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 4;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isVec4 = true;\n  size = true;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'clipVec4';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ClipProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  variableNames = ['A'];\n  uniforms = 'minVal : f32, maxVal : f32,';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  minVal: number;\n  maxVal: number;\n  size = true;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'clip';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {ClipVec4Program} from '../clip_vec4_webgpu';\nimport {ClipProgram} from '../clip_webgpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: WebGPUBackend,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program: ClipProgram|ClipVec4Program;\n  const uniformData = [\n    {type: 'float32', data: [clipValueMin]},\n    {type: 'float32', data: [clipValueMax]}\n  ];\n  if (util.sizeFromShape(x.shape) % 4 === 0) {\n    program = new ClipVec4Program(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgpu',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ConcatProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = '';\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  offsetLength: number;\n\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape =\n        backend_util.computeOutShape(shapes, 1 /* axis */) as [number, number];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.offsetLength = shapes.length - 1;\n    for (let i = 0; i < this.offsetLength; i++) {\n      this.uniforms += `offset${i} : i32,`;\n    }\n    this.shaderKey = 'concat';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    if (this.offsetLength > 0) {\n      snippets.push(\n          `if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }`);\n      for (let i = 1; i < this.offsetLength; i++) {\n        snippets.push(\n            `else if (yC < uniforms.offset${[i]}){ ` +\n            `setOutputAtCoords(coords.x, coords.y, getT${\n                i}(yR, yC - uniforms.offset${i - 1})); }`);\n      }\n      const lastIndex = this.offsetLength;\n      const lastShiftIndex = this.offsetLength - 1;\n      snippets.push(`else { setOutputAtCoords(coords.x, coords.y, getT${\n          lastIndex}(yR, yC - uniforms.offset${lastShiftIndex})); }`);\n    } else {\n      snippets.push(`setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));`);\n    }\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${snippets.join('\\n        ')}\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgpu',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ConcatProgram} from '../concat_webgpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: WebGPUBackend): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeData(r.dataId));\n    imags.forEach(i => backend.disposeData(i.dataId));\n    backend.disposeData(realConcated.dataId);\n    backend.disposeData(imagConcated.dataId);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgpu doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeData(t.dataId));\n\n    return outInfo;\n  }\n\n  // There is a storage buffer limitation in compute stage, one for output so\n  // the maximum for input is limits.maxStorageBuffersPerShaderStage - 1\n  const maxInputNum = backend.device.limits.maxStorageBuffersPerShaderStage - 1;\n  if (inputs.length > maxInputNum) {\n    const reducedInputs = [];\n    for (let i = 0; i < inputs.length; i += maxInputNum) {\n      const subArray = inputs.slice(i, i + maxInputNum);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeData(i.dataId);\n    }\n\n    return result;\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const shapes = (tensors2D).map(t => t.shape as [number, number]);\n  const program = new ConcatProgram(shapes);\n\n  const uniformData: Array<{type: string; data: number[]}> = [];\n  const offsets: number[] = new Array(shapes.length - 1);\n  if (offsets.length > 0) {\n    offsets[0] = shapes[0][1];\n    uniformData.push({type: 'int32', data: [offsets[0]]});\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n      uniformData.push({type: 'int32', data: [offsets[i]]});\n    }\n  }\n\n  const res = backend.runWebGPUProgram(\n      program, tensors2D, tensors2D[0].dtype, uniformData);\n  tensors2D.forEach(r => backend.disposeData(r.dataId));\n\n  const reshapedResult =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n  backend.disposeData(res.dataId);\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: WebGPUBackend) {\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(t => reshape({\n                                 inputs: {x: t},\n                                 backend,\n                                 attrs: {\n                                   shape: [\n                                     util.sizeFromShape(t.shape.slice(0, axis)),\n                                     util.sizeFromShape(t.shape.slice(axis))\n                                   ]\n                                 }\n                               }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args: {inputs: ConcatInputs, attrs: ConcatAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgpu',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\nimport {WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupSizeForConv2d, computeWorkPerThreadForConv2d} from './webgpu_util';\n\nfunction conv2dCommonSnippet(\n    isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean,\n    fitInner: boolean, addBias = false,\n    activation: backend_util.Activation = null,\n    hasPreluActivationWeights = false, innerElementSizeX = 4,\n    innerElementSizeW = 4, innerElementSize = 4) {\n  const getXSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'resData = x[xIndex];';\n      case 3:\n        return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n      case 4:\n        return 'resData = x[xIndex / 4];';\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return W[row * uniforms.wShape[3] + colIn];';\n      case 4:\n        return 'return W[row * uniforms.wShape[3] / 4 + colIn];';\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const coordASnippet = isChannelsLast ? `\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ` :\n                                         `\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      `;\n\n  const coordResSnippet = isChannelsLast ? `\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ` :\n                                           `\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      `;\n\n  const xHight = isChannelsLast ? 'uniforms.xShape[1]' : 'uniforms.xShape[2]';\n  const xWidth = isChannelsLast ? 'uniforms.xShape[2]' : 'uniforms.xShape[3]';\n  const row = isChannelsLast ? 'row' : 'col';\n  const col = isChannelsLast ? 'col' : 'row';\n  const readXSnippet = `\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${\n      isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n      let outRow = ${row} / outWidth;\n      let outCol = ${row} % outWidth;\n\n      let WRow = ${col} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${col} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n      let xCh = ${col} % inChannels;\n      var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${xHight} && xCol >= 0 && xCol < ${xWidth}) {\n        ${coordASnippet}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${getXSnippet(innerElementSizeX)}\n      }\n      return resData;`;\n\n  const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n      let col = colIn * ${innerElementSizeX};\n      ${readXSnippet}` :\n                                                            `\n      let col = colIn * ${innerElementSizeX};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                   (fitInner && fitBOuter ? `\n      let col = colIn * ${innerElementSizeX};\n      ${readXSnippet}` :\n                                                            `\n      let col = colIn * ${innerElementSizeX};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n  const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n  const resType = typeSnippet(innerElementSize);\n  const aType = isChannelsLast ? typeSnippet(innerElementSizeX) :\n                                 typeSnippet(innerElementSizeW);\n  const bType = isChannelsLast ? typeSnippet(innerElementSizeW) :\n                                 typeSnippet(innerElementSizeX);\n  const userCode = `\n      ${\n      activationFnSnippet(\n          activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n        ${isChannelsLast ? sampleX : sampleW}\n      }\n\n      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n        ${isChannelsLast ? sampleW : sampleX}\n      }\n\n      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n        let col = colIn * ${innerElementSize};\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${\n      isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n        ${coordResSnippet}\n        ${biasActivationSnippet(addBias, activation)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`;\n  return userCode;\n}\n\nexport class Conv2DMMProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  variableTypes: string[];\n  uniforms =\n      `filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  isChannelsLast: boolean;\n  fitAOuter: boolean;\n  fitBOuter: boolean;\n  fitInner: boolean;\n  tileAOuter: number;\n  tileBOuter: number;\n  tileInner: number;\n  innerElementSize: number;\n  isVec4?: boolean;\n  private sequentialAccessByThreads: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, dimAOuter: number, dimBOuter: number,\n      dimInner: number, addBias = false,\n      activation: backend_util.Activation = null,\n      hasPreluActivationWeights = false, sequentialAccessByThreads = false) {\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.isVec4 =\n        (((convInfo.inChannels % 4 === 0 || convInfo.inChannels % 3 === 0) &&\n          this.isChannelsLast) ||\n         (convInfo.outWidth % 4 === 0 && !this.isChannelsLast)) &&\n        convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = this.isChannelsLast ? {x: [3], y: [1, 2], z: [0]} :\n                                                {x: [2, 3], y: [1], z: [0]};\n    this.workgroupSize = computeWorkgroupSizeForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    if (this.isVec4) {\n      if (this.isChannelsLast && convInfo.inChannels % 4 !== 0) {\n        this.innerElementSize = 3;\n        this.variableTypes = ['f32', 'vec4<f32>'];\n      } else {\n        this.innerElementSize = 4;\n        this.variableTypes = ['vec4<f32>', 'vec4<f32>'];\n      }\n\n      if (addBias) {\n        this.variableNames.push('bias');\n        this.variableTypes.push('vec4<f32>');\n      }\n\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n        this.variableTypes.push('vec4<f32>');\n      }\n    } else {\n      this.innerElementSize = this.elementsPerThread[0];\n      if (addBias) {\n        this.variableNames.push('bias');\n      }\n\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n      }\n    }\n\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n\n    this.tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1];\n    this.tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0];\n    this.tileInner = Math.max(\n        this.workgroupSize[0] * this.innerElementSize, this.workgroupSize[1]);\n\n    this.fitAOuter = dimAOuter % this.tileAOuter === 0;\n    this.fitBOuter = dimBOuter % this.tileBOuter === 0;\n    this.fitInner = dimInner % this.tileInner === 0;\n\n    this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${\n        this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${\n        this.innerElementSize}_${this.isChannelsLast}_${\n        this.sequentialAccessByThreads}`;\n  }\n\n  getUserCode(): string {\n    const matMulSource = this.isVec4 ?\n        makeMatMulPackedVec4Source(\n            this.elementsPerThread, this.workgroupSize, !this.isChannelsLast,\n            this.tileInner) :\n        makeMatMulPackedSource(\n            this.elementsPerThread, this.workgroupSize, !this.isChannelsLast,\n            this.tileInner, false, null, this.sequentialAccessByThreads);\n    const elementsSize =\n        this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];\n    const userCode = `\n    ${\n        conv2dCommonSnippet(\n            this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner,\n            this.addBias, this.activation, this.hasPreluActivationWeights,\n            elementsSize[0], elementsSize[1], elementsSize[2])}\n    ${matMulSource}\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class Conv2DNaiveProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms =\n      'filterDims: vec2<i32>, pad: vec2<i32>, stride: vec2<i32>, dilation: vec2<i32>,';\n  workgroupSize: [number, number, number] = [4, 4, 8];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  isChannelsLast: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null,\n      hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.dispatchLayout = this.isChannelsLast ? {x: [2], y: [1], z: [0, 3]} :\n                                                {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.shaderKey = `conv2dnaive_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n       ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivationWeights, false, 4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${\n        this.isChannelsLast ? `vec4<i32>(batch, row, col, chan);` :\n                              `vec4<i32>(batch, chan, row, col);`}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${biasActivationSnippet(this.addBias, this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${main('index')} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast ? `coords[3];` : `coords[1];`}\n         let outRow = ${this.isChannelsLast ? `coords[1];` : `coords[2];`}\n         let outCol = ${this.isChannelsLast ? `coords[2];` : `coords[3];`}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * row - uniforms.pad[0];\n             let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * col - uniforms.pad[1];\n             for (var xChannel = 0; xChannel < ${\n        this.isChannelsLast ? `uniforms.xShape[3];` :\n                              `uniforms.xShape[1];`} xChannel = xChannel + 1) {\n               ${\n        this.isChannelsLast ? `let v = readInp(batch, xRow, xCol, xChannel);` :\n                              `let v = readInp(batch, xChannel, xRow, xCol);`}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Im2ColProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  uniforms =\n      `pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,`;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(outputShape: number[], isChannelsLast: boolean) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = isChannelsLast;\n    this.shaderKey = `im2col_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n\n    const row = this.isChannelsLast ? 'coords[1]' : 'coords[2]';\n    const col = this.isChannelsLast ? 'coords[2]' : 'coords[1]';\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xRow, xCol, ch)' :\n                                              'getX(batch, ch, xRow, xCol)';\n\n    const userCode = `\n    ${main('index')} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${row};\n        let col = ${col};\n        let offsetY = (row / uniforms.outWidth) * uniforms.stride[0] - uniforms.pad[0];\n        let xRow = offsetY + uniforms.dilation[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${rowDim}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.stride[1] -\n              uniforms.pad[1];\n          let xCol = offsetX + uniforms.dilation[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${colDim}] && xCol >= 0) {\n            value = ${getXSnippet};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DMMProgram} from '../conv2d_mm_webgpu';\nimport {Conv2DNaiveProgram} from '../conv2d_naive_webgpu';\nimport {Im2ColProgram} from '../im2col_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\n\nimport {batchMatMulImpl} from './BatchMatMul_impl';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: WebGPUBackend,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// conv2dByMatMul fuses height and width into one dimension to compute\n// batchMatMul, so bias and activation weights are also supposed to fuse the two\n// dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nfunction conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n\n  const sameSize = isChannelsLast &&\n      convInfo.filterHeight === convInfo.inHeight &&\n      convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.padInfo.type === 'VALID';\n  const intermediates: TensorInfo[] = [];\n  let xReshaped;\n  let filterReshaped;\n\n  if (sameSize) {\n    const sharedDim =\n        convInfo.inHeight * convInfo.inWidth * convInfo.inChannels;\n    xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, convInfo.batchSize, sharedDim]}\n    });\n    filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, sharedDim, convInfo.outChannels]}\n    });\n  } else {\n    xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [\n              convInfo.batchSize, convInfo.inHeight * convInfo.inWidth,\n              convInfo.inChannels\n            ] :\n            [\n              convInfo.batchSize, convInfo.inChannels,\n              convInfo.inHeight * convInfo.inWidth\n            ]\n      }\n    });\n    filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n  }\n  intermediates.push(xReshaped);\n  intermediates.push(filterReshaped);\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? xReshaped : filterReshaped,\n    b: isChannelsLast ? filterReshaped : xReshaped,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape(\n      {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n  intermediates.push(result);\n\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n\n  return out;\n}\n\n// Implements the im2col algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nfunction conv2dWithIm2Col({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // row of a new matrix with shape [outHeight * outWidth,\n  // filterWidth * filterHeight * inChannels]. The filter is also rearranged so\n  // each output channel forms a col of a new matrix with shape [\n  // filterWidth * filterHeight * inChannels, outChannels]. The convolution is\n  // then computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    strideWidth,\n    strideHeight,\n    padInfo,\n    outWidth,\n    outHeight,\n    dilationWidth,\n    dilationHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = isChannelsLast ? [convInfo.batchSize, numCols, sharedDim] :\n                                      [convInfo.batchSize, sharedDim, numCols];\n\n  const im2ColProgram = new Im2ColProgram(x2ColShape, isChannelsLast);\n  const dimensions = [\n    {type: 'int32', data: [padInfo.top, padInfo.left]},      // Padding.\n    {type: 'int32', data: [strideHeight, strideWidth]},      // Stride.\n    {type: 'int32', data: [dilationHeight, dilationWidth]},  // Dilation.\n    {type: 'int32', data: [outWidth]},\n    {type: 'int32', data: [inChannels * filterWidth]},  // itemsPerBlockRow.\n    {type: 'int32', data: [inChannels]}\n  ];\n  const x2Col =\n      backend.runWebGPUProgram(im2ColProgram, [x], x.dtype, dimensions);\n\n  const intermediates: TensorInfo[] = [];\n  intermediates.push(x2Col);\n\n  const filterReshaped = reshape(\n      {inputs: {x: filter}, backend, attrs: {shape: [1, sharedDim, -1]}});\n  intermediates.push(filterReshaped);\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? x2Col : filterReshaped,\n    b: isChannelsLast ? filterReshaped : x2Col,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape(\n      {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n  intermediates.push(result);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n\n  return out;\n}\n\nexport function conv2DImpl({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const sameSize = isChannelsLast &&\n      convInfo.filterHeight === convInfo.inHeight &&\n      convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.padInfo.type === 'VALID';\n  const useNaiveConv2d = env().getBool('WEBGPU_USE_NAIVE_CONV2D_DEBUG');\n\n  if (!useNaiveConv2d &&\n      (sameSize ||\n       (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')))) {\n    return conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  }\n\n  const thresholdFlagValue = env().getNumber(\n    'WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL');\n  const thresholdToIncreaseWorkgroups =  thresholdFlagValue > 0 ?\n      thresholdFlagValue : backend.thresholdToIncreaseWorkgroups;\n  const workgroupsBy32x32 = convInfo.batchSize *\n      Math.ceil((convInfo.outHeight * convInfo.outWidth) / 32) *\n      Math.ceil(convInfo.outChannels / 32);\n  if (env().getBool('WEBGPU_CONV_SEPARATE_IM2COL_SHADER') ||\n      workgroupsBy32x32 <= thresholdToIncreaseWorkgroups) {\n    return conv2dWithIm2Col({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      preluActivationWeights,\n      leakyreluAlpha,\n      activation\n    });\n  }\n\n  let program: WebGPUProgram;\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [...padInfo]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}\n  ];\n  if (useNaiveConv2d) {\n    program = new Conv2DNaiveProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n  } else {\n    const dimAOuter = isChannelsLast ? convInfo.outHeight * convInfo.outWidth :\n                                       convInfo.outChannels;\n    const dimBOuter = isChannelsLast ? convInfo.outChannels :\n                                       convInfo.outHeight * convInfo.outWidth;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.inChannels;\n    dimensions.push(\n        {type: 'int32', data: [dimAOuter]}, {type: 'int32', data: [dimBOuter]},\n        {type: 'int32', data: [dimInner]});\n\n    // Experiments show that sequential access is more friendly for Intel GPUs.\n    const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n    program = new Conv2DMMProgram(\n        convInfo, dimAOuter, dimBOuter, dimInner, hasBias, activation,\n        hasPreluActivationWeights, sequentialAccessByThreads);\n  }\n\n  const intermediates: TensorInfo[] = [];\n  const inputVar: TensorInfo[] = [x, filter];\n  if (hasBias) {\n    if (!isChannelsLast && bias.shape.length === 1) {\n      bias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      intermediates.push(bias);\n    }\n    inputVar.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    if (!isChannelsLast && preluActivationWeights.shape.length === 1) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n    inputVar.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const out = backend.runWebGPUProgram(program, inputVar, x.dtype, dimensions);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return out;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {conv2DImpl} from './Conv2D_impl';\n\nexport function conv2d(\n    args: {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: WebGPUBackend}) {\n  const {inputs, attrs, backend} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  return conv2DImpl({x, filter, convInfo, backend});\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgpu',\n  kernelFunc: conv2d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Conv2DDerInputProgram implements WebGPUProgram {\n  variableNames = ['dy', 'W'];\n  uniforms =\n      'filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.shaderKey = `conv2DDerInput_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n    const channelDim = this.isChannelsLast ? 3 : 1;\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${channelDim}];\n\n        let dyCorner = vec2<i32>(coords[${rowDim}], coords[${\n        colDim}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              if (${this.isChannelsLast}) {\n                let xValue = getDy(batch, idyR, idyC, d2);\n                let wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd = dotProd + xValue * wValue;\n              } else {\n                let xValue = getDy(batch, d2, idyR, idyC);\n                let wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd = dotProd + xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n\nexport class Conv2DDerFilterProgram implements WebGPUProgram {\n  variableNames = ['x', 'dy'];\n  uniforms =\n      'pad : vec2<i32>, stride : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.shaderKey = `conv2DDerFilter_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.stride[0] - uniforms.pad[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.stride[1] - uniforms.pad[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_webgpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: WebGPUBackend,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.batchSize]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.inHeight]},\n    {type: 'int32', data: [convInfo.inWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [x, dy], x.dtype, uniformData);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {typeSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\nimport {WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupSizeForConv2d, computeWorkPerThreadForConv2d} from './webgpu_util';\n\nfunction conv2dTransposeCommonSnippet(innerElementSize = 4) {\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return W[getIndexFromCoords4D(coord, uniforms.wShape)];';\n      case 4:\n        return `\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n\n  const readASnippet = `\n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${\n      innerElementSize}];`;\n\n  const sampleA = `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readASnippet}\n      }\n      return ${typeSnippet(innerElementSize)}(0.0);`;\n\n  const userCode = `\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${\n      typeSnippet(innerElementSize)} {\n    let col = colIn * ${innerElementSize};\n    ${sampleA}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${\n      typeSnippet(innerElementSize)} {\n    let col = colIn * ${innerElementSize};\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${getWSnippet(innerElementSize)}\n    }\n    return ${typeSnippet(innerElementSize)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${\n      typeSnippet(innerElementSize)}) {\n    let col = colIn * ${innerElementSize};\n    if (row < uniforms.dimAOuter && (col + ${\n      innerElementSize - 1}) < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${\n      innerElementSize}] = value;\n    }\n  }`;\n  return userCode;\n}\n\nexport class Conv2DDerInputMMProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  variableTypes: string[];\n  uniforms =\n      'filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,';\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  isVec4?: boolean;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n    this.isVec4 =\n        convInfo.inChannels % 4 === 0 && convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = {x: [3], y: [1, 2], z: [0]};\n    this.workgroupSize = computeWorkgroupSizeForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    if (this.isVec4) {\n      this.variableTypes = ['vec4<f32>', 'f32'];\n    }\n\n    this.shaderKey =\n        `conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`;\n  }\n\n  getUserCode(): string {\n    const matMulSource = this.isVec4 ?\n        makeMatMulPackedVec4Source(this.elementsPerThread, this.workgroupSize) :\n        makeMatMulPackedSource(this.elementsPerThread, this.workgroupSize);\n    const userCode = `\n    ${conv2dTransposeCommonSnippet(this.isVec4 ? 4 : 1)}\n    ${matMulSource}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DDerInputMMProgram} from '../conv_backprop_mm_webgpu';\nimport {Conv2DDerInputProgram} from '../conv_backprop_webgpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.batchSize, convInfo.outHeight, convInfo.outWidth,\n        convInfo.outChannels\n      ]\n    },\n  ];\n  let program: Conv2DDerInputProgram|Conv2DDerInputMMProgram;\n  // When filter size is small, Conv2DDerInputProgram is much faster than\n  // Conv2DDerInputMMProgram.\n  if (env().getBool('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE') ||\n      convInfo.filterHeight <= 2 && convInfo.filterWidth <= 2 &&\n          convInfo.outChannels <= 16 && convInfo.inChannels === 1) {\n    program = new Conv2DDerInputProgram(convInfo);\n  } else {\n    program = new Conv2DDerInputMMProgram(convInfo);\n    const dimAOuter = convInfo.inHeight * convInfo.inWidth;\n    const dimBOuter = convInfo.inChannels;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.outChannels;\n    dimensions.push(\n        {type: 'uint32', data: [dimAOuter]},\n        {type: 'uint32', data: [dimBOuter]},\n        {type: 'uint32', data: [dimInner]});\n  }\n  return backend.runWebGPUProgram(program, [dy, filter], 'float32', dimensions);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const cos = unaryKernelFunc({opType: UnaryOpType.COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgpu',\n  kernelFunc: cos\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const cosh = unaryKernelFunc({opType: UnaryOpType.COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgpu',\n  kernelFunc: cosh\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class CropAndResizeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  uniforms = 'extrapolationValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  methodId: number;\n  cropHeightBiggerThan1: boolean;\n  cropWidthBiggerThan1: boolean;\n  size = true;\n\n  constructor(\n      channnel: number, boxShape: [number, number], cropSize: [number, number],\n      method: 'bilinear'|'nearest') {\n    const [numBoxes, ] = boxShape;\n    this.outputShape = [numBoxes, cropSize[0], cropSize[1], channnel];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.methodId = method === 'bilinear' ? 1 : 0;\n    this.cropHeightBiggerThan1 = this.outputShape[1] > 1;\n    this.cropWidthBiggerThan1 = this.outputShape[2] > 1;\n    this.shaderKey = `cropAndResize_${this.methodId}_${\n        this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;\n  }\n\n  getUserCode(): string {\n    const [inputHeightFloat, inputWidthFloat] =\n        [`f32(uniforms.imageShape[1] - 1)`, `f32(uniforms.imageShape[2] - 1)`];\n\n    const [heightRatio, heightScale, inY] = this.cropHeightBiggerThan1 ?\n        [\n          `(${inputHeightFloat} / f32(uniforms.outShape[1] - 1))`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + f32(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = this.cropWidthBiggerThan1 ?\n        [\n          `(${inputWidthFloat} / f32(uniforms.outShape[2] - 1))`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + f32(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${heightRatio});\n        let width_ratio = f32(${widthRatio});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${heightScale};\n        let width_scale = ${widthScale};\n        let in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CropAndResizeProgram} from '../crop_and_resize_webgpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: WebGPUBackend,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape[3], boxes.shape as [number, number], cropSize, method);\n  const uniformData = [{type: 'float32', data: [extrapolationValue]}];\n  return backend.runWebGPUProgram(\n      program, [image, boxes, boxInd], 'float32', uniformData);\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgpu',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number];\n  // pow(i32, i32) is not supported, use pow(f32, f32) instead.\n  uniforms = 'index : f32,';\n  size = true;\n  exclusive: boolean;\n  reverse: boolean;\n  op: CumOpType;\n\n  constructor(\n      op: CumOpType, shape: number[], exclusive: boolean, reverse: boolean) {\n    this.workgroupSize = [128, 1, 1];\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.exclusive = exclusive;\n    this.reverse = reverse;\n    this.op = op;\n    this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = this.exclusive ? initVal :\n                                 `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (this.exclusive) {\n      condition = this.reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = this.reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = this.reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (this.reverse ? 'end + pow2' : 'end - pow2');\n    }\n    return `\n      ${main('index')} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${getFinalCoord(rank, 'coords', this.op)};\n         var val = ${val};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${condition}) {\n           let idx = ${idxString};\n           ${getFinalCoord(rank, 'coords', this.op)} = idx;\n           val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType, CumProgram} from '../cum_webgpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: WebGPUBackend, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGPU cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const prevResult = result;\n    const uniformData = [{type: 'float32', data: [i]}];\n    result =\n        backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    const uniformData = [{type: 'float32', data: [0]}];\n    result =\n        backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeData(result.dataId);\n    backend.disposeData(permutedX.dataId);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType} from '../cum_webgpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: WebGPUBackend, attrs: CumprodAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgpu',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType} from '../cum_webgpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: WebGPUBackend, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgpu',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BincountProgram} from '../bincount_webgpu';\n\nimport {fill} from './Fill';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: WebGPUBackend,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  const xRankOne = x.shape.length === 1;\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const dtype = weights.dtype;\n  const xSize: [number]|[number, number] =\n      xRankOne ? [x.shape[0]] : [x.shape[0], x.shape[1]];\n  const outputSize: [number]|[number, number] =\n      xRankOne ? [size] : [x.shape[0], size];\n\n  const output = fill({backend, attrs: {shape: outputSize, value: 0, dtype}});\n  const program = new BincountProgram(xSize, hasWeights, binaryOutput);\n  const uniformData = [{type: 'int32', data: [size]}];\n  const bincountInputs: TensorInfo[] = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(\n      program, bincountInputs, dtype, uniformData, output);\n\n  return res;\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgpu',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthToSpaceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  dataFormat: string;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  uniforms = 'blockSize : i32,';\n\n  constructor(outputShape: number[], dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `depthToSpace_${dataFormat}`;\n    this.dataFormat = dataFormat;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`;\n    return userCode;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `uniforms.outShape[3]`;\n    } else {\n      return `uniforms.outShape[1]`;\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthToSpaceProgram} from '../depth_to_space_webgpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: WebGPUBackend,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const uniformData = [\n    {type: 'int32', data: [blockSize]},\n  ];\n\n  const program = new DepthToSpaceProgram(outputShape, dataFormat);\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgpu',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class DepthwiseConv2DNCHWSharedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pad : vec2<i32>, inDims : vec2<i32>,`;\n  workgroupSize: [number, number, number] = [16, 16, 1];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  filterHeight: number;\n  filterWidth: number;\n\n  constructor(\n      outputShape: number[], filterHeight: number, filterWidth: number,\n      addBias = false, activation: backend_util.Activation = null,\n      hasPreluActivation = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.filterHeight = filterHeight;\n    this.filterWidth = filterWidth;\n    this.shaderKey = `depthwiseNCHW_${this.activation}_${this.filterHeight}_${\n        this.filterWidth}`;\n  }\n\n  getUserCode(): string {\n    const filterSize = this.filterWidth * this.filterHeight;\n    const flatWorkgroupSize =\n        this.workgroupSize[0] * this.workgroupSize[1] * this.workgroupSize[2];\n    const tileAHeight = this.workgroupSize[1] + this.filterHeight - 1;\n    const tileAWidth = this.workgroupSize[0] + this.filterWidth - 1;\n\n    const userCode = `\n      ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivation, false, 4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${\n        tileAHeight}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${\n        this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${main()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pad;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${\n        tileAHeight}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${\n        tileAWidth}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${\n        filterSize < flatWorkgroupSize ?\n            `if (wIndex < ${filterSize})` :\n            `for(; wIndex < ${filterSize}; wIndex = wIndex + ${\n                flatWorkgroupSize})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class DepthwiseConv2DVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = 'pad : vec2<i32>, inDims : vec2<i32>,';\n  workgroupSize: [number, number, number] = [4, 4, 4];\n  workPerThread = 4;\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  isVec4 = true;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [4, this.workPerThread, 1]);\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n\n    this.shaderKey =\n        `depthwiseVec4_${activation}_${this.convInfo.filterHeight}_${\n            this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${\n            this.convInfo.strideWidth}_${this.workPerThread}`;\n  }\n\n  getUserCode(): string {\n    const xNumber = (this.workPerThread - 1) * this.convInfo.strideWidth +\n        this.convInfo.filterWidth;\n    const strideHeight = this.convInfo.strideHeight;\n    const strideWidth = this.convInfo.strideWidth;\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, true, 4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${main()} {\n        let batch = i32(globalId.z) / uniforms.outShape[1];\n        let r = i32(globalId.z) % uniforms.outShape[1];\n        let c = i32(globalId.y) * ${this.workPerThread};\n        let d1 = i32(globalId.x) * 4;\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${strideHeight}, ${strideWidth}) - uniforms.pad;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${xNumber}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${xNumber}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${strideWidth} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${biasActivationSnippet(this.addBias, this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pad : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, stride : vec2<i32>, dilation : vec2<i32>,`;\n  // This is an experimental value.\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xR, xC, d1);' :\n                                              'getX(batch, d1, xR, xC);';\n\n    const userCode = `\n      ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivation, false, 4)}\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${\n        this.isChannelsLast ? 'yz' : 'zw'}) * uniforms.stride - uniforms.pad;\n          let d2 = coords[${this.isChannelsLast ? 3 : 1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilation[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilation[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilation[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilation[1];\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilation[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilation[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${biasActivationSnippet(this.addBias, this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DNCHWSharedProgram} from '../depthwise_conv2d_nchw_shared_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */, $dataFormat);\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program|\n      DepthwiseConv2DNCHWSharedProgram;\n  if (!isChannelsLast && convInfo.inHeight > 16 && convInfo.inWidth > 16 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      convInfo.dilationWidth === 1 && convInfo.dilationHeight === 1 &&\n      convInfo.inChannels === convInfo.outChannels) {\n    program = new DepthwiseConv2DNCHWSharedProgram(\n        convInfo.outShape, convInfo.filterHeight, convInfo.filterWidth);\n  } else if (\n      isChannelsLast && convInfo.outHeight > 4 && convInfo.outWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x, filter], x.dtype, dimensions);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DiagProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'diag';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DiagProgram} from '../diag_webgpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGPUProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeData(flat.dataId);\n  backend.disposeData(res.dataId);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgpu',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Dilation2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'w'];\n  uniforms =\n      'filterDims: vec2<i32>, pad: vec2<i32>, stride: vec2<i32>, dilation: vec2<i32>';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'dilation2d';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.stride - uniforms.pad;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilation[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilation[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DProgram} from '../dilation_webgpu';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [...padInfo]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}\n  ];\n\n  const program = new Dilation2DProgram(convInfo);\n  const out =\n      backend.runWebGPUProgram(program, [x, filter], x.dtype, uniformData);\n\n  return out;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgpu',\n  kernelFunc: dilation2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nexport const multiplyKernelFunc = binaryKernelFunc({\n  opType: BinaryOpType.MUL,\n  cpuKernelImpl: cpuMultiply,\n  supportsComplex: true\n});\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgpu',\n  kernelFunc: multiplyKernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: WebGPUBackend, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'sum', backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgpu',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {multiplyKernelFunc} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: WebGPUBackend, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out =\n            multiplyKernelFunc({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeData(tensorInfo.dataId);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgpu',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const elu = unaryKernelFunc({opType: UnaryOpType.ELU});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgpu',\n  kernelFunc: elu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU as cpuEqual} from '../kernel_utils/shared';\n\nexport const equal = binaryKernelFunc(\n    {opType: BinaryOpType.EQUAL, dtype: 'bool', cpuKernelImpl: cpuEqual});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const erf = unaryKernelFunc({opType: UnaryOpType.ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgpu',\n  kernelFunc: erf\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const exp = unaryKernelFunc({\n  opType: UnaryOpType.EXP,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgpu',\n  kernelFunc: exp\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgpu',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const expm1 =\n    unaryKernelFunc({opType: UnaryOpType.EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgpu',\n  kernelFunc: expm1\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FFTProgram implements WebGPUProgram {\n  variableNames: string[] = ['real', 'imag'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'exponentMultiplier : f32, denominator: f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  component: string;\n\n  constructor(component: 'real'|'imag', shape: [number, number]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.component = component;\n    this.shaderKey = `fft_${component}`;\n  }\n\n  getUserCode(): string {\n    const opString = this.component === 'real' ?\n        'return real * expR - imag * expI;' :\n        'return real * expI + imag * expR;';\n    const userCode = `\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${opString}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FFTProgram} from '../fft_webgpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: WebGPUBackend): TensorInfo {\n  const xData = backend.tensorMap.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const toDispose = [];\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n  toDispose.push(input2D);\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape);\n  const imagProgram = new FFTProgram('imag', xShape);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const exponentMultiplier = inverse ? 2.0 * Math.PI : -2.0 * Math.PI;\n  const denominator = inverse ? xShape[1] : 1.0;\n  const uniformData = [\n    {type: 'float32', data: [exponentMultiplier]},\n    {type: 'float32', data: [denominator]}\n  ];\n\n  const realPart =\n      backend.runWebGPUProgram(realProgram, inputs, 'float32', uniformData);\n  toDispose.push(realPart);\n  const imagPart =\n      backend.runWebGPUProgram(imagProgram, inputs, 'float32', uniformData);\n  toDispose.push(imagPart);\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n  toDispose.push(complexOutput);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgpu',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FlipLeftRightProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(imageShape: [number, number, number, number]) {\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'flipLeftRight';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FlipLeftRightProgram} from '../flip_left_right_webgpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, backend}) => {\n      const {image} = inputs as FlipLeftRightInputs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n      const output =\n          webgpuBackend.runWebGPUProgram(program, [image], image.dtype);\n      return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const floor =\n    unaryKernelFunc({opType: UnaryOpType.FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgpu',\n  kernelFunc: floor\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const floorDiv =\n    binaryKernelFunc({opType: BinaryOpType.INT_DIV, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FromPixelsProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  isFromPixels = true;\n  outputShape: number[] = [0];\n  shaderKey: string;\n  importVideo: boolean;\n  variableNames: string[] = [];\n  workgroupSize: [number, number, number] =\n      [256, 1, 1];  // The empirical value.\n\n  constructor(outputShape: number[], numChannels: number, importVideo = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [numChannels, 1, 1]);\n\n    this.importVideo = importVideo;\n    this.shaderKey = `fromPixels_${this.importVideo}`;\n  }\n\n  getUserCode(): string {\n    const textureLoad = this.importVideo ?\n        'textureLoad(src, vec2<i32>(coords.yx));' :\n        'textureLoad(src, vec2<i32>(coords.yx), 0)';\n    const textureType =\n        this.importVideo ? 'texture_external' : 'texture_2d<f32>';\n    return `\n      @binding(1) @group(0) var src: ${textureType};\n      ${main('index')} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${textureLoad};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs, util} from '@tensorflow/tfjs-core';\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {TextureInfo, WebGPUBackend} from '../backend_webgpu';\nimport {FromPixelsProgram} from '../from_pixels_webgpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgpu',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\nconst videoToTextureMap = new Map<object, object>();\n\nexport function fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: WebGPUBackend,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const isCanvas = (typeof (HTMLCanvasElement) !== 'undefined' &&\n                    pixels instanceof HTMLCanvasElement) ||\n      (typeof (OffscreenCanvas) !== 'undefined' &&\n       pixels instanceof OffscreenCanvas);\n  const isImageBitmap =\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap;\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  const outputShape = [height, width, numChannels];\n\n  // Disable importExternalTexture temporarily as it has problem in spec and\n  // browser impl\n  const importVideo =\n      false && env().getBool('WEBGPU_IMPORT_EXTERNAL_TEXTURE') && isVideo;\n  const isVideoOrImage = isVideo || isImage;\n  if (isImageBitmap || isCanvas || isVideoOrImage) {\n    let textureInfo: TextureInfo;\n    if (importVideo) {\n      const videoElement = pixels as HTMLVideoElement;\n      if (!(videoToTextureMap.has(videoElement)) ||\n          (videoToTextureMap.get(videoElement) as GPUExternalTexture).expired) {\n        const externalTextureDescriptor = {source: videoElement};\n        videoToTextureMap.set(\n            videoElement,\n            backend.device.importExternalTexture(externalTextureDescriptor));\n      }\n\n      textureInfo = {\n        width,\n        height,\n        format: null,\n        usage: null,\n        texture: videoToTextureMap.get(videoElement) as GPUExternalTexture\n      };\n    } else {\n      if (isVideoOrImage) {\n        const newWillReadFrequently =\n            env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n        if (fromPixels2DContext == null ||\n            newWillReadFrequently !== willReadFrequently) {\n          willReadFrequently = newWillReadFrequently;\n          fromPixels2DContext =\n              document.createElement('canvas').getContext(\n                  '2d', {willReadFrequently});\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(\n            pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n      }\n\n      const usage = GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING;\n      const format = 'rgba8unorm' as GPUTextureFormat;\n      const texture = backend.textureManager.acquireTexture(\n          outputShape[1], outputShape[0], format, usage);\n      backend.queue.copyExternalImageToTexture(\n          {source: pixels as HTMLCanvasElement | ImageBitmap}, {texture},\n          [outputShape[1], outputShape[0]]);\n      textureInfo = {width, height, format, usage, texture};\n    }\n\n    const size = util.sizeFromShape(outputShape);\n    const strides = util.computeStrides(outputShape);\n    const program =\n        new FromPixelsProgram(outputShape, numChannels, importVideo);\n\n    const uniformData = [\n      {type: 'uint32', data: [size]}, {type: 'uint32', data: [numChannels]},\n      {type: 'uint32', data: [...strides]}\n    ];\n    const input = backend.makeTensorInfo([height, width], 'int32');\n    const info = backend.tensorMap.get(input.dataId);\n    info.resourceInfo = textureInfo;\n\n    const result =\n        backend.runWebGPUProgram(program, [input], 'int32', uniformData);\n    backend.disposeData(input.dataId);\n    return result;\n  }\n\n  // TODO: Encoding should happen on GPU once we no longer have to download\n  // image data to the CPU.\n  const imageData = (pixels as ImageData | backend_util.PixelData).data;\n  let pixelArray = imageData;\n  if (numChannels != null && numChannels !== 4) {\n    pixelArray = new Uint8Array(pixels.width * pixels.height * numChannels);\n\n    const dataLength = imageData.length;\n    let j = 0;\n    for (let i = 0; i < dataLength; i++) {\n      if (i % 4 < numChannels) {\n        pixelArray[j++] = imageData[i];\n      }\n    }\n  }\n\n  const output =\n      backend.makeTensorInfo(outputShape, 'int32', new Int32Array(pixelArray));\n  backend.uploadToGPU(output.dataId);\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BatchNormProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = 'varianceEpsilon : f32,';\n  // This is an experimental value.\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  offsetShape: number[]|null;\n  scaleShape: number[]|null;\n  varianceEpsilon: number;\n  size = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n    }\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n    }\n    this.offsetShape = offsetShape;\n    this.scaleShape = scaleShape;\n    this.shaderKey = 'batchNorm';\n  }\n\n  getUserCode(): string {\n    let offsetSnippet = '0.0';\n    if (this.offsetShape != null) {\n      offsetSnippet = 'getOffsetByOutputIndex(index)';\n    }\n\n    let scaleSnippet = '1.0';\n    if (this.scaleShape != null) {\n      scaleSnippet = 'getScaleByOutputIndex(index)';\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${offsetSnippet};\n          let scaleValue = ${scaleSnippet};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, Tensor} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BatchNormProgram} from '../batchnorm_webgpu';\n\nexport const fusedBatchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x, scale, offset, mean, variance} = inputs as FusedBatchNormInputs;\n    const {varianceEpsilon} = attrs as unknown as FusedBatchNormAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const batchNormInputs = [x as Tensor, mean as Tensor, variance as Tensor];\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      batchNormInputs.push(offset as Tensor);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      batchNormInputs.push(scale as Tensor);\n    }\n    const program = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape);\n    const uniformData = [{type: 'float32', data: [varianceEpsilon]}];\n    return webGPUBackend.runWebGPUProgram(\n        program, batchNormInputs, x.dtype, uniformData);\n  }\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {conv2DImpl} from './Conv2D_impl';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  return conv2DImpl({\n    x,\n    filter,\n    convInfo,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program;\n  if (convInfo.outHeight > 4 && convInfo.outWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const result =\n      backend.runWebGPUProgram(program, programInputs, 'float32', dimensions);\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherNDProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  sliceDim: number;\n  constructor(sliceDim: number, shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gathernd_${sliceDim}`;\n    this.sliceDim = sliceDim;\n    this.uniforms = `sliceDim : i32, strides : ${getCoordsDataType(sliceDim)},`;\n  }\n\n  getUserCode(): string {\n    let strideString;\n    if (this.sliceDim > 1) {\n      strideString = 'uniforms.strides[j]';\n    } else {\n      strideString = 'uniforms.strides';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${strideString};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {GatherNDProgram} from '../gather_nd_webgpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, [numSlices, sliceSize]);\n  const uniformData =\n      [{type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides}];\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype, uniformData);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgpu',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  aShape: number[];\n  size = true;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = aShape.slice();\n    this.aShape = aShape;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gather`;\n  }\n\n  getUserCode(): string {\n    const sourceCoords = getSourceCoords(this.aShape);\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[]): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('indexZ');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, Rank, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {GatherProgram} from '../gather_webgpu';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(\n    args:\n        {inputs: GatherV2Inputs, backend: WebGPUBackend, attrs: GatherV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  // Unlike WebGL, WebGPU won't check if index is out of bound by calling\n  // backend.readSync() function in debug mode.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices])) {\n    const indicesBufferInfo = backend.tensorMap.get(flattenIndex.dataId);\n    const indicesValues = indicesBufferInfo.values as TypedArray;\n    const indicesBuf =\n        buffer(flattenIndex.shape, flattenIndex.dtype, indicesValues) as\n        TensorBuffer<Rank>;\n    const xBufferInfo = backend.tensorMap.get(flattenX.dataId);\n    const xValues = xBufferInfo.values as TypedArray;\n    const xBuf =\n        buffer(flattenX.shape, flattenX.dtype, xValues) as TensorBuffer<Rank>;\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeData(t.dataId));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgpu',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU as cpuGreater} from '../kernel_utils/shared';\n\nexport const greater = binaryKernelFunc({\n  opType: BinaryOpType.GREATER,\n  cpuKernelImpl: cpuGreater,\n  dtype: 'bool',\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU as cpuGreaterEqual} from '../kernel_utils/shared';\n\nexport const greaterEqual = binaryKernelFunc({\n  opType: BinaryOpType.GREATER_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuGreaterEqual\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgpu',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isFinite =\n    unaryKernelFunc({opType: UnaryOpType.IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgpu',\n  kernelFunc: isFinite\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isInf =\n    unaryKernelFunc({opType: UnaryOpType.IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgpu',\n  kernelFunc: isInf\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isNaN =\n    unaryKernelFunc({opType: UnaryOpType.IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgpu',\n  kernelFunc: isNaN\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: WebGPUBackend,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n  const uniformData = [{type: 'float32', data: [alpha]}];\n  const program =\n      new UnaryOpProgram(x.shape, UnaryOpType.LEAKYRELU, 'alpha : f32,');\n  return backend.runWebGPUProgram(program, [x], 'float32', uniformData);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgpu',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU as cpuLess} from '../kernel_utils/shared';\n\nexport const less = binaryKernelFunc(\n    {opType: BinaryOpType.LESS, dtype: 'bool', cpuKernelImpl: cpuLess});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU as cpuLessEqual} from '../kernel_utils/shared';\n\nexport const lessEqual = binaryKernelFunc({\n  opType: BinaryOpType.LESS_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuLessEqual\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class LinSpaceProgram implements WebGPUProgram {\n  variableNames: string[] = [];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'start : f32, step : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number) {\n    this.outputShape = [shape];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'linSpace';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {LinSpaceProgram} from '../lin_space_webgpu';\n\nexport function linSpace(args: {backend: WebGPUBackend, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n  const step = (stop - start) / (num - 1);\n\n  const program = new LinSpaceProgram(num);\n  const uniformData =\n      [{type: 'float32', data: [start]}, {type: 'float32', data: [step]}];\n  return backend.runWebGPUProgram(program, [], 'float32', uniformData);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgpu',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const log =\n    unaryKernelFunc({opType: UnaryOpType.LOG, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgpu',\n  kernelFunc: log\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const log1p = unaryKernelFunc({opType: UnaryOpType.LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgpu',\n  kernelFunc: log1p\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const logicalAnd =\n    binaryKernelFunc({opType: BinaryOpType.LOGICAL_AND, dtype: 'bool'});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const logicalNot = unaryKernelFunc({opType: UnaryOpType.LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgpu',\n  kernelFunc: logicalNot\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const logicalOr = binaryKernelFunc({opType: BinaryOpType.LOGICAL_OR});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nconst powOperatorSnippet = `\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n`;\n\nexport class LRNProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'radius : i32, bias : f32, alpha : f32, beta : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(xShape: number[]) {\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'lrn';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${powOperatorSnippet}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n\nexport class LRNSharedProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'radius : i32, bias : f32, alpha : f32, beta : f32,';\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  maxAllowRadius = 16;\n  elementsPerWorkgroup: number;\n\n  constructor(xShape: number[], radius: number) {\n    util.assert(\n        radius <= this.maxAllowRadius,\n        () => `Radius must be less than or equal to ${\n            this.maxAllowRadius}, current radius is ${radius}`);\n\n    this.outputShape = xShape;\n    // The reason why not using this.workgroupSize[0] + 2 * maxAllowRadius here\n    // is to make sure that there is only one time global memory load access for\n    // each thread.\n    this.elementsPerWorkgroup = this.workgroupSize[0] - 2 * this.maxAllowRadius;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, [\n      this.elementsPerWorkgroup, this.workgroupSize[1], this.workgroupSize[2]\n    ]);\n    this.shaderKey = 'lrn_shared';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${main()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${powOperatorSnippet}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {LRNProgram, LRNSharedProgram} from '../lrn_webgpu';\n\nexport function lrn(\n    args: {inputs: LRNInputs, backend: WebGPUBackend, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  // When the adjacent channels is less than or equal to 16, which could cover\n  // most cases, we use shared memory version to get better performance.\n  // The theoretical adjacent channels may be very large, but the shared memory\n  // size of hardware is limited, so we use the naive version when the adjacent\n  // channels is large.\n  let program: LRNProgram|LRNSharedProgram;\n  if (depthRadius > 16) {\n    program = new LRNProgram(x.shape);\n  } else {\n    program = new LRNSharedProgram(x.shape, depthRadius);\n  }\n  const uniformData = [\n    {type: 'int32', data: [depthRadius]}, {type: 'float32', data: [bias]},\n    {type: 'float32', data: [alpha]}, {type: 'float32', data: [beta]}\n  ];\n  const res = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n  return res;\n}\n\nexport const lrnConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgpu',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU as cpuMaximum} from '../kernel_utils/shared';\n\nexport const maximum = binaryKernelFunc({\n  opType: BinaryOpType.MAX,\n  cpuKernelImpl: cpuMaximum,\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {poolImpl} from './Pool_impl';\n\nexport function maxPool(\n    args: {inputs: MaxPoolInputs, backend: WebGPUBackend, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  return poolImpl(x, convInfo, 'max', backend);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgpu',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function min(\n    args: {inputs: MinInputs, backend: WebGPUBackend, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'min', backend);\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgpu',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU as cpuMinimum} from '../kernel_utils/shared';\n\nexport const minimum = binaryKernelFunc({\n  opType: BinaryOpType.MIN,\n  cpuKernelImpl: cpuMinimum,\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MirrorPadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  offset: number;\n  size = true;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.xShape = xShape;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.offset = mode === 'reflect' ? 0 : 1;\n    this.shaderKey = `mirrorPad_${mode}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.xShape.length;\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape\n                    .map(\n                        (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                            rank > 1 ? `[${i}]` : ''}`)\n                    .join(',');\n\n    const shaderStart = rank === 1 ? 'start' : 'start[i]';\n    const shaderEnd = rank === 1 ? 'end' : 'end[i]';\n    const shaderOutC = rank === 1 ? 'outC' : 'outC[i]';\n    const dtype = getCoordsDataType(rank);\n    const unpackedCoords = rank > 1 ?\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n        'coords';\n\n    return `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${dtype}(${start});\n          let end = ${dtype}(${end});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${rank}; i = i + 1) {\n            if (${shaderOutC} < ${shaderStart}) {\n              ${shaderOutC} = ${shaderStart} * 2 - ${shaderOutC} - ${\n        this.offset};\n            } else if(${shaderOutC} >= ${shaderEnd}) {\n              ${shaderOutC} = (${shaderEnd} - 1) * 2 - ${shaderOutC} + ${\n        this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {MirrorPadProgram} from '../mirror_pad_webgpu';\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MirrorPadInputs;\n    const {paddings, mode} = attrs as unknown as MirrorPadAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n\n    const uniformData = paddings.map(p => {\n      return {type: 'int32', data: [p[0], p[1]]};\n    });\n    const program = new MirrorPadProgram(x.shape, paddings, mode);\n    const output =\n        webGPUBackend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const mod = binaryKernelFunc({opType: BinaryOpType.MOD});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {negImplCPU} from '../kernel_utils/shared';\n\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.tensorMap.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.NEG);\n\n  return backend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: WebGPUBackend,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  console.warn(\n      'tf.nonMaxSuppression() in webgpu locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = kernel_impls.nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: WebGPUBackend,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  console.warn(\n      'tf.nonMaxSuppression() in webgpu locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} =\n      kernel_impls.nonMaxSuppressionV5Impl(\n          boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n          scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class OneHotProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'onValue : f32, offValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(numIndices: number, depth: number) {\n    this.outputShape = [numIndices, depth];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'onehot';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `;\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {OneHotProgram} from '../onehot_webgpu';\nimport {reshape} from './Reshape';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: WebGPUBackend, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n\n  const uniformData =\n      [{type: 'float32', data: [onValue]}, {type: 'float32', data: [offValue]}];\n  const result =\n      backend.runWebGPUProgram(program, [reshaped], dtype, uniformData);\n  backend.disposeData(reshaped.dataId);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeData(result.dataId);\n\n  return out;\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgpu',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgpu',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgpu',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: WebGPUBackend, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgpu',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class PadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'constantValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  size = true;\n\n  constructor(xShape: number[], paddings: Array<[number, number]>) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.xShape = xShape;\n    this.shaderKey = 'pad';\n  }\n\n  getUserCode(): string {\n    const rank = this.xShape.length;\n    const type = getCoordsDataType(rank);\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape\n                    .map(\n                        (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                            rank > 1 ? `[${i}]` : ''}`)\n                    .join(',');\n    const startValue = rank > 1 ? `${type}(${start})` : `${start}`;\n    const endValue = rank > 1 ? `${type}(${end})` : `${end}`;\n\n    const leftPadCondition = rank > 1 ? `any(outC < start)` : `outC < start`;\n    const rightPadCondition = rank > 1 ? `any(outC >= end)` : `outC >= end`;\n\n    const unpackedCoords = rank > 1 ?\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n        'coords';\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${startValue};\n          let end = ${endValue};\n          let outC = getCoordsFromIndex(index);\n\n          if (${leftPadCondition} || ${rightPadCondition}) {\n            setOutputAtIndex(index, uniforms.constantValue);\n          } else {\n            let coords = outC - start;\n            setOutputAtIndex(index, getX(${unpackedCoords}));\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\nimport {PadProgram} from '../pad_webgpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs,\n            backend: WebGPUBackend,\n            attrs: PadV2Attrs}): TensorInfo => {\n      const {inputs, backend, attrs} = args;\n      const {x} = inputs;\n      const {paddings, constantValue} = attrs;\n      if (paddings.every(p => util.arraysEqual(p, [0, 0]))) {\n        return identity({inputs: {x}, backend});\n      }\n      if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        const outputShape = paddings.map(\n            (p, i) =>\n                p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        return fill({\n          backend,\n          attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n        });\n      }\n      const uniformData = [{type: 'float32', data: [constantValue]}];\n      paddings.map(p => uniformData.push({type: 'int32', data: [p[0], p[1]]}));\n      const program = new PadProgram(x.shape, paddings);\n      return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n    };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgpu',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const pow = binaryKernelFunc({\n  opType: BinaryOpType.POW,\n});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\n\nexport function prelu(args: {inputs: PreluInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = new BinaryOpProgram(BinaryOpType.PRELU, x.shape, alpha.shape);\n  return backend.runWebGPUProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgpu',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: WebGPUBackend, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'prod', backend);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: WebGPUBackend, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgpu',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const realDiv = binaryKernelFunc({opType: BinaryOpType.DIV});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgpu',\n  kernelFunc: realDiv as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const reciprocal = unaryKernelFunc({opType: UnaryOpType.RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgpu',\n  kernelFunc: reciprocal\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const relu = unaryKernelFunc({opType: UnaryOpType.RELU});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgpu',\n  kernelFunc: relu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const relu6 = unaryKernelFunc({opType: UnaryOpType.RELU6});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgpu',\n  kernelFunc: relu6\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeBilinearProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number) {\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `resizeBilinear`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeBilinearProgram} from '../resize_bilinear_webgpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, size, halfPixelCenters} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  const halfPixelCentersValue = halfPixelCenters ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [halfPixelCentersValue]}\n  ];\n\n  const program = new ResizeBilinearProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth);\n\n  return backend.runWebGPUProgram(program, [images], 'float32', uniformData);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeNearestNeighborProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'adjustHeightWidth : vec2<f32>, roundBase : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  halfPixelCenters: boolean;\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, halfPixelCenters: boolean) {\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.halfPixelCenters = halfPixelCenters;\n    this.shaderKey = `resizeNearest_${halfPixelCenters}`;\n  }\n\n  getUserCode(): string {\n    let sourceFracIndexRC: string;\n    if (this.halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2<f32>(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2<f32>(rc) * effectiveInputOverOutputRatioRC`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${sourceFracIndexRC};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_webgpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  // When align corners is false, we rounds the value with floor.\n  const roundBase = alignCorners ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [roundBase]}\n  ];\n\n  const program = new ResizeNearestNeighborProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth,\n      halfPixelCenters);\n  return backend.runWebGPUProgram(program, [images], images.dtype, uniformData);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ReverseProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(xShape: [number, number, number, number]) {\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = ` axis : vec4<i32>,`;\n    this.shaderKey = 'reverse';\n  }\n\n  getUserCode(): string {\n    const reverseCoordsSnippet = `\n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    `;\n    const userCode = `\n      ${reverseCoordsSnippet}\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ReverseProgram} from '../reverse_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\nexport function reverse(\n    args: {inputs: ReverseInputs, backend: WebGPUBackend, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const xShape = x.shape;\n  const xShape4D: [number, number, number, number] = [1, 1, 1, 1];\n  xShape.forEach((d, i) => {\n    const index = i + 4 - xRank;\n    xShape4D[index] = d;\n  });\n\n  const axes = util.parseAxisParam(dims, x.shape);\n  const dims4D: [number, number, number, number] = [0, 0, 0, 0];\n  axes.forEach(ax => {\n    const index = ax + 4 - xRank;\n    dims4D[index] = 1;\n  });\n  const uniformData = [{type: 'int32', data: dims4D}];\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: xShape4D}});\n\n  const program = new ReverseProgram(xShape4D);\n  const values = backend.runWebGPUProgram(\n      program, [xReshaped], xReshaped.dtype, uniformData);\n  backend.disposeData(xReshaped.dataId);\n\n  const result =\n      reshape({inputs: {x: values}, backend, attrs: {shape: xShape}});\n  backend.disposeData(values.dataId);\n\n  return result;\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgpu',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class RotateProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  fillSnippet: string;\n  size = true;\n\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,`;\n    this.shaderKey = 'rotate';\n    this.outputShape = imageShape;\n\n    if (typeof fillValue === 'number') {\n      this.uniforms += ` fillValue : f32,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue;`;\n      this.shaderKey += '_float';\n    } else {\n      this.uniforms += ` fillValue : vec3<f32>,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue[coords[3]];`;\n      this.shaderKey += '_vec3';\n    }\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {RotateProgram} from '../rotate_webgpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, attrs, backend}) => {\n      const {image} = inputs as RotateWithOffsetInputs;\n      const {radians, fillValue, center} =\n          attrs as unknown as RotateWithOffsetAttrs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n      const [centerX, centerY] =\n          backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n      const uniformData = [\n            {type: 'float32', data: [centerX]},\n            {type: 'float32', data: [centerY]},\n            {type: 'float32', data: [Math.sin(radians)]},\n            {type: 'float32', data: [Math.cos(radians)]}\n          ];\n\n      if (typeof fillValue === 'number') {\n        uniformData.push(\n            {type: 'float32', data: [Number.parseFloat(fillValue.toFixed(2))]});\n      } else {\n        uniformData.push({type: 'float32', data: fillValue});\n      }\n\n      const output = webgpuBackend.runWebGPUProgram(\n          program, [image], image.dtype, uniformData);\n      return output;\n   }\n };\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const round = unaryKernelFunc({opType: UnaryOpType.ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgpu',\n  kernelFunc: round\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const rsqrt =\n    unaryKernelFunc({opType: UnaryOpType.RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgpu',\n  kernelFunc: rsqrt\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\nimport {atomicAddSnippet} from './shader_util';\nimport {getCoordsDataType, getMainHeaderString as main, mapToWgslTypes, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ScatterProgram implements WebGPUProgram {\n  variableNames = ['updates', 'indices'];\n  uniforms: string;\n  outputShape: number[];\n  sumDupeIndices: boolean;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  updatesRank: number;\n  indicesRank: number;\n  sliceDimGreaterThanOne: boolean;\n  atomic = true;\n  type: DataType;\n\n  constructor(\n      flattenXShape: number[], sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      outputDtype: DataType, sumDupeIndices = true) {\n    this.outputShape = shape;\n    this.type = outputDtype;\n    this.sumDupeIndices = sumDupeIndices;\n    this.dispatchLayout = flatDispatchLayout(flattenXShape);\n    // Dispatching based on |updates| shape instead of output shape.\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, flattenXShape, this.workgroupSize);\n    this.sliceDimGreaterThanOne = sliceDim > 1;\n    this.shaderKey = `scatter_${indicesRank}_${updatesRank}_${\n        this.sliceDimGreaterThanOne}_${outputDtype}_${sumDupeIndices}`;\n    const stridesType = getCoordsDataType(strides.length);\n    this.uniforms =\n        `sliceDim : i32, strides: ${stridesType}, updatesSize: i32,`;\n    this.updatesRank = updatesRank;\n    this.indicesRank = indicesRank;\n  }\n\n  getUserCode(): string {\n    let indicesString = '';\n    if (this.indicesRank === 1) {\n      indicesString = 'coords[0]';\n    } else if (this.indicesRank === 2) {\n      indicesString = 'coords[0], j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    const strideString = this.sliceDimGreaterThanOne ? 'uniforms.strides[j]' :\n                                                       'uniforms.strides';\n\n    let outCoordsString = '';\n    let getUpdatesCoordsFromFlatIndex = '';\n    if (this.dispatchLayout.x.length === 1) {\n      outCoordsString = 'flattenedIndex';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      `;\n    } else if (this.dispatchLayout.x.length === 2) {\n      outCoordsString = 'vec2<i32>(flattenedIndex, coords[1])';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      `;\n    }\n    const updatesString =\n        Array.from({length: this.updatesRank}, (_, idx) => `coords[${idx}]`);\n    const updatesSnippet = `getUpdates(${updatesString.join(', ')})`;\n\n    const userCode = `\n    ${getUpdatesCoordsFromFlatIndex}\n      ${main('index')} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${indicesSnippet}));\n            flattenedIndex = flattenedIndex + indexInside * ${strideString};\n          }\n          let updateValue =\n              ${mapToWgslTypes(this.type, false)}(${updatesSnippet});\n          let flatIndex = getOutputIndexFromCoords(${outCoordsString});\n\n          ${\n        this.sumDupeIndices ?\n            atomicAddSnippet(\n                '&result[flatIndex]', 'updateValue',\n                this.type as 'float32' | 'int32') :\n            `atomicStore(&result[flatIndex], bitcast<i32>(updateValue));`}\n        }\n      }`;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: WebGPUBackend,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const type = flattenX.dtype;\n  const output =\n      fill({backend, attrs: {shape: flattenShape, value: 0, dtype: type}});\n  const size = util.sizeFromShape(flattenX.shape);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides},\n    {type: 'int32', data: [size]}\n  ];\n  const program = new ScatterProgram(\n      flattenX.shape, sliceRank, flattenIndices.shape.length,\n      flattenX.shape.length, strides, flattenShape, type);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], type, uniformData, output);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgpu',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SearchSortedProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['sortedSequence', 'values'];\n  uniforms = 'numInputs : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  side: string;\n\n  constructor(outputShape: [number, number], side: 'left'|'right') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.side = side;\n    this.shaderKey = `search_sorted_${side}`;\n  }\n\n  getUserCode(): string {\n    const boundComparator = this.side === 'left' ? '<' : '<=';\n    const userCode = `\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${boundComparator} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `;\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SearchSortedProgram} from '../search_sorted_webgpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: WebGPUBackend,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program =\n      new SearchSortedProgram([values.shape[0], values.shape[1]], side);\n  const uniformData = [{type: 'int32', data: [sortedSequence.shape[1]]}];\n  return backend.runWebGPUProgram(\n      program, [sortedSequence, values], 'int32', uniformData);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgpu',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SelectProgram implements WebGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  cRank: number;\n  rank: number;\n  size = true;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.cRank = cRank;\n    this.rank = rank;\n    this.shaderKey = 'select';\n  }\n\n  getUserCode(): string {\n    // TODO(WGSL): below code can be merged with getUserCode.\n    let cCoords;\n    let abCoords;\n    if (this.rank > 4) {\n      throw Error(`Where for rank ${this.rank} is not yet supported`);\n    }\n\n    if (this.rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < this.outputShape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < this.cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${cCoords});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${abCoords}));\n          } else {\n            setOutputAtIndex(index, getB(${abCoords}));\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SelectProgram} from '../select_webgpu';\n\nexport function select(args: {inputs: SelectInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGPUProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgpu',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const selu = unaryKernelFunc({opType: UnaryOpType.SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgpu',\n  kernelFunc: selu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sigmoid = unaryKernelFunc({opType: UnaryOpType.SIGMOID});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sign = unaryKernelFunc({opType: UnaryOpType.SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgpu',\n  kernelFunc: sign\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sin = unaryKernelFunc({opType: UnaryOpType.SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgpu',\n  kernelFunc: sin\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sinh = unaryKernelFunc({opType: UnaryOpType.SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgpu',\n  kernelFunc: sinh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nexport const sub = binaryKernelFunc(\n    {opType: BinaryOpType.SUB, cpuKernelImpl: cpuSub, supportsComplex: true});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args: {inputs: SoftmaxInputs, backend: WebGPUBackend, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeData(maxLogit.dataId);\n  backend.disposeData(maxLogitsReshaped.dataId);\n  backend.disposeData(a.dataId);\n  backend.disposeData(b.dataId);\n  backend.disposeData(sumExp.dataId);\n  backend.disposeData(sumExpReshaped.dataId);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgpu',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const softplus = unaryKernelFunc({opType: UnaryOpType.SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgpu',\n  kernelFunc: softplus\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: WebGPUBackend,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgpu',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TileProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.rank = this.outputShape.length;\n    this.shaderKey = 'tile';\n  }\n\n  getUserCode(): string {\n    const sourceCoords = getSourceCoords(this.rank, 'uniforms.');\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nfunction getSourceCoords(rank: number, uniformPrefix = ''): string {\n  if (rank >= 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `(resRC % ${uniformPrefix}aShape)`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < rank; i++) {\n    sourceCoords.push(`(${currentCoords[i]} % ${uniformPrefix}aShape[${i}])`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_webgpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: WebGPUBackend, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank >= 5 case.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string' ||\n      x.shape.length >= 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGPUProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgpu',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: WebGPUBackend,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const $sparseIndices = reshape({\n    inputs: {x: sparseIndices},\n    backend,\n    attrs: {shape: [numUpdates, sliceRank]}\n  });\n  const $sparseValues = sparseValues.shape.length ?\n      reshape({\n        inputs: {x: sparseValues},\n        backend,\n        attrs: {shape: [numUpdates, sliceSize]}\n      }) :\n      identity({inputs: {x: sparseValues}, backend});\n\n  const type = $sparseValues.dtype;\n  const zero =\n      backend.makeTensorInfo([], type, util.makeZerosTypedArray(1, type));\n\n  // Fill output tensor with the default value.\n  const $defaultValue = reshape({\n    inputs: {x: defaultValue},\n    backend,\n    attrs: {shape: Array(flattenShape.length).fill(1)}\n  });\n  const $denseValues =\n      tile({inputs: {x: $defaultValue}, backend, attrs: {reps: flattenShape}});\n\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]},\n    {type: 'int32', data: strides},\n    {type: 'int32', data: [size]},\n  ];\n\n  switch (numUpdates) {\n    case 0:\n      break;\n    case 1:\n      if (true) {\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type,\n            sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n      break;\n    default:\n      if (true) {\n        // First replace the default value with 0 at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            zero.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [zero, $sparseIndices], type, uniformData, $denseValues);\n      }\n      {\n        // Then replace 0 with the (sum of) sparse value(s) at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n  }\n\n  const denseValues = reshape(\n      {inputs: {x: $denseValues}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeData($sparseIndices.dataId);\n  backend.disposeData($sparseValues.dataId);\n  backend.disposeData($defaultValue.dataId);\n  backend.disposeData(zero.dataId);\n  backend.disposeData($denseValues.dataId);\n  return denseValues;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgpu',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: WebGPUBackend, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgpu',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sqrt = unaryKernelFunc({opType: UnaryOpType.SQRT});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgpu',\n  kernelFunc: sqrt\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const program = new UnaryOpProgram(x.shape, UnaryOpType.SQUARE);\n    return webGPUBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const squaredDifference = binaryKernelFunc({\n  opType: BinaryOpType.SQUARED_DIFFERENCE,\n});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {x} = inputs;\n  const program =\n      new UnaryOpProgram(x.shape, UnaryOpType.STEP, 'stepAlpha : f32,');\n  const uniformData = [{type: 'float32', data: [attrs.alpha]}];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgpu',\n  kernelFunc: step as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class StridedSliceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  // TODO(xing.xu): Increase the workPerThread.\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    const dtype = getCoordsDataType(this.outputShape.length);\n    this.uniforms = `begin : ${dtype},  strides : ${dtype}, `;\n    this.shaderKey = 'stridedSlice';\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * uniforms.strides + uniforms.begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          this.outputShape\n              .map((_, i) => {\n                outputAxis++;\n                return this.outputShape.length === 1 ?\n                    `coords * uniforms.strides[${i}] + uniforms.begin[${i}]` :\n                    `coords[${outputAxis - 1}] * uniforms.strides[${\n                        i}] + uniforms.begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${newCoords}));\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {StridedSliceProgram} from '../strided_slice_webgpu';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: WebGPUBackend,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeData(sliced.dataId);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      const values = backend.readSync(x.dataId) as TypedArray;\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram(finalShapeSparse);\n      const uniformData =\n          [{type: 'int32', data: $begin}, {type: 'int32', data: $strides}];\n      const resultValues =\n          backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n      result = reshape(\n          {inputs: {x: resultValues}, backend, attrs: {shape: finalShape}});\n      backend.disposeData(resultValues.dataId);\n    }\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgpu',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: WebGPUBackend,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgpu',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const tan = unaryKernelFunc({opType: UnaryOpType.TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgpu',\n  kernelFunc: tan\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const tanh = unaryKernelFunc({opType: UnaryOpType.TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgpu',\n  kernelFunc: tanh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\n\nexport class SwapProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,`;\n    this.shaderKey = 'swap';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n\nexport class MergeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    // |n| Size of the original input of TopK\n    // |firstPass| indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |k| Top k elements desired\n    this.uniforms = `inputSize : i32, firstPass : i32, k : i32,`;\n    this.shaderKey = 'merge';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_webgpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: WebGPUBackend, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeData(tensorInfo.dataId);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: WebGPUBackend, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted}= attrs;\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape({inputs: {x}, attrs: {shape: [batch, lastDim]}, backend});\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataSwap = [\n        {type: 'int32', data: [lastDim]},\n        {type: 'int32', data: [firstPass]},\n        {type: 'float32', data: [Number.NEGATIVE_INFINITY]},\n        {type: 'int32', data: [dir]},\n        {type: 'int32', data: [inc]}\n    ];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(\n        program, inputs, 'int32', uniformDataSwap);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataMerge = [\n        {type: 'int32', data: [lastDim]},\n        {type: 'int32', data: [firstPass]},\n        {type: 'int32', data: [kPow2]}\n    ];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(\n        mergeProgram, inputs, 'int32', uniformDataMerge);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgpu',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransformProgram implements WebGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  uniforms = 'interpolationModeId : i32, fillModeId : i32, fillValue : f32,';\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'transform';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${main('index')} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: WebGPUBackend, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgpu',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedBatchNormConfig} from './kernels/FusedBatchNorm';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lrnConfig} from './kernels/LRN';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {unpackConfig} from './kernels/Unpack';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  fromPixelsConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedBatchNormConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  log1pConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lrnConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeNearestNeighborConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  unpackConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {TransformProgram} from '../transform_webgpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: WebGPUBackend,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(outShape);\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId: number;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  const uniformData = [\n    {type: 'int32', data: [interpolationModeId]},\n    {type: 'int32', data: [fillModeId]}, {type: 'float32', data: [fillValue]}\n  ];\n  return backend.runWebGPUProgram(\n      program, [image, transforms], 'float32', uniformData);\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgpu',\n  kernelFunc: transform as unknown as KernelFunc\n};\n"],"names":["ENV","env","registerFlag","AdapterInfo","constructor","adapterInfo","this","vendor","architecture","intelGPUGeneration","getIntelGPUGeneration","isIntel","startsWith","Number","match","BufferManager","device","Map","acquireUploadBuffer","size","usage","acquireBuffer","mappedAtCreation","key","getBufferKey","freeBuffers","has","set","usedBuffers","numBytesUsed","numUsedBuffers","get","length","numFreeBuffers","newBuffer","shift","push","numBytesAllocated","createBuffer","releaseBuffer","buffer","bufferList","bufferIndex","indexOf","Error","splice","releaseUploadBuffer","mapAsync","GPUMapMode","WRITE","then","err","getNumUsedBuffers","getNumFreeBuffers","dispose","forEach","buffers","destroy","TextureManager","acquireTexture","width","height","format","byteSize","getBytesPerElement","getTextureKey","freeTextures","usedTextures","numUsedTextures","numFreeTextures","newTexture","createTexture","releaseTexture","texture","textureList","textureIndex","getNumUsedTextures","getNumFreeTextures","textures","symbolicallyComputeStrides","indicesArr","variableName","Math","max","numCoords","shape","map","d","strides","Array","i","atomicAddSnippet","ptr","v","type","compileProgram","program","inputsData","output","source","inputInfo","outputData","prefixSnippets","flatWorkgroupSize","workgroupSize","isFlatDispatch","isFromPixels","mapToWgslTypes","dtype","isVec4","useGlobalIndex","isFlatDispatchLayout","commonSnippet","join","getCoordsFromIndexSnippet","getUserCode","getStartHeaderString","uniformDeclaration","variableNames","x","perDataType","getCoordsDataType","charAt","toLowerCase","slice","outputDataType","stridesDataType","uniforms","uniformShader","curInsertRe","replace","preInsertRe","_","p1","p2","insertAlignment","atomic","variableTypes","coordsSnippet","outShape","dispatchLayout","y","z","outRank","rank","gatherDimensionsStr","dims","arr","j","dimensions","snippet","getOutputCoordsSnippet","sources","isInfSnippet","getOutputIndexFromCoordsSnippet","outBufferType","wgslType","setOutputSnippet","inputSnippet","res","texName","name","funcName","toUpperCase","inputs","shapeStr","rankStr","getInputAtCoordsSnippet","texFuncSnippet","inRank","util","arraysEqual","broadcastDims","backend_util","getBroadcastDims","rankDiff","getCoordsXYZ","unpackedCoordsSnippet","coordsType","coordsValues","s","getInputByOutputSnippet","getInputSnippet","makeShader","module","createShaderModule","code","label","createComputePipeline","compute","entryPoint","layout","index","getMainHeaderString","params","getWorkgroupSizeString","computeStrides","coords","assert","dispatch","hasOwnProperty","arrayProduct","product","computeDispatch","outputShape","elementsPerThread","dispatchX","dispatchY","dispatchZ","ceil","computeWorkgroupInfoForMatMul","dimAOuter","dimInner","dimBOuter","transposeA","computeWorkgroupSizeForConv2d","dim0","dim1","computeWorkPerThreadForConv2d","flatDispatchLayout","GPUBytesPerElement","isWebGPUSupported","window","WorkerGlobalScope","navigator","gpu","assertNotComplex","tensor","opName","isArray","t","MatMulProgramType","tileSize","every","dim","dimIdx","CPU_HANDOFF_SIZE_THRESHOLD","getNumber","WebGPUBackend","KernelBackend","super","WeakSet","webgpu_util.isWebGPUSupported","pipelineCache","queue","currentCommandEncoder","currentComputePass","supportTimeQuery","features","thresholdToIncreaseWorkgroups","bufferManager","textureManager","tensorMap","DataStorage","engine","querySet","createQuerySet","count","getBool","dummyCanvas","document","createElement","dummyContext","getContext","configure","body","appendChild","nextDataId","floatPrecision","defaultGpuBufferUsage","GPUBufferUsage","STORAGE","COPY_SRC","COPY_DST","disposeData","dataId","force","tensorDataPendingDisposal","tensorData","decRef","refCount","commandQueueOwnedIds","complexTensorInfos","real","imag","releaseResource","delete","memory","numBytesInGPU","numBytesAllocatedInGPU","unreliable","resourceInfo","external","textureInfo","GPUTexture","bufferInfo","incRef","write","values","id","move","submitQueue","ensureComputePassEnded","submit","finish","dispatchNumberInEncoder","uniformPendingDisposal","stagingPendingDisposal","ensureCommandEncoderReady","createCommandEncoder","end","getComputePass","beginComputePass","async","staging","MAP_READ","copyBufferToBuffer","READ","getMappedRange","unmap","undefined","getCurrentTexture","convertAndCacheOnCPU","data","readSync","vals","ps","Promise","all","read","realValues","imagValues","mergeRealAndImagArrays","getBufferData","convertBackendValuesAndArrayBuffer","copyBuffer","srcBuffer","dstBuffer","createTensorFromGPUData","zeroCopy","webgpu_util.GPUBytesPerElement","sizeFromShape","makeTensorFromDataId","readToGPU","srcTensorData","tensorInfo","makeTensorInfo","tensorRef","makeTensorFromTensorInfo","bufSize","bufferSync","strings","decodeString","f","console","warn","oldActiveTimers","activeTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","uploadWaitMs","downloadWaitMs","kernelMs","wallMs","sum","ms","isString","encodeString","tensorToBinding","info","GPUExternalTexture","createView","offset","getTimeFromQuerySet","uploadToGPU","stagingBuffer","MAP_WRITE","arrayBuffer","Int32Array","Float32Array","stagingInfo","makeUniforms","programUniform","currentOffset","preLength","offsets","maxAlignmentOfField","baseAlignment","ArrayBuffer","Uint32Array","uniformBuffer","UNIFORM","writeBuffer","uniformInfo","runWebGPUProgram","outputDtype","programDefinedUniform","getTypedArrayFromDType","MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE","limits","maxComputeWorkgroupsPerDimension","dispatchAverage","sqrt","cbrt","reshapeDispatch","bufferShapes","NaN","Infinity","concat","uniformsType","input","shapes","shaderKey","types","inputShapesEqualsOutShape","broadcastDimsKey","flatDispatchString","webgpu_program.makeShaderKey","pipeline","webgpu_program.compileProgram","bindings","bindGroup","createBindGroup","getBindGroupLayout","entries","b","binding","resource","pass","shouldTimeProgram","writeTimestamp","setPipeline","setBindGroup","dispatchWorkgroups","add","getQueryTime","queryBuffer","QUERY_RESOLVE","dst","resolveQuerySet","arrayBuf","BigUint64Array","timeElapsedNanos","shouldExecuteOnCPU","sizeThreshold","numDataIds","disposed","BinaryOpType","registerBackend","gpuDescriptor","powerPreference","adapter","requestAdapter","deviceDescriptor","requiredFeatures","adapterLimits","requiredLimits","maxComputeWorkgroupStorageSize","maxStorageBufferBindingSize","requestDevice","requestAdapterInfo","CHECK_NAN_SNIPPET","CHECK_NAN_SNIPPET_VEC4","MOD","MOD_VEC4","NOT_EQUAL_VEC4","POW_VEC4","getBinaryWithNanString","op","useVec4","valueForNaN","checkNanSnippet","getBinaryOpString","ADD","ATAN2","COMPLEX_MULTIPLY_IMAG","COMPLEX_MULTIPLY_REAL","DIV","EQUAL","GREATER","GREATER_EQUAL","INT_DIV","LESS","LESS_EQUAL","LOGICAL_AND","LOGICAL_OR","MAX","MIN","MUL","NOT_EQUAL","POW","PRELU","SQUARED_DIFFERENCE","SUB","UnaryOpType","ERF","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","SELU","SELU_SCALE","SELU_SCALEALPHA","getUnaryOpString","ABS","ACOS","ACOSH","ASIN","ASINH","ATAN","ATANH","COS","COSH","CEIL","ELU","EXP","EXPM1","FLOOR","IS_FINITE","IS_INF","IS_NAN","LINEAR","LOG","LOG1P","LOGICAL_NOT","NEG","LEAKYRELU","RECIPROCAL","RELU","RELU6","ROUND","RSQRT","SIGMOID","SIGN","SIN","SINH","SOFTPLUS","SQRT","SQUARE","STEP","TAN","TANH","TO_INT","typeSnippet","component","activationFnSnippet","activation","hasPreluActivationWeights","packed","coordsLength","activationOpSnippet","dataType","biasActivationSnippet","hasBias","matMulReadFnSource","transposeB","fitAOuter","fitBOuter","fitInner","sampleA","sampleB","matMulReadWriteFnSource","makeMatMulPackedVec4Source","workPerThread","tileInner","splitK","splitedDimInner","isVectorA","broadcastBatch","tileAOuter","tileBOuter","tileAWidth","tileAHight","innerElementSize","rowPerThreadB","rowPerThread","main","transpose","writeDataToSubAVec4Snippet","calculateResultSnippet","writeDataToSubASnippet","makeMatMulPackedSource","sequentialAccessByThreads","rowPerThreadA","colPerThreadA","colPerThread","matmulSnippet","readDataFromSubASnippet","MatMulPackedProgram","aShape","bias","preluActivationWeights","workgroupInfo","addBias","getShapeFit","userCode","readVectorASnippet","makeVectorMatrixProductSource","MatMulReduceProgram","workgroupSizeX","MatMulSmallOutputSizeProgram","bShape","makeMatMulSmallOutputSizeSource","MatMulSplitKProgram","BiasActivationProgram","FillProgram","fill","args","backend","attrs","value","inferDtype","getArrayFromDType","uniformData","fillConfig","kernelName","Fill","backendName","kernelFunc","reshape","xSize","$shape","inferFromImplicitShape","$xSize","reshapeConfig","Reshape","batchMatMulImpl","a","leakyreluAlpha","aRank","bRank","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","assertAndGetBroadcastShape","a3dShape","b3dShape","a3d","b3d","intermediates","batchDim","out","matmulProgramType","thresholdFlagValue","workgroupsBy32x32","biasActivationProgram","activationInputs","outActivated","outReshaped","_fusedMatMulConfig","_FusedMatMul","BinaryOpComplexProgram","BinaryOpProgram","useSharedMemoryWithA","useSharedMemoryWithB","lastDimensionSize","dType","opFnStr","sharedIndexSnippet","accessDataSnippet","identity","identityConfig","Identity","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","UnaryOpProgram","unaryKernelFunc","opType","cpuKernelImpl","webgpuBackend","$dtype","xData","outValues","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","upcastType","realProgram","imagProgram","complexOutput","decodedAVals","fromUint8ToStringArray","decodedBVals","createSimpleBinaryKernelImpl","aVals","bVals","newShape","resultRank","resultStrides","resultSize","result","aStrides","bStrides","aBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","createSimpleUnaryImpl","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","log","maximumImpl","aValue","bValue","minimumImpl","min","multiplyImpl","notEqualImpl","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","splits","lastSplit","validateSplits","nrows","rowLength","start","limit","outDim","outSplitsOutDim","delta","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","writeValueSlices","INT32_MAX","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","multiplier","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","rsqrtImpl","sigmoidImpl","sqrtImpl","squaredDifferenceImpl","diff","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","split","delimiters","skipEmpty","delimiter","token","tokenStart","subImpl","comparePair","valueDiff","select","array","k","left","right","sd","sign","swap","resultValues","abs","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","inputType","from","zero","toTypedArray","resultData","resultShape","simplyConcat","colOffset","decodedData","tIdx","row","resIdx","col","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","stop","num","step","reduceSize","isNaN","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","prod","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","starts","startsShape","startsDType","limitsShape","deltas","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","rtNestedSplits","nVals","rtDenseValues","valueIndex","rowSize","shapesShape","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","begin","isContinous","slice_util","isSliceContinous","xStrides","flatOffset","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","newLoc","dataSplits","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","newStrides","axis","$axis","parseAxisParam","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","castImpl","castImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterEqualImplCPU","greaterImplCPU","lessEqualImplCPU","lessImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","scatterImpl","scatterImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","addKernelFunc","cpuAdd","addConfig","Add","AddNPackedProgram","snippets","variable","operation","addNConfig","AddN","tensors","d1","d2","TransposeSharedProgram","newDim","TransposeProgram","switched","switchedCoords","getSwitchedCoords","cpuTranspose","transposeConfig","Transpose","ReduceProgram","reduceInfo","reduceType","inSize","reduceOp","initValue","outputSnippet","keepDims","toDispose","origAxes","axes","permutedAxes","getAxesPermutation","getInnerMostAxes","assertAxesAreInnerMostDims","reduceOutShape","resOutShape","expandShapeToKeepDim","windowSize","outSize","sumOutType","reduced","allConfig","All","anyConfig","Any","ArgMinMaxProgram","getInputShapeLastDim","splitOutputCoords","argMaxConfig","ArgMax","$x","intermediateTensorInfos","NEGATIVE_INFINITY","argMinConfig","ArgMin","POSITIVE_INFINITY","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","atan2Config","Atan2","atanh","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","updateSnippet","returnValue","PoolWithFilterSizeEqualsOneProgram","reductionIndices","maxConfig","Max","mean","meanConfig","Mean","poolImpl","filterWidth","filterHeight","inShape","inWidth","inHeight","padInfo","reshapeX","reduceX","strideHeight","strideWidth","top","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","computePool2DInfo","AvgPool2DBackpropProgram","avgPoolGradConfig","AvgPoolGrad","dy","avgMultiplier","outHeight","outWidth","batchMatMulConfig","BatchMatMul","SliceProgram","destSize","sourceCoords","coord","getCoords","coordSum","$begin","$size","parseSliceParams","assertParamsValid","xBufferInfo","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","writeSnippet","BincountProgram","hasWeights","bincountConfig","Bincount","weights","bincountInputs","notEqual","cpuNotEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf","zeros","floatX","realPart","hasEncodingLoss","resultType","int","zerosTensorInfo","ceilConfig","Ceil","ClipVec4Program","ClipProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ConcatProgram","computeOutShape","offsetLength","lastIndex","lastShiftIndex","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","outInfo","maxInputNum","maxStorageBuffersPerShaderStage","reducedInputs","subArray","computeTensors2D","reshapedResult","assertParamsConsistent","$inputs","concatConfig","Concat","Conv2DMMProgram","isChannelsLast","dataFormat","inChannels","outChannels","matMulSource","elementsSize","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","Conv2DNaiveProgram","Im2ColProgram","rowDim","colDim","getShapeForBatchMatMul","conv2DImpl","sameSize","useNaiveConv2d","xReshaped","filterReshaped","sharedDim","conv2dByMatMul","x2ColShape","im2ColProgram","x2Col","conv2dWithIm2Col","inputVar","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerInputProgram","channelDim","Conv2DDerFilterProgram","filterShape","conv2DBackpropFilterConfig","Conv2DBackpropFilter","Conv2DDerInputMMProgram","conv2dTransposeCommonSnippet","conv2DBackpropInputConfig","Conv2DBackpropInput","cos","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","channnel","boxShape","cropSize","method","numBoxes","methodId","cropHeightBiggerThan1","cropWidthBiggerThan1","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","extrapolationValue","CumOpType","CumProgram","exclusive","reverse","initVal","Prod","val","condition","idxString","getFinalCoord","cumImpl","permutation","permutedX","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","cumprodConfig","Cumprod","cumsumConfig","Cumsum","Sum","denseBincountConfig","DenseBincount","xRankOne","DepthToSpaceProgram","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","blockSize","outputHeight","outputWidth","outputDepth","DepthwiseConv2DNCHWSharedProgram","hasPreluActivation","tileAHeight","DepthwiseConv2DVec4Program","xNumber","DepthwiseConv2DProgram","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","multiplyKernelFunc","cpuMultiply","multiplyConfig","Multiply","sumConfig","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","elu","eluConfig","Elu","equal","cpuEqual","equalConfig","Equal","erf","erfConfig","Erf","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","expm1Config","Expm1","FFTProgram","fftImpl","inverse","inputSize","innerDimensionSize","input2D","PI","imagPart","complexOutputReshaped","fftConfig","FFT","FlipLeftRightProgram","imageShape","flipLeftRightConfig","FlipLeftRight","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","numChannels","importVideo","textureLoad","fromPixelsConfig","FromPixels","pixels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","isCanvas","HTMLCanvasElement","OffscreenCanvas","isImageBitmap","ImageBitmap","videoWidth","videoHeight","isVideoOrImage","newWillReadFrequently","fromPixels2DContext","willReadFrequently","canvas","drawImage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","copyExternalImageToTexture","imageData","pixelArray","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","offsetSnippet","scaleSnippet","fusedBatchNormConfig","FusedBatchNorm","scale","variance","varianceEpsilon","webGPUBackend","batchNormInputs","fusedConv2DConfig","FusedConv2D","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","eitherStridesOrDilationsAreOne","programInputs","GatherNDProgram","sliceDim","strideString","gatherNdConfig","GatherNd","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","getSourceCoords","gatherV2","batchDims","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","indicesValues","xValues","gatherV2Config","GatherV2","greater","cpuGreater","greaterConfig","Greater","greaterEqual","cpuGreaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","leakyReluConfig","LeakyRelu","alpha","less","cpuLess","lessConfig","Less","lessEqual","cpuLessEqual","lessEqualConfig","LessEqual","LinSpaceProgram","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","powOperatorSnippet","LRNProgram","LRNSharedProgram","radius","maxAllowRadius","elementsPerWorkgroup","lrnConfig","LRN","depthRadius","beta","maximum","cpuMaximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","minConfig","Min","minimum","cpuMinimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","p","shaderStart","shaderEnd","shaderOutC","unpackedCoords","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","negConfig","Neg","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","kernel_impls","nonMaxSuppressionV3Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","nonMaxSuppressionV5Impl","OneHotProgram","depth","oneHotConfig","OneHot","onValue","offValue","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","startValue","endValue","leftPadCondition","rightPadCondition","padV2","constantValue","padV2Config","PadV2","pow","powConfig","Pow","preluConfig","Prelu","prodConfig","rangeConfig","Range","realDiv","realDivConfig","RealDiv","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","ResizeNearestNeighborProgram","sourceFracIndexRC","resizeNearestNeighborConfig","ResizeNearestNeighbor","ReverseProgram","reverseConfig","Reverse","xShape4D","dims4D","ax","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","centerX","centerY","getImageCenter","sin","parseFloat","toFixed","round","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","flattenXShape","indicesRank","updatesRank","sliceDimGreaterThanOne","stridesType","indicesString","indicesSnippet","outCoordsString","getUpdatesCoordsFromFlatIndex","updatesSnippet","scatterNdConfig","ScatterNd","calculateShapes","SearchSortedProgram","side","searchSortedConfig","SearchSorted","sortedSequence","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","e","selu","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","sub","cpuSub","subConfig","Sub","softmaxConfig","Softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","TileProgram","uniformPrefix","tile","buf","tileConfig","Tile","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","updatesBuf","$defaultValue","$sparseIndices","$sparseValues","$denseValues","denseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","sqrtConfig","Sqrt","squareConfig","Square","squaredDifference","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","StridedSliceProgram","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","stringNGramsConfig","StringNGrams","$data","$dataSplits","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","uniformDataSwap","prevIndices","len","mergeProgram","uniformDataMerge","prevValues","TransformProgram","kernelConfigs","Transform","transforms","interpolation","fillMode","imageHeight","imageWidth","interpolationModeId","fillModeId","Unpack","kernelConfig","registerKernel"],"mappings":"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2C,GAE7C,MAAMI,EAAazqD,EAInB,OAHAA,EAASyU,GAAQ,CAAC/c,OAAQ,CAAC7C,EAAGmL,GAAS+T,MAAO,CAACphB,MAAOinB,GAAW9F,YACjE01C,GAAoC11C,EAAS22C,GAEtC,CAACzqD,EAAQsc,EAClB,SCzJaouC,GAUXh9D,YAAYuI,GATZrI,mBAAgB,CAAC,QAAS,cAE1BA,cAAW,gEAIXA,mBAA0C,CAAC,GAAI,EAAG,GAClDA,WAAO,EAGLA,KAAKsM,YAAcjE,EACnBrI,KAAKsI,eAAiB+E,EAAmBrN,KAAKsM,aAC9CtM,KAAKiM,SAAWI,EACZrM,KAAKsI,eAAgBtI,KAAKsM,YAAatM,KAAKkG,eAChDlG,KAAK4Z,UAAY,YAGnB/S,cAsHE,MArHiB,w5EAgETqd,EAAK,y2ECnCV,MCyFD64C,GAAgC,CACpC9zC,GACAygB,GACAG,GACAG,GACAI,GACAM,GACAoC,GACAE,GACAK,GACAK,GACAI,GACAG,GACAG,GACAG,GACAG,GACA8B,GACAO,GACAM,GACAe,GACAoB,GACAU,GACAY,GACAI,GACA/qB,GACA6sB,GACAyC,GACAU,GACAI,GACAG,GACAG,GACAmB,GACAwB,GACAE,GACAG,GACAS,GACAY,GACAI,GACAI,GACAQ,GACAqB,GACAI,GACAG,GACAE,GACAG,GACAE,GACAW,GACAx8B,GACA48B,GACAW,GACAT,GACAG,GACAuC,GACAO,GACAE,GACAO,GACAoB,GACAI,GACAI,GACA/+B,GACAi/B,GACAnT,GACAsT,GACAG,GACAE,GACAE,GACAK,GACAI,GACAG,GACAK,GACAH,GACAM,GACAG,GACAG,GACAQ,GACAvc,GACA6c,GACAE,GACA5c,GACA8c,GACAI,GACAU,GACAG,GACAtN,GACAwN,GACAE,GACAW,GACAta,GACAib,GACAO,GACAG,GACAW,GACAG,GACAE,GACAE,GACAC,GACA5c,GACA+c,GACAG,GACAG,GACAG,GACAtqC,GACA2qC,GACAO,GACAG,GACAQ,GACAW,GACAG,GACAa,GACAK,GACAS,GACAI,GACAG,GACAE,GACAE,GACAG,GACApkB,GACA0nB,GACAK,GACAe,GACApE,GACAS,GACAE,GACAc,GACAU,GACAM,GACAE,GACAG,GACAhD,GACAzW,GACAob,GACAG,GACArD,GACA4D,GChO2C,CAC3Ct1C,WAAYu2C,YACZr2C,YAAa,SACbC,oBA/CwBX,GAKxB,MAAMnc,OAACA,EAAMoc,QAAEA,EAAOC,MAAEA,GAASF,GAC3Bi2B,MAACA,EAAK+gB,WAAEA,GAAcnzD,GACtBozD,cAACA,EAAaC,SAAEA,EAAQtK,UAAEA,EAASvmD,YAAEA,GAAe6Z,GAEnDse,EAAO24B,EAAaC,EAAYzZ,GAAe1H,EAAMn3C,OACrDosC,EAAWC,GACC,MAAf9kC,EAAsBA,EAAc,CAAC8wD,EAAaC,GAKhD33D,EAAU,IAAIo3D,GAHhB,CAACr4B,EAAO0M,EAAWC,EAClBwS,IAGC0Z,EAAwC,YAAlBJ,EAA8B,EAAI,EAC9D,IAAIK,EACJ,OAAQJ,GACN,IAAK,WAYL,QACEI,EAAa,EACb,MAXF,IAAK,UACHA,EAAa,EACb,MACF,IAAK,OACHA,EAAa,EACb,MACF,IAAK,UACHA,EAAa,EAMjB,MAAMh3C,EAAc,CAClB,CAAC/gB,KAAM,QAASqO,KAAM,CAACypD,IACvB,CAAC93D,KAAM,QAASqO,KAAM,CAAC0pD,IAAc,CAAC/3D,KAAM,UAAWqO,KAAM,CAACg/C,KAEhE,OAAO3sC,EAAQxN,iBACXhT,EAAS,CAACw2C,EAAO+gB,GAAa,UAAW12C,EAC/C,GDoOE+kB,GDhOwC,CACxC7kB,WAAY+2C,SACZ72C,YAAa,SACbC,oBA9CEX,GAGF,MAAMnc,OAACA,EAAMoc,QAAEA,EAAOC,MAAEA,GAASF,GAC3BG,MAACA,GAAStc,EAChB,IAAIs7B,KAACA,GAAQjf,EAETif,EAAO,IACTA,GAAQhf,EAAMrhB,MAAMrD,QAGtB,MAAMuF,EAAImf,EACJ8e,EAAQj+B,EAAElC,MAAMrD,OAEhBi7B,EAAMvW,EAAMrhB,MAAMqgC,GAClB/8B,EAAqB,IAAIlD,MAAM+/B,EAAQ,GAC7C,IAAI7B,EAAW,EACf,IAAK,IAAIj+B,EAAI,EAAGA,EAAI8/B,EAAO9/B,IACrBA,IAAMggC,IACR/8B,EAASg7B,KAAcp8B,EAAElC,MAAMK,IAInC,MAAM4mC,EAAY,GAEZzM,EAAQ,IAAIp6B,MAAM+/B,GAAOlf,KAAK,GAC9BnlB,EAAOoG,EAAElC,MAAMuC,QACrBzG,EAAKukC,GAAQ,EACb,MAAM37B,EAAoB,IAAItE,MAAMw3B,GACpC,IAAK,IAAIv3B,EAAI,EAAGA,EAAIqE,EAAI/H,OAAQ0D,IAAK,CACnCm6B,EAAM6F,GAAQhgC,EACd,MAAMguC,EAAS9rC,GAAM,CAACwC,OAAQ,CAAC7C,KAAIif,UAASC,MAAO,CAACoZ,QAAO1+B,UACrD2xC,EACF3rB,GAAQ,CAAC/c,OAAQ,CAAC7C,EAAGmsC,GAASltB,UAASC,MAAO,CAACphB,MAAOsD,KAC1DoB,EAAIrE,GAAKotC,EAETxG,EAAUlqC,KAAKsxC,GAIjB,OADApH,EAAU/oC,SAAQ+K,GAAKkY,EAAQtV,YAAY5C,EAAE6C,UACtCpH,CACT,GCoOE2lD,IAGF,IAAK,MAAMqO,KAAgBV,GACzBW,iBAAeD"}