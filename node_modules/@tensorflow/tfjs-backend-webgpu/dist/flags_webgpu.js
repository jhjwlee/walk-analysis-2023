/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { env } from '@tensorflow/tfjs-core';
const ENV = env();
/** The batched dispatching calls size in the device queue. */
ENV.registerFlag('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE', () => 15);
/**
 * Whether we forward execution to the CPU backend if tensors are small and
 * reside on the CPU.
 */
ENV.registerFlag('WEBGPU_CPU_FORWARD', () => true);
/**
 * This flag is used to test different types of matmul programs.
 *
 * See MatMulProgramType in webgpu_util.ts for a list of available values.
 */
ENV.registerFlag('WEBGPU_MATMUL_PROGRAM_TYPE', () => -1);
/**
 * Whether to use conv2dTranspose_naive which directly implement the
 * conv2dTranspose logic rather than using a matmul to simulate.
 */
ENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE', () => false);
/**
 * Whether we use low power GPU. Otherwise, a high performance GPU will be
 * requested.
 */
ENV.registerFlag('WEBGPU_USE_LOW_POWER_GPU', () => false);
/**
 * Threshold for input tensor size that determines whether WebGPU backend will
 * delegate computation to CPU.
 *
 * Default value is 1000.
 */
ENV.registerFlag('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD', () => 1000);
/**
 * Whether to use a dummy canvas to make profiling tools like PIX work with
 * TFJS webgpu backend.
 */
ENV.registerFlag('WEBGPU_USE_PROFILE_TOOL', () => false);
/**
 * Whether to use import API.
 */
ENV.registerFlag('WEBGPU_IMPORT_EXTERNAL_TEXTURE', () => true);
/**
 * Whether to use conv2dNaive for debugging.
 */
ENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_DEBUG', () => false);
/**
 * Threshold to increase dispatched workgroups for matmul. If too few workgroups
 * are dispatched, it means the hardware may be in low occupancy.
 * 0 means it's not set by the user. A default strategy will be applied.
 */
ENV.registerFlag('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL', () => 0);
/**
 * Whether we will run im2col as a separate shader for convolution.
 */
ENV.registerFlag('WEBGPU_CONV_SEPARATE_IM2COL_SHADER', () => false);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3Nfd2ViZ3B1LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1iYWNrZW5kLXdlYmdwdS9zcmMvZmxhZ3Nfd2ViZ3B1LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUUxQyxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUVsQiw4REFBOEQ7QUFDOUQsR0FBRyxDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUVoRTs7O0dBR0c7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRW5EOzs7O0dBSUc7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFekQ7OztHQUdHO0FBQ0gsR0FBRyxDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUVuRTs7O0dBR0c7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTFEOzs7OztHQUtHO0FBQ0gsR0FBRyxDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUVsRTs7O0dBR0c7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXpEOztHQUVHO0FBQ0gsR0FBRyxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUUvRDs7R0FFRztBQUNILEdBQUcsQ0FBQyxZQUFZLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFL0Q7Ozs7R0FJRztBQUNILEdBQUcsQ0FBQyxZQUFZLENBQUMsb0RBQW9ELEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFaEY7O0dBRUc7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge2Vudn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuY29uc3QgRU5WID0gZW52KCk7XG5cbi8qKiBUaGUgYmF0Y2hlZCBkaXNwYXRjaGluZyBjYWxscyBzaXplIGluIHRoZSBkZXZpY2UgcXVldWUuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdXRUJHUFVfREVGRVJSRURfU1VCTUlUX0JBVENIX1NJWkUnLCAoKSA9PiAxNSk7XG5cbi8qKlxuICogV2hldGhlciB3ZSBmb3J3YXJkIGV4ZWN1dGlvbiB0byB0aGUgQ1BVIGJhY2tlbmQgaWYgdGVuc29ycyBhcmUgc21hbGwgYW5kXG4gKiByZXNpZGUgb24gdGhlIENQVS5cbiAqL1xuRU5WLnJlZ2lzdGVyRmxhZygnV0VCR1BVX0NQVV9GT1JXQVJEJywgKCkgPT4gdHJ1ZSk7XG5cbi8qKlxuICogVGhpcyBmbGFnIGlzIHVzZWQgdG8gdGVzdCBkaWZmZXJlbnQgdHlwZXMgb2YgbWF0bXVsIHByb2dyYW1zLlxuICpcbiAqIFNlZSBNYXRNdWxQcm9ncmFtVHlwZSBpbiB3ZWJncHVfdXRpbC50cyBmb3IgYSBsaXN0IG9mIGF2YWlsYWJsZSB2YWx1ZXMuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9NQVRNVUxfUFJPR1JBTV9UWVBFJywgKCkgPT4gLTEpO1xuXG4vKipcbiAqIFdoZXRoZXIgdG8gdXNlIGNvbnYyZFRyYW5zcG9zZV9uYWl2ZSB3aGljaCBkaXJlY3RseSBpbXBsZW1lbnQgdGhlXG4gKiBjb252MmRUcmFuc3Bvc2UgbG9naWMgcmF0aGVyIHRoYW4gdXNpbmcgYSBtYXRtdWwgdG8gc2ltdWxhdGUuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9VU0VfTkFJVkVfQ09OVjJEX1RSQU5TUE9TRScsICgpID0+IGZhbHNlKTtcblxuLyoqXG4gKiBXaGV0aGVyIHdlIHVzZSBsb3cgcG93ZXIgR1BVLiBPdGhlcndpc2UsIGEgaGlnaCBwZXJmb3JtYW5jZSBHUFUgd2lsbCBiZVxuICogcmVxdWVzdGVkLlxuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdXRUJHUFVfVVNFX0xPV19QT1dFUl9HUFUnLCAoKSA9PiBmYWxzZSk7XG5cbi8qKlxuICogVGhyZXNob2xkIGZvciBpbnB1dCB0ZW5zb3Igc2l6ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciBXZWJHUFUgYmFja2VuZCB3aWxsXG4gKiBkZWxlZ2F0ZSBjb21wdXRhdGlvbiB0byBDUFUuXG4gKlxuICogRGVmYXVsdCB2YWx1ZSBpcyAxMDAwLlxuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdXRUJHUFVfQ1BVX0hBTkRPRkZfU0laRV9USFJFU0hPTEQnLCAoKSA9PiAxMDAwKTtcblxuLyoqXG4gKiBXaGV0aGVyIHRvIHVzZSBhIGR1bW15IGNhbnZhcyB0byBtYWtlIHByb2ZpbGluZyB0b29scyBsaWtlIFBJWCB3b3JrIHdpdGhcbiAqIFRGSlMgd2ViZ3B1IGJhY2tlbmQuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9VU0VfUFJPRklMRV9UT09MJywgKCkgPT4gZmFsc2UpO1xuXG4vKipcbiAqIFdoZXRoZXIgdG8gdXNlIGltcG9ydCBBUEkuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9JTVBPUlRfRVhURVJOQUxfVEVYVFVSRScsICgpID0+IHRydWUpO1xuXG4vKipcbiAqIFdoZXRoZXIgdG8gdXNlIGNvbnYyZE5haXZlIGZvciBkZWJ1Z2dpbmcuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9VU0VfTkFJVkVfQ09OVjJEX0RFQlVHJywgKCkgPT4gZmFsc2UpO1xuXG4vKipcbiAqIFRocmVzaG9sZCB0byBpbmNyZWFzZSBkaXNwYXRjaGVkIHdvcmtncm91cHMgZm9yIG1hdG11bC4gSWYgdG9vIGZldyB3b3JrZ3JvdXBzXG4gKiBhcmUgZGlzcGF0Y2hlZCwgaXQgbWVhbnMgdGhlIGhhcmR3YXJlIG1heSBiZSBpbiBsb3cgb2NjdXBhbmN5LlxuICogMCBtZWFucyBpdCdzIG5vdCBzZXQgYnkgdGhlIHVzZXIuIEEgZGVmYXVsdCBzdHJhdGVneSB3aWxsIGJlIGFwcGxpZWQuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1dFQkdQVV9USFJFU0hPTERfVE9fSU5DUkVBU0VfV09SS0dST1VQU19GT1JfTUFUTVVMJywgKCkgPT4gMCk7XG5cbi8qKlxuICogV2hldGhlciB3ZSB3aWxsIHJ1biBpbTJjb2wgYXMgYSBzZXBhcmF0ZSBzaGFkZXIgZm9yIGNvbnZvbHV0aW9uLlxuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdXRUJHUFVfQ09OVl9TRVBBUkFURV9JTTJDT0xfU0hBREVSJywgKCkgPT4gZmFsc2UpO1xuIl19